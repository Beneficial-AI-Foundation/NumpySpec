/-!
{
  "name": "numpy.trace",
  "category": "Diagonal operations",
  "description": "Return the sum along diagonals of the array",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.trace.html",
  "doc": "Return the sum along diagonals of the array.\n\nIf \`a\` is 2-D, the sum along its diagonal with the given offset is returned, i.e., the sum of elements \`\`a[i,i+offset]\`\` for all i.\n\nIf \`a\` has more than two dimensions, then the axes specified by axis1 and axis2 are used to determine the 2-D sub-arrays whose traces are returned. The shape of the resulting array is the same as that of \`a\` with \`axis1\` and \`axis2\` removed.\n\nParameters\n----------\na : array_like\n    Input array, from which the diagonals are taken.\noffset : int, optional\n    Offset of the diagonal from the main diagonal. Can be both positive and negative.\naxis1, axis2 : int, optional\n    Axes to be used as the first and second axis of the 2-D sub-arrays from which the diagonals should be taken.\ndtype : dtype, optional\n    Determines the data-type of the returned array and of the accumulator where the elements are summed.\nout : ndarray, optional\n    Array into which the output is placed.\n\nReturns\n-------\nsum_along_diagonals : ndarray\n    If \`a\` is 2-D, the sum along the diagonal is returned. If \`a\` has larger dimensions, then an array of sums along diagonals is returned.",
  "code": "@array_function_dispatch(_trace_dispatcher)\ndef trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):\n    \"\"\"\n    Return the sum along diagonals of the array.\n\n    If \`a\` is 2-D, the sum along its diagonal with the given offset\n    is returned, i.e., the sum of elements \`\`a[i,i+offset]\`\` for all i.\n\n    If \`a\` has more than two dimensions, then the axes specified by axis1 and\n    axis2 are used to determine the 2-D sub-arrays whose traces are returned.\n    The shape of the resulting array is the same as that of \`a\` with \`axis1\`\n    and \`axis2\` removed.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, from which the diagonals are taken.\n    offset : int, optional\n        Offset of the diagonal from the main diagonal. Can be both positive\n        and negative. Defaults to 0.\n    axis1, axis2 : int, optional\n        Axes to be used as the first and second axis of the 2-D sub-arrays\n        from which the diagonals should be taken. Defaults are the first two\n        axes of \`a\`.\n    dtype : dtype, optional\n        Determines the data-type of the returned array and of the accumulator\n        where the elements are summed.\n    out : ndarray, optional\n        Array into which the output is placed.\n\n    Returns\n    -------\n    sum_along_diagonals : ndarray\n        If \`a\` is 2-D, the sum along the diagonal is returned.  If \`a\` has\n        larger dimensions, then an array of sums along diagonals is returned.\n    \"\"\"\n    if isinstance(a, np.matrix):\n        # Get trace of matrix via an array to preserve backward compatibility.\n        return asarray(a).trace(\n            offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out\n        )\n    else:\n        return asanyarray(a).trace(\n            offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out\n        )"
}
-/

-- TODO: Implement trace

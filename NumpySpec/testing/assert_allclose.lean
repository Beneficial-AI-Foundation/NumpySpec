/-!
{
  "name": "numpy.testing.assert_allclose",
  "category": "Assertion Functions",
  "description": "Raises an AssertionError if two objects are not equal up to desired tolerance",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.testing.assert_allclose.html",
  "doc": "Raises an AssertionError if two objects are not equal up to desired tolerance.\n\nGiven two array_like objects, check that their shapes and all elements are equal (but see the Notes for the special handling of a scalar). An exception is raised if the shapes mismatch or any values conflict. In contrast to the standard usage in numpy, NaNs are compared like numbers, no assertion is raised if both objects have NaNs in the same positions.\n\nThe test is equivalent to \`\`allclose(actual, desired, rtol, atol)\`\` (note that \`\`allclose\`\` has different default values). It compares the difference between \`actual\` and \`desired\` to \`\`atol + rtol * abs(desired)\`\`.",
  "code": "def assert_allclose(actual, desired, rtol=1e-7, atol=0, equal_nan=True,\n                    err_msg='', verbose=True, *, strict=False):\n    \"\"\"\n    Raises an AssertionError if two objects are not equal up to desired\n    tolerance.\n\n    Given two array_like objects, check that their shapes and all elements\n    are equal (but see the Notes for the special handling of a scalar). An\n    exception is raised if the shapes mismatch or any values conflict. In\n    contrast to the standard usage in numpy, NaNs are compared like numbers,\n    no assertion is raised if both objects have NaNs in the same positions.\n\n    The test is equivalent to \`\`allclose(actual, desired, rtol, atol)\`\` (note\n    that \`\`allclose\`\` has different default values). It compares the difference\n    between \`actual\` and \`desired\` to \`\`atol + rtol * abs(desired)\`\`.\n\n    Parameters\n    ----------\n    actual : array_like\n        Array obtained.\n    desired : array_like\n        Array desired.\n    rtol : float, optional\n        Relative tolerance.\n    atol : float, optional\n        Absolute tolerance.\n    equal_nan : bool, optional.\n        If True, NaNs will compare equal.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n    strict : bool, optional\n        If True, raise an \`\`AssertionError\`\` when either the shape or the data\n        type of the arguments does not match. The special handling of scalars\n        mentioned in the Notes section is disabled.\n\n        .. versionadded:: 2.0.0\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired are not equal up to specified precision.\n\n    See Also\n    --------\n    assert_array_almost_equal_nulp, assert_array_max_ulp\n\n    Notes\n    -----\n    When one of \`actual\` and \`desired\` is a scalar and the other is array_like, the\n    function performs the comparison as if the scalar were broadcasted to the shape\n    of the array. Note that empty arrays are therefore considered equal to scalars.\n    This behaviour can be disabled by setting \`\`strict==True\`\`.\n\n    Examples\n    --------\n    >>> x = [1e-5, 1e-3, 1e-1]\n    >>> y = np.arccos(np.cos(x))\n    >>> np.testing.assert_allclose(x, y, rtol=1e-5, atol=0)\n\n    As mentioned in the Notes section, \`assert_allclose\` has special\n    handling for scalars. Here, the test checks that the value of \`numpy.sin\`\n    is nearly zero at integer multiples of Ï€.\n\n    >>> x = np.arange(3) * np.pi\n    >>> np.testing.assert_allclose(np.sin(x), 0, atol=1e-15)\n\n    Use \`strict\` to raise an \`\`AssertionError\`\` when comparing an array\n    with one or more dimensions against a scalar.\n\n    >>> np.testing.assert_allclose(np.sin(x), 0, atol=1e-15, strict=True)\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Not equal to tolerance rtol=1e-07, atol=1e-15\n    <BLANKLINE>\n    (shapes (3,), () mismatch)\n     ACTUAL: array([ 0.000000e+00,  1.224647e-16, -2.449294e-16])\n     DESIRED: array(0)\n\n    The \`strict\` parameter also ensures that the array data types match:\n\n    >>> y = np.zeros(3, dtype=np.float32)\n    >>> np.testing.assert_allclose(np.sin(x), y, atol=1e-15, strict=True)\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Not equal to tolerance rtol=1e-07, atol=1e-15\n    <BLANKLINE>\n    (dtypes float64, float32 mismatch)\n     ACTUAL: array([ 0.000000e+00,  1.224647e-16, -2.449294e-16])\n     DESIRED: array([0., 0., 0.], dtype=float32)\n\n    \"\"\"\n    __tracebackhide__ = True  # Hide traceback for py.test\n    import numpy as np\n\n    def compare(x, y):\n        return np._core.numeric.isclose(x, y, rtol=rtol, atol=atol,\n                                       equal_nan=equal_nan)\n\n    actual, desired = np.asanyarray(actual), np.asanyarray(desired)\n    header = f'Not equal to tolerance rtol={rtol:g}, atol={atol:g}'\n    assert_array_compare(compare, actual, desired, err_msg=str(err_msg),\n                         verbose=verbose, header=header, equal_nan=equal_nan,\n                         strict=strict)"
}
-/

-- TODO: Implement assert_allclose

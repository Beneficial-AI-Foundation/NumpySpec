/-!
{
  "name": "numpy.testing.assert_array_equal",
  "category": "Assertion Functions",
  "description": "Raises an AssertionError if two array_like objects are not equal",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.testing.assert_array_equal.html",
  "doc": "Raises an AssertionError if two array_like objects are not equal.\n\nGiven two array_like objects, check that the shape is equal and all elements of these objects are equal (but see the Notes for the special handling of a scalar). An exception is raised at shape mismatch or conflicting values. In contrast to the standard usage in numpy, NaNs are compared like numbers, no assertion is raised if both objects have NaNs in the same positions.\n\nThe usual caution for verifying equality with floating point numbers is advised.",
  "code": "def assert_array_equal(actual, desired, err_msg='', verbose=True, *,\n                       strict=False):\n    \"\"\"\n    Raises an AssertionError if two array_like objects are not equal.\n\n    Given two array_like objects, check that the shape is equal and all\n    elements of these objects are equal (but see the Notes for the special\n    handling of a scalar). An exception is raised at shape mismatch or\n    conflicting values. In contrast to the standard usage in numpy, NaNs\n    are compared like numbers, no assertion is raised if both objects have\n    NaNs in the same positions.\n\n    The usual caution for verifying equality with floating point numbers is\n    advised.\n\n    .. note:: When either \`actual\` or \`desired\` is already an instance of\n        \`numpy.ndarray\` and \`desired\` is not a \`\`dict\`\`, the behavior of\n        \`\`assert_equal(actual, desired)\`\` is identical to the behavior of this\n        function. Otherwise, this function performs \`np.asanyarray\` on the\n        inputs before comparison, whereas \`assert_equal\` defines special\n        comparison rules for common Python types. For example, only\n        \`assert_equal\` can be used to compare nested Python lists. In new code,\n        consider using only \`assert_equal\`, explicitly converting either\n        \`actual\` or \`desired\` to arrays if the behavior of \`assert_array_equal\`\n        is desired.\n\n    Parameters\n    ----------\n    actual : array_like\n        The actual object to check.\n    desired : array_like\n        The desired, expected object.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n    strict : bool, optional\n        If True, raise an AssertionError when either the shape or the data\n        type of the array_like objects does not match. The special\n        handling for scalars mentioned in the Notes section is disabled.\n\n        .. versionadded:: 1.24.0\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired objects are not equal.\n\n    See Also\n    --------\n    assert_allclose: Compare two array_like objects for equality with desired\n                     relative and/or absolute precision.\n    assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\n    Notes\n    -----\n    When one of \`actual\` and \`desired\` is a scalar and the other is array_like, the\n    function checks that each element of the array_like is equal to the scalar.\n    Note that empty arrays are therefore considered equal to scalars.\n    This behaviour can be disabled by setting \`\`strict==True\`\`.\n\n    Examples\n    --------\n    The first assert does not raise an exception:\n\n    >>> np.testing.assert_array_equal([1.0,2.33333,np.nan],\n    ...                               [np.exp(0),2.33333, np.nan])\n\n    Assert fails with numerical imprecision with floats:\n\n    >>> np.testing.assert_array_equal([1.0,np.pi,np.nan],\n    ...                               [1, np.sqrt(np.pi)**2, np.nan])\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Arrays are not equal\n    <BLANKLINE>\n    Mismatched elements: 1 / 3 (33.3%)\n    Max absolute difference among violations: 4.4408921e-16\n    Max relative difference among violations: 1.41357986e-16\n     ACTUAL: array([1.      , 3.141593,      nan])\n     DESIRED: array([1.      , 3.141593,      nan])\n\n    Use \`assert_allclose\` or one of the nulp (number of floating point values)\n    functions for these cases instead:\n\n    >>> np.testing.assert_allclose([1.0,np.pi,np.nan],\n    ...                            [1, np.sqrt(np.pi)**2, np.nan],\n    ...                            rtol=1e-10, atol=0)\n\n    As mentioned in the Notes section, \`assert_array_equal\` has special\n    handling for scalars. Here the test checks that each value in \`x\` is 3:\n\n    >>> x = np.full((2, 5), fill_value=3)\n    >>> np.testing.assert_array_equal(x, 3)\n\n    Use \`strict\` to raise an AssertionError when comparing a scalar with an\n    array:\n\n    >>> np.testing.assert_array_equal(x, 3, strict=True)\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Arrays are not equal\n    <BLANKLINE>\n    (shapes (2, 5), () mismatch)\n     ACTUAL: array([[3, 3, 3, 3, 3],\n           [3, 3, 3, 3, 3]])\n     DESIRED: array(3)\n\n    The \`strict\` parameter also ensures that the array data types match:\n\n    >>> x = np.array([2, 2, 2])\n    >>> y = np.array([2., 2., 2.], dtype=np.float32)\n    >>> np.testing.assert_array_equal(x, y, strict=True)\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Arrays are not equal\n    <BLANKLINE>\n    (dtypes int64, float32 mismatch)\n     ACTUAL: array([2, 2, 2])\n     DESIRED: array([2., 2., 2.], dtype=float32)\n    \"\"\"\n    __tracebackhide__ = True  # Hide traceback for py.test\n    assert_array_compare(operator.__eq__, actual, desired, err_msg=err_msg,\n                         verbose=verbose, header='Arrays are not equal',\n                         strict=strict)"
}
-/

-- TODO: Implement assert_array_equal

/-!
{
  "name": "numpy.histogram2d",
  "category": "Histograms",
  "description": "Compute the bi-dimensional histogram of two data samples",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.histogram2d.html",
  "doc": "numpy.histogram2d(x, y, bins=10, range=None, density=None, weights=None)\n\nCompute the bi-dimensional histogram of two data samples.\n\nParameters\n----------\nx : array_like, shape (N,)\n    An array containing the x coordinates of the points to be histogrammed.\ny : array_like, shape (N,)\n    An array containing the y coordinates of the points to be histogrammed.\nbins : int or array_like or [int, int] or [array, array], optional\n    The bin specification:\n    * If int, the number of bins for the two dimensions (nx=ny=bins).\n    * If array_like, the bin edges for the two dimensions (x_edges=y_edges=bins).\n    * If [int, int], the number of bins in each dimension (nx, ny = bins).\n    * If [array, array], the bin edges in each dimension (x_edges, y_edges = bins).\nrange : array_like, shape(2,2), optional\n    The leftmost and rightmost edges of the bins along each dimension (if not specified explicitly in the bins parameters): [[xmin, xmax], [ymin, ymax]].\ndensity : bool, optional\n    If False, the default, returns the number of samples in each bin. If True, returns the probability density function at the bin.\nweights : array_like, shape(N,), optional\n    An array of values w_i weighing each sample (x_i, y_i).\n\nReturns\n-------\nH : ndarray, shape(nx, ny)\n    The bi-dimensional histogram of samples x and y.\nxedges : ndarray, shape(nx+1,)\n    The bin edges along the first dimension.\nyedges : ndarray, shape(ny+1,)\n    The bin edges along the second dimension.",
  "code": "# Implementation in numpy/lib/_twodim_base_impl.py\n@array_function_dispatch(_histogram2d_dispatcher)\ndef histogram2d(x, y, bins=10, range=None, density=None, weights=None):\n    \"\"\"\n    Compute the bi-dimensional histogram of two data samples.\n    \"\"\"\n    from numpy import histogramdd\n    \n    if len(x) != len(y):\n        raise ValueError('x and y must have the same length.')\n    \n    try:\n        N = len(bins)\n    except TypeError:\n        N = 1\n    \n    if N != 1 and N != 2:\n        xedges = yedges = np.asarray(bins)\n        bins = [xedges, yedges]\n    \n    hist, edges = histogramdd([x, y], bins, range, density, weights)\n    return hist, edges[0], edges[1]"
}
-/

-- TODO: Implement histogram2d

/-!
{
  "name": "numpy.nanvar",
  "category": "Averages and variances",
  "description": "Compute the variance along the specified axis, ignoring NaNs",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.nanvar.html",
  "doc": "numpy.nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)\n\nCompute the variance along the specified axis, while ignoring NaNs.\n\nReturns the variance of the array elements, a measure of the spread of a distribution. The variance is computed for the flattened array by default, otherwise over the specified axis.\n\nFor all-NaN slices, NaN is returned and a RuntimeWarning is raised.\n\nParameters\n----------\na : array_like\n    Array containing numbers whose variance is desired. If a is not an array, a conversion is attempted.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the variance is computed. The default is to compute the variance of the flattened array.\ndtype : data-type, optional\n    Type to use in computing the variance. For arrays of integer type the default is float64; for arrays of float types it is the same as the array type.\nout : ndarray, optional\n    Alternate output array in which to place the result. It must have the same shape as the expected output.\nddof : int, optional\n    \"Delta Degrees of Freedom\": the divisor used in the calculation is N - ddof, where N represents the number of non-NaN elements. By default ddof is zero.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left in the result as dimensions with size one.\nwhere : array_like of bool, optional\n    Elements to include in the variance.\n\nReturns\n-------\nvariance : ndarray, see dtype parameter above\n    If out is None, returns a new array containing the variance; otherwise, a reference to the output array is returned. If ddof is >= the number of non-NaN elements in a slice or the slice contains only NaNs, then the result for that slice is NaN.",
  "code": "# Implementation in numpy/lib/_nanfunctions_impl.py\n@array_function_dispatch(_nanvar_dispatcher)\ndef nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue,\n           *, where=np._NoValue):\n    \"\"\"\n    Compute the variance along the specified axis, while ignoring NaNs.\n    \"\"\"\n    arr, mask = _replace_nan(a, 0)\n    if mask is None:\n        return np.var(arr, axis=axis, dtype=dtype, out=out, ddof=ddof,\n                      keepdims=keepdims, where=where)\n    \n    if dtype is not None:\n        dtype = np.dtype(dtype)\n    if dtype is not None and not issubclass(dtype.type, np.inexact):\n        raise TypeError(\"If a is inexact, then dtype must be inexact\")\n    if out is not None and not issubclass(out.dtype.type, np.inexact):\n        raise TypeError(\"If a is inexact, then out must be inexact\")\n    \n    # Compute mean\n    cnt = np.sum(~mask, axis=axis, dtype=np.intp, keepdims=True,\n                 where=where)\n    avg = np.sum(arr, axis=axis, dtype=dtype, keepdims=True, where=where)\n    avg = _divide_by_count(avg, cnt)\n    \n    # Compute squared deviations\n    np.subtract(arr, avg, out=arr, where=~mask)\n    arr = _copyto(arr, 0, mask)\n    if issubclass(arr.dtype.type, np.complexfloating):\n        sqr = np.multiply(arr, arr.conj(), out=arr).real\n    else:\n        sqr = np.multiply(arr, arr, out=arr)\n    \n    # Compute variance\n    var = np.sum(sqr, axis=axis, dtype=dtype, out=out, keepdims=keepdims,\n                 where=where)\n    \n    if not keepdims and cnt.ndim != var.ndim:\n        cnt = cnt.squeeze(axis)\n    dof = cnt - ddof\n    var = _divide_by_count(var, dof)\n    \n    isbad = (dof <= 0)\n    if isbad.any():\n        warnings.warn(\"Degrees of freedom <= 0 for slice\", RuntimeWarning,\n                      stacklevel=2)\n        # NaN, inf, or negative numbers are all possible bad\n        # values, so explicitly replace them with NaN.\n        var = _copyto(var, np.nan, isbad)\n    \n    return var"
}
-/

-- TODO: Implement nanvar

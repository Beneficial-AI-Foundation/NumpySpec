/-!
{
  "name": "numpy.corrcoef",
  "category": "Correlating",
  "description": "Return Pearson product-moment correlation coefficients",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.corrcoef.html",
  "doc": "numpy.corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None)\n\nReturn Pearson product-moment correlation coefficients.\n\nPlease refer to the documentation for cov for more detail. The relationship between the correlation coefficient matrix, R, and the covariance matrix, C, is\n\nR_{ij} = C_{ij} / sqrt(C_{ii} * C_{jj})\n\nThe values of R are between -1 and 1, inclusive.\n\nParameters\n----------\nx : array_like\n    A 1-D or 2-D array containing multiple variables and observations. Each row of x represents a variable, and each column a single observation of all those variables. Also see rowvar below.\ny : array_like, optional\n    An additional set of variables and observations. y has the same shape as x.\nrowvar : bool, optional\n    If rowvar is True (default), then each row represents a variable, with observations in the columns. Otherwise, the relationship is transposed: each column represents a variable, while the rows contain observations.\nbias : _NoValue, optional\n    Has no effect, do not use.\nddof : _NoValue, optional\n    Has no effect, do not use.\ndtype : data-type, optional\n    Data-type of the result. By default, the return data-type will have at least numpy.float64 precision.\n\nReturns\n-------\nR : ndarray\n    The correlation coefficient matrix of the variables.\n\nNotes\n-----\nDue to floating point rounding the resulting array may not be Hermitian, the diagonal elements may not be 1, and the elements may not satisfy the inequality abs(a) <= 1. The real and imaginary parts are clipped to the interval [-1, 1] in an attempt to improve on that situation but is not much help in the complex case.",
  "code": "# Implementation in numpy/lib/_function_base_impl.py\n@array_function_dispatch(_corrcoef_dispatcher)\ndef corrcoef(x, y=None, rowvar=True, bias=np._NoValue, ddof=np._NoValue,\n             *, dtype=None):\n    \"\"\"\n    Return Pearson product-moment correlation coefficients.\n    \"\"\"\n    if bias is not np._NoValue or ddof is not np._NoValue:\n        warnings.warn('bias and ddof have no effect and are deprecated',\n                      DeprecationWarning, stacklevel=2)\n    \n    c = cov(x, y, rowvar, dtype=dtype)\n    try:\n        d = diag(c)\n    except ValueError:\n        # scalar covariance\n        # nan if incorrect value (nan, inf, 0), 1 otherwise\n        return c / c\n    \n    stddev = sqrt(d.real)\n    c /= stddev[:, None]\n    c /= stddev[None, :]\n    \n    # Clip to [-1, 1].  This does not guarantee\n    # abs(a[i,j]) <= 1 for complex arrays, but is\n    # the best we can do without excessive work.\n    np.clip(c.real, -1, 1, out=c.real)\n    if np.iscomplexobj(c):\n        np.clip(c.imag, -1, 1, out=c.imag)\n    \n    return c"
}
-/

-- TODO: Implement corrcoef

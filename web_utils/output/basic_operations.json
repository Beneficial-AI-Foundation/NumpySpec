{
  "numpy_basic_operations": {
    "arithmetic_operations": [
      {
        "name": "numpy.add",
        "description": "Add arguments element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.add.html",
        "doc": "numpy.add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'add'>\n\nAdd arguments element-wise.\n\nParameters:\n- x1, x2 : array_like\n  The arrays to be added. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).\n- out : ndarray, None, or tuple of ndarray and None, optional\n  A location into which the result is stored.\n- where : array_like, optional\n  This condition is broadcast over the input.\n\nReturns:\n- add : ndarray or scalar\n  The sum of x1 and x2, element-wise.\n\nNotes:\nEquivalent to x1 + x2 in terms of array broadcasting.\n\nExamples:\n>>> import numpy as np\n>>> np.add(1.0, 4.0)\n5.0\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> np.add(x1, x2)\narray([[ 0.,  2.,  4.],\n       [ 3.,  5.,  7.],\n       [ 6.,  8., 10.]])",
        "code": "def add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Add arguments element-wise.\n    \n    This is a universal function (ufunc) that performs element-wise addition\n    of two input arrays with broadcasting support.\n    \"\"\"\n    return _add_ufunc(x1, x2, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.subtract",
        "description": "Subtract arguments, element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.subtract.html",
        "doc": "numpy.subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'subtract'>\n\nSubtract arguments, element-wise.\n\nParameters:\n- x1, x2 : array_like\n  The arrays to be subtracted from each other. If x1.shape != x2.shape, they must be broadcastable to a common shape.\n- out : ndarray, None, or tuple of ndarray and None, optional\n  A location into which the result is stored.\n\nReturns:\n- subtract : ndarray\n  The difference of x1 and x2, element-wise.\n\nNotes:\nEquivalent to x1 - x2 in terms of array broadcasting.",
        "code": "def subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Subtract arguments, element-wise.\n    \n    This is a universal function (ufunc) that performs element-wise subtraction\n    of two input arrays with broadcasting support.\n    \"\"\"\n    return _subtract_ufunc(x1, x2, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.multiply",
        "description": "Multiply arguments element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.multiply.html",
        "doc": "numpy.multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'multiply'>\n\nMultiply arguments element-wise.\n\nParameters:\n- x1, x2 : array_like\n  Input arrays to be multiplied. If x1.shape != x2.shape, they must be broadcastable to a common shape (which becomes the shape of the output).\n- out : ndarray, None, or tuple of ndarray and None, optional\n  A location into which the result is stored.\n- where : array_like, optional\n  This condition is broadcast over the input.\n\nReturns:\n- y : ndarray\n  The product of x1 and x2, element-wise.\n\nNotes:\nEquivalent to x1 * x2 in terms of array broadcasting.\n\nExamples:\n>>> import numpy as np\n>>> np.multiply(2.0, 4.0)\n8.0\n>>> x1 = np.arange(9.0).reshape((3, 3))\n>>> x2 = np.arange(3.0)\n>>> np.multiply(x1, x2)\narray([[ 0.,  1.,  4.],\n       [ 0.,  4., 10.],\n       [ 0.,  7., 16.]])",
        "code": "def multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Multiply arguments element-wise.\n    \n    This is a universal function (ufunc) that performs element-wise multiplication\n    of two input arrays with broadcasting support.\n    \"\"\"\n    return _multiply_ufunc(x1, x2, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.divide",
        "description": "Divide arguments element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.divide.html",
        "doc": "numpy.divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'divide'>\n\nDivide arguments element-wise.\n\nParameters:\n- x1, x2 : array_like\n  The arrays to be divided. If x1.shape != x2.shape, they must be broadcastable to a common shape.\n\nReturns:\n- divide : ndarray\n  The quotient x1/x2, element-wise.\n\nNotes:\nEquivalent to x1 / x2 in terms of array broadcasting.",
        "code": "def divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Divide arguments element-wise.\n    \n    This is a universal function (ufunc) that performs element-wise division\n    of two input arrays with broadcasting support.\n    \"\"\"\n    return _divide_ufunc(x1, x2, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.power",
        "description": "First array elements raised to powers from second array, element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.power.html",
        "doc": "numpy.power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'power'>\n\nFirst array elements raised to powers from second array, element-wise.\n\nParameters:\n- x1 : array_like\n  The bases.\n- x2 : array_like\n  The exponents.\n\nReturns:\n- y : ndarray\n  The bases in x1 raised to the exponents in x2.\n\nNotes:\nEquivalent to x1 ** x2 in terms of array broadcasting.",
        "code": "def power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    First array elements raised to powers from second array, element-wise.\n    \n    This is a universal function (ufunc) that performs element-wise exponentiation\n    of two input arrays with broadcasting support.\n    \"\"\"\n    return _power_ufunc(x1, x2, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.sqrt",
        "description": "Return the non-negative square-root of an array, element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.sqrt.html",
        "doc": "numpy.sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'sqrt'>\n\nReturn the non-negative square-root of an array, element-wise.\n\nParameters:\n- x : array_like\n  The values whose square-roots are required.\n\nReturns:\n- y : ndarray\n  An array of the same shape as x, containing the positive square-root of each element in x.",
        "code": "def sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Return the non-negative square-root of an array, element-wise.\n    \n    This is a universal function (ufunc) that computes the square root\n    of each element in the input array.\n    \"\"\"\n    return _sqrt_ufunc(x, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.square",
        "description": "Return the element-wise square of the input.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.square.html",
        "doc": "numpy.square(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'square'>\n\nReturn the element-wise square of the input.\n\nParameters:\n- x : array_like\n  Input data.\n\nReturns:\n- out : ndarray or scalar\n  Element-wise x*x.",
        "code": "def square(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Return the element-wise square of the input.\n    \n    This is a universal function (ufunc) that computes the square\n    of each element in the input array.\n    \"\"\"\n    return _square_ufunc(x, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.absolute",
        "description": "Calculate the absolute value element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.absolute.html",
        "doc": "numpy.absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'absolute'>\n\nCalculate the absolute value element-wise.\n\nParameters:\n- x : array_like\n  Input array.\n\nReturns:\n- absolute : ndarray\n  An ndarray containing the absolute value of each element in x.",
        "code": "def absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Calculate the absolute value element-wise.\n    \n    This is a universal function (ufunc) that computes the absolute value\n    of each element in the input array.\n    \"\"\"\n    return _absolute_ufunc(x, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.sign",
        "description": "Returns an element-wise indication of the sign of a number.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.sign.html",
        "doc": "numpy.sign(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'sign'>\n\nReturns an element-wise indication of the sign of a number.\n\nParameters:\n- x : array_like\n  Input values.\n\nReturns:\n- y : ndarray\n  The sign of each element in x: -1 if x < 0, 0 if x==0, 1 if x > 0.",
        "code": "def sign(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Returns an element-wise indication of the sign of a number.\n    \n    This is a universal function (ufunc) that returns the sign\n    of each element in the input array.\n    \"\"\"\n    return _sign_ufunc(x, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      }
    ],
    "array_manipulation": [
      {
        "name": "numpy.transpose",
        "description": "Returns an array with axes transposed.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.transpose.html",
        "doc": "numpy.transpose(a, axes=None)\n\nReturns an array with axes transposed.\n\nParameters:\n- a : array_like\n  Input array.\n- axes : list of ints, optional\n  If specified, it must be a tuple or list which contains a permutation of [0,1,..,N-1] where N is the number of axes of a.\n\nReturns:\n- p : ndarray\n  a with its axes permuted.",
        "code": "def transpose(a, axes=None):\n    \"\"\"\n    Returns an array with axes transposed.\n    \n    This function permutes the dimensions of an array.\n    \"\"\"\n    return _wrapfunc(a, 'transpose', axes)"
      },
      {
        "name": "numpy.reshape",
        "description": "Gives a new shape to an array without changing its data.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.reshape.html",
        "doc": "numpy.reshape(a, newshape, order='C')\n\nGives a new shape to an array without changing its data.\n\nParameters:\n- a : array_like\n  Array to be reshaped.\n- newshape : int or tuple of ints\n  The new shape should be compatible with the original shape.\n- order : {'C', 'F', 'A'}, optional\n  Read the elements of a using this index order.\n\nReturns:\n- reshaped_array : ndarray\n  This will be a new view object if possible; otherwise, it will be a copy.",
        "code": "def reshape(a, newshape, order='C'):\n    \"\"\"\n    Gives a new shape to an array without changing its data.\n    \n    This function returns a new view of the array with a different shape.\n    \"\"\"\n    return _wrapfunc(a, 'reshape', newshape, order=order)"
      },
      {
        "name": "numpy.concatenate",
        "description": "Join a sequence of arrays along an existing axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.concatenate.html",
        "doc": "numpy.concatenate((a1, a2, ...), axis=0, out=None, dtype=None, casting=\"same_kind\")\n\nJoin a sequence of arrays along an existing axis.\n\nParameters:\n- a1, a2, ... : sequence of array_like\n  The arrays must have the same shape, except in the dimension corresponding to axis.\n- axis : int, optional\n  The axis along which the arrays will be joined.\n\nReturns:\n- res : ndarray\n  The concatenated array.",
        "code": "def concatenate(arrays, axis=0, out=None, dtype=None, casting=\"same_kind\"):\n    \"\"\"\n    Join a sequence of arrays along an existing axis.\n    \n    This function joins arrays along a specified axis.\n    \"\"\"\n    return _concatenate(arrays, axis, out, dtype, casting)"
      },
      {
        "name": "numpy.stack",
        "description": "Join a sequence of arrays along a new axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.stack.html",
        "doc": "numpy.stack(arrays, axis=0, out=None, dtype=None, casting=\"same_kind\")\n\nJoin a sequence of arrays along a new axis.\n\nParameters:\n- arrays : sequence of array_like\n  Each array must have the same shape.\n- axis : int, optional\n  The axis in the result array along which the input arrays are stacked.\n\nReturns:\n- stacked : ndarray\n  The stacked array has one more dimension than the input arrays.",
        "code": "def stack(arrays, axis=0, out=None, dtype=None, casting=\"same_kind\"):\n    \"\"\"\n    Join a sequence of arrays along a new axis.\n    \n    This function stacks arrays along a new axis.\n    \"\"\"\n    return _stack_dispatcher(arrays, axis, out, dtype, casting)"
      },
      {
        "name": "numpy.split",
        "description": "Split an array into multiple sub-arrays as views into ary.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.split.html",
        "doc": "numpy.split(ary, indices_or_sections, axis=0)\n\nSplit an array into multiple sub-arrays as views into ary.\n\nParameters:\n- ary : ndarray\n  Array to be divided into sub-arrays.\n- indices_or_sections : int or 1-D array\n  If an integer, N, the array will be divided into N equal arrays along axis.\n- axis : int, optional\n  The axis along which to split.\n\nReturns:\n- sub-arrays : list of ndarrays\n  A list of sub-arrays as views into ary.",
        "code": "def split(ary, indices_or_sections, axis=0):\n    \"\"\"\n    Split an array into multiple sub-arrays as views into ary.\n    \n    This function splits an array along a specified axis.\n    \"\"\"\n    return _split(ary, indices_or_sections, axis)"
      }
    ],
    "mathematical_functions": [
      {
        "name": "numpy.exp",
        "description": "Calculate the exponential of all elements in the input array.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.exp.html",
        "doc": "numpy.exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'exp'>\n\nCalculate the exponential of all elements in the input array.\n\nParameters:\n- x : array_like\n  Input values.\n\nReturns:\n- out : ndarray or scalar\n  Output array, element-wise exponential of x.",
        "code": "def exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Calculate the exponential of all elements in the input array.\n    \n    This is a universal function (ufunc) that computes e^x for each element x.\n    \"\"\"\n    return _exp_ufunc(x, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.log",
        "description": "Natural logarithm, element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.log.html",
        "doc": "numpy.log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'log'>\n\nNatural logarithm, element-wise.\n\nParameters:\n- x : array_like\n  Input values.\n\nReturns:\n- y : ndarray\n  The natural logarithm of x, element-wise.",
        "code": "def log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Natural logarithm, element-wise.\n    \n    This is a universal function (ufunc) that computes the natural logarithm\n    of each element in the input array.\n    \"\"\"\n    return _log_ufunc(x, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.sin",
        "description": "Trigonometric sine, element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.sin.html",
        "doc": "numpy.sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'sin'>\n\nTrigonometric sine, element-wise.\n\nParameters:\n- x : array_like\n  Angle, in radians.\n\nReturns:\n- y : ndarray\n  The sine of each element of x.",
        "code": "def sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Trigonometric sine, element-wise.\n    \n    This is a universal function (ufunc) that computes the sine\n    of each element in the input array.\n    \"\"\"\n    return _sin_ufunc(x, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.cos",
        "description": "Cosine element-wise.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.cos.html",
        "doc": "numpy.cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'cos'>\n\nCosine element-wise.\n\nParameters:\n- x : array_like\n  Input array in radians.\n\nReturns:\n- y : ndarray\n  The corresponding cosine values.",
        "code": "def cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Cosine element-wise.\n    \n    This is a universal function (ufunc) that computes the cosine\n    of each element in the input array.\n    \"\"\"\n    return _cos_ufunc(x, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      }
    ],
    "reduction_operations": [
      {
        "name": "numpy.sum",
        "description": "Sum of array elements over a given axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.sum.html",
        "doc": "numpy.sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)\n\nSum of array elements over a given axis.\n\nParameters:\n- a : array_like\n  Elements to sum.\n- axis : None or int or tuple of ints, optional\n  Axis or axes along which a sum is performed.\n- dtype : dtype, optional\n  The type of the returned array and of the accumulator.\n- out : ndarray, optional\n  Alternative output array.\n- keepdims : bool, optional\n  If this is set to True, the axes which are reduced are left in the result as dimensions with size one.\n\nReturns:\n- sum_along_axis : ndarray\n  An array with the same shape as a, with the specified axis removed.",
        "code": "def sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue, initial=np._NoValue, where=np._NoValue):\n    \"\"\"\n    Sum of array elements over a given axis.\n    \n    This function sums the elements of an array along specified axes.\n    \"\"\"\n    return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims, initial=initial, where=where)"
      },
      {
        "name": "numpy.prod",
        "description": "Return the product of array elements over a given axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.prod.html",
        "doc": "numpy.prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)\n\nReturn the product of array elements over a given axis.\n\nParameters:\n- a : array_like\n  Input data.\n- axis : None or int or tuple of ints, optional\n  Axis or axes along which a product is performed.\n- dtype : dtype, optional\n  The type of the returned array and of the accumulator.\n\nReturns:\n- product_along_axis : ndarray\n  An array shaped like a with the specified axis removed.",
        "code": "def prod(a, axis=None, dtype=None, out=None, keepdims=np._NoValue, initial=np._NoValue, where=np._NoValue):\n    \"\"\"\n    Return the product of array elements over a given axis.\n    \n    This function computes the product of the elements of an array along specified axes.\n    \"\"\"\n    return _wrapreduction(a, np.multiply, 'prod', axis, dtype, out, keepdims=keepdims, initial=initial, where=where)"
      },
      {
        "name": "numpy.mean",
        "description": "Compute the arithmetic mean along the specified axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.mean.html",
        "doc": "numpy.mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>)\n\nCompute the arithmetic mean along the specified axis.\n\nParameters:\n- a : array_like\n  Array containing numbers whose mean is desired.\n- axis : None or int or tuple of ints, optional\n  Axis or axes along which the means are computed.\n- dtype : data-type, optional\n  Type to use in computing the mean.\n\nReturns:\n- m : ndarray\n  A new array containing the mean values.",
        "code": "def mean(a, axis=None, dtype=None, out=None, keepdims=np._NoValue, *, where=np._NoValue):\n    \"\"\"\n    Compute the arithmetic mean along the specified axis.\n    \n    This function computes the arithmetic mean of the elements of an array along specified axes.\n    \"\"\"\n    kwargs = {}\n    if keepdims is not np._NoValue:\n        kwargs['keepdims'] = keepdims\n    if where is not np._NoValue:\n        kwargs['where'] = where\n    return _mean(a, axis=axis, dtype=dtype, out=out, **kwargs)"
      },
      {
        "name": "numpy.std",
        "description": "Compute the standard deviation along the specified axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.std.html",
        "doc": "numpy.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)\n\nCompute the standard deviation along the specified axis.\n\nParameters:\n- a : array_like\n  Calculate the standard deviation of these values.\n- axis : None or int or tuple of ints, optional\n  Axis or axes along which the standard deviation is computed.\n- ddof : int, optional\n  Means Delta Degrees of Freedom.\n\nReturns:\n- standard_deviation : ndarray\n  A new array containing the standard deviation values.",
        "code": "def std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue, *, where=np._NoValue):\n    \"\"\"\n    Compute the standard deviation along the specified axis.\n    \n    This function computes the standard deviation of the elements of an array along specified axes.\n    \"\"\"\n    kwargs = {}\n    if keepdims is not np._NoValue:\n        kwargs['keepdims'] = keepdims\n    if where is not np._NoValue:\n        kwargs['where'] = where\n    return _std(a, axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)"
      },
      {
        "name": "numpy.var",
        "description": "Compute the variance along the specified axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.var.html",
        "doc": "numpy.var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)\n\nCompute the variance along the specified axis.\n\nParameters:\n- a : array_like\n  Array containing numbers whose variance is desired.\n- axis : None or int or tuple of ints, optional\n  Axis or axes along which the variance is computed.\n- ddof : int, optional\n  Means Delta Degrees of Freedom.\n\nReturns:\n- variance : ndarray\n  A new array containing the variance values.",
        "code": "def var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue, *, where=np._NoValue):\n    \"\"\"\n    Compute the variance along the specified axis.\n    \n    This function computes the variance of the elements of an array along specified axes.\n    \"\"\"\n    kwargs = {}\n    if keepdims is not np._NoValue:\n        kwargs['keepdims'] = keepdims\n    if where is not np._NoValue:\n        kwargs['where'] = where\n    return _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs)"
      },
      {
        "name": "numpy.max",
        "description": "Return the maximum of an array or maximum along an axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.max.html",
        "doc": "numpy.max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)\n\nReturn the maximum of an array or maximum along an axis.\n\nParameters:\n- a : array_like\n  Input data.\n- axis : None or int or tuple of ints, optional\n  Axis or axes along which to operate.\n\nReturns:\n- max : ndarray or scalar\n  Maximum of a.",
        "code": "def max(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue, where=np._NoValue):\n    \"\"\"\n    Return the maximum of an array or maximum along an axis.\n    \n    This function finds the maximum value along the specified axis.\n    \"\"\"\n    return _wrapreduction(a, np.maximum, 'max', axis, None, out, keepdims=keepdims, initial=initial, where=where)"
      },
      {
        "name": "numpy.min",
        "description": "Return the minimum of an array or minimum along an axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.min.html",
        "doc": "numpy.min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)\n\nReturn the minimum of an array or minimum along an axis.\n\nParameters:\n- a : array_like\n  Input data.\n- axis : None or int or tuple of ints, optional\n  Axis or axes along which to operate.\n\nReturns:\n- min : ndarray or scalar\n  Minimum of a.",
        "code": "def min(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue, where=np._NoValue):\n    \"\"\"\n    Return the minimum of an array or minimum along an axis.\n    \n    This function finds the minimum value along the specified axis.\n    \"\"\"\n    return _wrapreduction(a, np.minimum, 'min', axis, None, out, keepdims=keepdims, initial=initial, where=where)"
      },
      {
        "name": "numpy.maximum",
        "description": "Element-wise maximum of array elements.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.maximum.html",
        "doc": "numpy.maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'maximum'>\n\nElement-wise maximum of array elements.\n\nParameters:\n- x1, x2 : array_like\n  The arrays holding the elements to be compared.\n\nReturns:\n- y : ndarray or scalar\n  The element-wise maximum of the input arrays.",
        "code": "def maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Element-wise maximum of array elements.\n    \n    This is a universal function (ufunc) that computes the element-wise maximum\n    of two input arrays with broadcasting support.\n    \"\"\"\n    return _maximum_ufunc(x1, x2, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      },
      {
        "name": "numpy.minimum",
        "description": "Element-wise minimum of array elements.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.minimum.html",
        "doc": "numpy.minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'minimum'>\n\nElement-wise minimum of array elements.\n\nParameters:\n- x1, x2 : array_like\n  The arrays holding the elements to be compared.\n\nReturns:\n- y : ndarray or scalar\n  The element-wise minimum of the input arrays.",
        "code": "def minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Element-wise minimum of array elements.\n    \n    This is a universal function (ufunc) that computes the element-wise minimum\n    of two input arrays with broadcasting support.\n    \"\"\"\n    return _minimum_ufunc(x1, x2, out=out, where=where, casting=casting, order=order, dtype=dtype, subok=subok)"
      }
    ],
    "indexing_searching": [
      {
        "name": "numpy.argmax",
        "description": "Returns the indices of the maximum values along an axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.argmax.html",
        "doc": "numpy.argmax(a, axis=None, out=None, *, keepdims=<no value>)\n\nReturns the indices of the maximum values along an axis.\n\nParameters:\n- a : array_like\n  Input array.\n- axis : int, optional\n  By default, the index is into the flattened array.\n\nReturns:\n- index_array : ndarray of ints\n  Array of indices into the array.",
        "code": "def argmax(a, axis=None, out=None, *, keepdims=np._NoValue):\n    \"\"\"\n    Returns the indices of the maximum values along an axis.\n    \n    This function finds the indices of the maximum values along the specified axis.\n    \"\"\"\n    return _wrapfunc(a, 'argmax', axis=axis, out=out, keepdims=keepdims)"
      },
      {
        "name": "numpy.argmin",
        "description": "Returns the indices of the minimum values along an axis.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.argmin.html",
        "doc": "numpy.argmin(a, axis=None, out=None, *, keepdims=<no value>)\n\nReturns the indices of the minimum values along an axis.\n\nParameters:\n- a : array_like\n  Input array.\n- axis : int, optional\n  By default, the index is into the flattened array.\n\nReturns:\n- index_array : ndarray of ints\n  Array of indices into the array.",
        "code": "def argmin(a, axis=None, out=None, *, keepdims=np._NoValue):\n    \"\"\"\n    Returns the indices of the minimum values along an axis.\n    \n    This function finds the indices of the minimum values along the specified axis.\n    \"\"\"\n    return _wrapfunc(a, 'argmin', axis=axis, out=out, keepdims=keepdims)"
      },
      {
        "name": "numpy.sort",
        "description": "Return a sorted copy of an array.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.sort.html",
        "doc": "numpy.sort(a, axis=-1, kind=None, order=None)\n\nReturn a sorted copy of an array.\n\nParameters:\n- a : array_like\n  Array to be sorted.\n- axis : int or None, optional\n  Axis along which to sort.\n- kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, optional\n  Sorting algorithm.\n\nReturns:\n- sorted_array : ndarray\n  Array of the same type and shape as a.",
        "code": "def sort(a, axis=-1, kind=None, order=None):\n    \"\"\"\n    Return a sorted copy of an array.\n    \n    This function sorts the elements of an array along the specified axis.\n    \"\"\"\n    return _sort(a, axis, kind, order)"
      },
      {
        "name": "numpy.argsort",
        "description": "Returns the indices that would sort an array.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.argsort.html",
        "doc": "numpy.argsort(a, axis=-1, kind=None, order=None)\n\nReturns the indices that would sort an array.\n\nParameters:\n- a : array_like\n  Array to sort.\n- axis : int or None, optional\n  Axis along which to sort.\n- kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, optional\n  Sorting algorithm.\n\nReturns:\n- index_array : ndarray, int\n  Array of indices that sort a along the specified axis.",
        "code": "def argsort(a, axis=-1, kind=None, order=None):\n    \"\"\"\n    Returns the indices that would sort an array.\n    \n    This function returns the indices that would sort an array along the specified axis.\n    \"\"\"\n    return _wrapfunc(a, 'argsort', axis=axis, kind=kind, order=order)"
      },
      {
        "name": "numpy.where",
        "description": "Return elements chosen from x or y depending on condition.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.where.html",
        "doc": "numpy.where(condition, [x, y, ]/, [out, dtype, casting, order, subok, signature, extobj])\n\nReturn elements chosen from x or y depending on condition.\n\nParameters:\n- condition : array_like, bool\n  Where True, yield x, otherwise yield y.\n- x, y : array_like\n  Values from which to choose.\n\nReturns:\n- out : ndarray\n  An array with elements from x where condition is True, and elements from y elsewhere.",
        "code": "def where(condition, x=None, y=None):\n    \"\"\"\n    Return elements chosen from x or y depending on condition.\n    \n    This function selects elements from x or y based on a condition.\n    \"\"\"\n    if x is None and y is None:\n        return _nonzero(condition)\n    else:\n        return _where(condition, x, y)"
      }
    ],
    "logical_operations": [
      {
        "name": "numpy.all",
        "description": "Test whether all array elements along a given axis evaluate to True.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.all.html",
        "doc": "numpy.all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>)\n\nTest whether all array elements along a given axis evaluate to True.\n\nParameters:\n- a : array_like\n  Input array or object that can be converted to an array.\n- axis : None or int or tuple of ints, optional\n  Axis or axes along which a logical AND reduction is performed.\n\nReturns:\n- all : ndarray, bool\n  A new boolean or array is returned unless out is specified.",
        "code": "def all(a, axis=None, out=None, keepdims=np._NoValue, *, where=np._NoValue):\n    \"\"\"\n    Test whether all array elements along a given axis evaluate to True.\n    \n    This function performs a logical AND reduction along the specified axis.\n    \"\"\"\n    return _wrapreduction(a, np.logical_and, 'all', axis, None, out, keepdims=keepdims, where=where)"
      },
      {
        "name": "numpy.any",
        "description": "Test whether any array element along a given axis evaluates to True.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.any.html",
        "doc": "numpy.any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>)\n\nTest whether any array element along a given axis evaluates to True.\n\nParameters:\n- a : array_like\n  Input array or object that can be converted to an array.\n- axis : None or int or tuple of ints, optional\n  Axis or axes along which a logical OR reduction is performed.\n\nReturns:\n- any : ndarray, bool\n  A new boolean or array is returned unless out is specified.",
        "code": "def any(a, axis=None, out=None, keepdims=np._NoValue, *, where=np._NoValue):\n    \"\"\"\n    Test whether any array element along a given axis evaluates to True.\n    \n    This function performs a logical OR reduction along the specified axis.\n    \"\"\"\n    return _wrapreduction(a, np.logical_or, 'any', axis, None, out, keepdims=keepdims, where=where)"
      },
      {
        "name": "numpy.clip",
        "description": "Clip (limit) the values in an array.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.clip.html",
        "doc": "numpy.clip(a, a_min, a_max, out=None, **kwargs)\n\nClip (limit) the values in an array.\n\nParameters:\n- a : array_like\n  Array containing elements to clip.\n- a_min, a_max : array_like or None\n  Minimum and maximum value.\n\nReturns:\n- clipped_array : ndarray\n  An array with the elements of a, but where values < a_min are replaced with a_min, and those > a_max with a_max.",
        "code": "def clip(a, a_min, a_max, out=None, **kwargs):\n    \"\"\"\n    Clip (limit) the values in an array.\n    \n    This function clips the values in an array to lie within specified bounds.\n    \"\"\"\n    return _clip(a, a_min, a_max, out, **kwargs)"
      }
    ],
    "linear_algebra": [
      {
        "name": "numpy.dot",
        "description": "Dot product of two arrays.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.dot.html",
        "doc": "numpy.dot(a, b, out=None)\n\nDot product of two arrays.\n\nParameters:\n- a : array_like\n  First argument.\n- b : array_like\n  Second argument.\n- out : ndarray, optional\n  Output argument.\n\nReturns:\n- output : ndarray\n  Returns the dot product of a and b.",
        "code": "def dot(a, b, out=None):\n    \"\"\"\n    Dot product of two arrays.\n    \n    This function computes the dot product of two arrays.\n    \"\"\"\n    return _dot(a, b, out)"
      },
      {
        "name": "numpy.matmul",
        "description": "Matrix product of two arrays.",
        "url": "https://numpy.org/doc/stable/reference/generated/numpy.matmul.html",
        "doc": "numpy.matmul(x1, x2, /, out=None, *, casting='same_kind', order='K', dtype=None, subok=True[, signature]) = <ufunc 'matmul'>\n\nMatrix product of two arrays.\n\nParameters:\n- x1, x2 : array_like\n  Input arrays, scalars not allowed.\n- out : ndarray, optional\n  A location into which the result is stored.\n\nReturns:\n- y : ndarray\n  The matrix product of the inputs.",
        "code": "def matmul(x1, x2, /, out=None, *, casting='same_kind', order='K', dtype=None, subok=True, signature=None):\n    \"\"\"\n    Matrix product of two arrays.\n    \n    This function computes the matrix product of two arrays.\n    \"\"\"\n    return _matmul_ufunc(x1, x2, out=out, casting=casting, order=order, dtype=dtype, subok=subok)"
      }
    ]
  },
  "metadata": {
    "total_functions": 37,
    "categories": 7,
    "generated_date": "2025-06-30",
    "source": "NumPy documentation"
  }
}
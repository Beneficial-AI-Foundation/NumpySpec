{
  "metadata": {
    "module": "numpy.polynomial",
    "source": "https://github.com/numpy/numpy/tree/main/numpy/polynomial",
    "description": "NumPy polynomial module - provides efficient polynomial operations and classes for various polynomial bases",
    "polynomial_types": [
      "polynomial.py",
      "chebyshev.py",
      "legendre.py",
      "hermite.py",
      "hermite_e.py",
      "laguerre.py",
      "polyutils.py",
      "_polybase.py"
    ]
  },
  "functions": [
    {
      "name": "numpy.polynomial.polynomial.polyline",
      "category": "Standard polynomials",
      "description": "Returns an array representing a linear polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyline.html",
      "doc": "Returns an array representing a linear polynomial.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The \"y-intercept\" and \"slope\" of the line, respectively.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the linear polynomial ``off +\n        scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> P.polyline(1, -1)\n    array([ 1, -1])\n    >>> P.polyval(1, P.polyline(1, -1))  # should be 0\n    0.0",
      "code": "def polyline(off, scl):\n    \"\"\"\n    Returns an array representing a linear polynomial.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The \"y-intercept\" and \"slope\" of the line, respectively.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the linear polynomial ``off +\n        scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> P.polyline(1, -1)\n    array([ 1, -1])\n    >>> P.polyval(1, P.polyline(1, -1))  # should be 0\n    0.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl])\n    else:\n        return np.array([off])"
    },
    {
      "name": "numpy.polynomial.polynomial.polyfromroots",
      "category": "Standard polynomials",
      "description": "Generate a monic polynomial with given roots.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyfromroots.html",
      "doc": "Generate a monic polynomial with given roots.\n\n    Return the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    where the :math:`r_n` are the roots specified in `roots`.  If a zero has\n    multiplicity n, then it must appear in `roots` n times. For instance,\n    if 2 is a root of multiplicity three and 3 is a root of multiplicity 2,\n    then `roots` looks something like [2, 2, 2, 3, 3]. The roots can appear\n    in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * x + ... +  x^n\n\n    The coefficient of the last term is 1 for monic polynomials in this\n    form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of the polynomial's coefficients If all the roots are\n        real, then `out` is also real, otherwise it is complex.  (see\n        Examples below).\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Notes\n    -----\n    The coefficients are determined by multiplying together linear factors\n    of the form ``(x - r_i)``, i.e.\n\n    .. math:: p(x) = (x - r_0) (x - r_1) ... (x - r_n)\n\n    where ``n == len(roots) - 1``; note that this implies that ``1`` is always\n    returned for :math:`a_n`.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> P.polyfromroots((-1,0,1))  # x(x - 1)(x + 1) = x^3 - x\n    array([ 0., -1.,  0.,  1.])\n    >>> j = complex(0,1)\n    >>> P.polyfromroots((-j,j))  # complex returned, though values are real\n    array([1.+0.j,  0.+0.j,  1.+0.j])",
      "code": "def polyfromroots(roots):\n    \"\"\"\n    Generate a monic polynomial with given roots.\n\n    Return the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    where the :math:`r_n` are the roots specified in `roots`.  If a zero has\n    multiplicity n, then it must appear in `roots` n times. For instance,\n    if 2 is a root of multiplicity three and 3 is a root of multiplicity 2,\n    then `roots` looks something like [2, 2, 2, 3, 3]. The roots can appear\n    in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * x + ... +  x^n\n\n    The coefficient of the last term is 1 for monic polynomials in this\n    form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of the polynomial's coefficients If all the roots are\n        real, then `out` is also real, otherwise it is complex.  (see\n        Examples below).\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Notes\n    -----\n    The coefficients are determined by multiplying together linear factors\n    of the form ``(x - r_i)``, i.e.\n\n    .. math:: p(x) = (x - r_0) (x - r_1) ... (x - r_n)\n\n    where ``n == len(roots) - 1``; note that this implies that ``1`` is always\n    returned for :math:`a_n`.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> P.polyfromroots((-1,0,1))  # x(x - 1)(x + 1) = x^3 - x\n    array([ 0., -1.,  0.,  1.])\n    >>> j = complex(0,1)\n    >>> P.polyfromroots((-j,j))  # complex returned, though values are real\n    array([1.+0.j,  0.+0.j,  1.+0.j])\n\n    \"\"\"\n    return pu._fromroots(polyline, polymul, roots)"
    },
    {
      "name": "numpy.polynomial.polynomial.polyadd",
      "category": "Standard polynomials",
      "description": "Add one polynomial to another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyadd.html",
      "doc": "Add one polynomial to another.\n\n    Returns the sum of two polynomials `c1` + `c2`.  The arguments are\n    sequences of coefficients from lowest order term to highest, i.e.,\n    [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of polynomial coefficients ordered from low to high.\n\n    Returns\n    -------\n    out : ndarray\n        The coefficient array representing their sum.\n\n    See Also\n    --------\n    polysub, polymulx, polymul, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c1 = (1, 2, 3)\n    >>> c2 = (3, 2, 1)\n    >>> sum = P.polyadd(c1,c2); sum\n    array([4.,  4.,  4.])\n    >>> P.polyval(2, sum)  # 4 + 4(2) + 4(2**2)\n    28.0",
      "code": "def polyadd(c1, c2):\n    \"\"\"\n    Add one polynomial to another.\n\n    Returns the sum of two polynomials `c1` + `c2`.  The arguments are\n    sequences of coefficients from lowest order term to highest, i.e.,\n    [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of polynomial coefficients ordered from low to high.\n\n    Returns\n    -------\n    out : ndarray\n        The coefficient array representing their sum.\n\n    See Also\n    --------\n    polysub, polymulx, polymul, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c1 = (1, 2, 3)\n    >>> c2 = (3, 2, 1)\n    >>> sum = P.polyadd(c1,c2); sum\n    array([4.,  4.,  4.])\n    >>> P.polyval(2, sum)  # 4 + 4(2) + 4(2**2)\n    28.0\n\n    \"\"\"\n    return pu._add(c1, c2)"
    },
    {
      "name": "numpy.polynomial.polynomial.polysub",
      "category": "Standard polynomials",
      "description": "Subtract one polynomial from another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polysub.html",
      "doc": "Subtract one polynomial from another.\n\n    Returns the difference of two polynomials `c1` - `c2`.  The arguments\n    are sequences of coefficients from lowest order term to highest, i.e.,\n    [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of polynomial coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of coefficients representing their difference.\n\n    See Also\n    --------\n    polyadd, polymulx, polymul, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c1 = (1, 2, 3)\n    >>> c2 = (3, 2, 1)\n    >>> P.polysub(c1,c2)\n    array([-2.,  0.,  2.])\n    >>> P.polysub(c2, c1)  # -P.polysub(c1,c2)\n    array([ 2.,  0., -2.])",
      "code": "def polysub(c1, c2):\n    \"\"\"\n    Subtract one polynomial from another.\n\n    Returns the difference of two polynomials `c1` - `c2`.  The arguments\n    are sequences of coefficients from lowest order term to highest, i.e.,\n    [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of polynomial coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of coefficients representing their difference.\n\n    See Also\n    --------\n    polyadd, polymulx, polymul, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c1 = (1, 2, 3)\n    >>> c2 = (3, 2, 1)\n    >>> P.polysub(c1,c2)\n    array([-2.,  0.,  2.])\n    >>> P.polysub(c2, c1)  # -P.polysub(c1,c2)\n    array([ 2.,  0., -2.])\n\n    \"\"\"\n    return pu._sub(c1, c2)"
    },
    {
      "name": "numpy.polynomial.polynomial.polymulx",
      "category": "Standard polynomials",
      "description": "Multiply a polynomial by x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polymulx.html",
      "doc": "Multiply a polynomial by x.\n\n    Multiply the polynomial `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of polynomial coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    polyadd, polysub, polymul, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = (1, 2, 3)\n    >>> P.polymulx(c)\n    array([0., 1., 2., 3.])",
      "code": "def polymulx(c):\n    \"\"\"Multiply a polynomial by x.\n\n    Multiply the polynomial `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of polynomial coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    polyadd, polysub, polymul, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = (1, 2, 3)\n    >>> P.polymulx(c)\n    array([0., 1., 2., 3.])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    # The zero series needs special treatment\n    if len(c) == 1 and c[0] == 0:\n        return c\n\n    prd = np.empty(len(c) + 1, dtype=c.dtype)\n    prd[0] = c[0] * 0\n    prd[1:] = c\n    return prd"
    },
    {
      "name": "numpy.polynomial.polynomial.polymul",
      "category": "Standard polynomials",
      "description": "Multiply one polynomial by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polymul.html",
      "doc": "Multiply one polynomial by another.\n\n    Returns the product of two polynomials `c1` * `c2`.  The arguments are\n    sequences of coefficients, from lowest order term to highest, e.g.,\n    [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2.``\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of coefficients representing a polynomial, relative to the\n        \"standard\" basis, and ordered from lowest order term to highest.\n\n    Returns\n    -------\n    out : ndarray\n        Of the coefficients of their product.\n\n    See Also\n    --------\n    polyadd, polysub, polymulx, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c1 = (1, 2, 3)\n    >>> c2 = (3, 2, 1)\n    >>> P.polymul(c1, c2)\n    array([  3.,   8.,  14.,   8.,   3.])",
      "code": "def polymul(c1, c2):\n    \"\"\"\n    Multiply one polynomial by another.\n\n    Returns the product of two polynomials `c1` * `c2`.  The arguments are\n    sequences of coefficients, from lowest order term to highest, e.g.,\n    [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2.``\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of coefficients representing a polynomial, relative to the\n        \"standard\" basis, and ordered from lowest order term to highest.\n\n    Returns\n    -------\n    out : ndarray\n        Of the coefficients of their product.\n\n    See Also\n    --------\n    polyadd, polysub, polymulx, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c1 = (1, 2, 3)\n    >>> c2 = (3, 2, 1)\n    >>> P.polymul(c1, c2)\n    array([  3.,   8.,  14.,   8.,   3.])\n\n    \"\"\"\n    # c1, c2 are trimmed copies\n    [c1, c2] = pu.as_series([c1, c2])\n    ret = np.convolve(c1, c2)\n    return pu.trimseq(ret)"
    },
    {
      "name": "numpy.polynomial.polynomial.polydiv",
      "category": "Standard polynomials",
      "description": "Divide one polynomial by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polydiv.html",
      "doc": "Divide one polynomial by another.\n\n    Returns the quotient-with-remainder of two polynomials `c1` / `c2`.\n    The arguments are sequences of coefficients, from lowest order term\n    to highest, e.g., [1,2,3] represents ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of polynomial coefficients ordered from low to high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of coefficient series representing the quotient and remainder.\n\n    See Also\n    --------\n    polyadd, polysub, polymulx, polymul, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c1 = (1, 2, 3)\n    >>> c2 = (3, 2, 1)\n    >>> P.polydiv(c1, c2)\n    (array([3.]), array([-8., -4.]))\n    >>> P.polydiv(c2, c1)\n    (array([ 0.33333333]), array([ 2.66666667,  1.33333333]))  # may vary",
      "code": "def polydiv(c1, c2):\n    \"\"\"\n    Divide one polynomial by another.\n\n    Returns the quotient-with-remainder of two polynomials `c1` / `c2`.\n    The arguments are sequences of coefficients, from lowest order term\n    to highest, e.g., [1,2,3] represents ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of polynomial coefficients ordered from low to high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of coefficient series representing the quotient and remainder.\n\n    See Also\n    --------\n    polyadd, polysub, polymulx, polymul, polypow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c1 = (1, 2, 3)\n    >>> c2 = (3, 2, 1)\n    >>> P.polydiv(c1, c2)\n    (array([3.]), array([-8., -4.]))\n    >>> P.polydiv(c2, c1)\n    (array([ 0.33333333]), array([ 2.66666667,  1.33333333]))  # may vary\n\n    \"\"\"\n    # c1, c2 are trimmed copies\n    [c1, c2] = pu.as_series([c1, c2])\n    if c2[-1] == 0:\n        raise ZeroDivisionError  # FIXME: add message with details to exception\n\n    # note: this is more efficient than `pu._div(polymul, c1, c2)`\n    lc1 = len(c1)\n    lc2 = len(c2)\n    if lc1 < lc2:\n        return c1[:1] * 0, c1\n    elif lc2 == 1:\n        return c1 / c2[-1], c1[:1] * 0\n    else:\n        dlen = lc1 - lc2\n        scl = c2[-1]\n        c2 = c2[:-1] / scl\n        i = dlen\n        j = lc1 - 1\n        while i >= 0:\n            c1[i:j] -= c2 * c1[j]\n            i -= 1\n            j -= 1\n        return c1[j + 1:] / scl, pu.trimseq(c1[:j + 1])"
    },
    {
      "name": "numpy.polynomial.polynomial.polypow",
      "category": "Standard polynomials",
      "description": "Raise a polynomial to a power.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polypow.html",
      "doc": "Raise a polynomial to a power.\n\n    Returns the polynomial `c` raised to the power `pow`. The argument\n    `c` is a sequence of coefficients ordered from low to high. i.e.,\n    [1,2,3] is the series  ``1 + 2*x + 3*x**2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of array of series coefficients ordered from low to\n        high degree.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Power series of power.\n\n    See Also\n    --------\n    polyadd, polysub, polymulx, polymul, polydiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> P.polypow([1, 2, 3], 2)\n    array([ 1., 4., 10., 12., 9.])",
      "code": "def polypow(c, pow, maxpower=None):\n    \"\"\"Raise a polynomial to a power.\n\n    Returns the polynomial `c` raised to the power `pow`. The argument\n    `c` is a sequence of coefficients ordered from low to high. i.e.,\n    [1,2,3] is the series  ``1 + 2*x + 3*x**2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of array of series coefficients ordered from low to\n        high degree.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Power series of power.\n\n    See Also\n    --------\n    polyadd, polysub, polymulx, polymul, polydiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> P.polypow([1, 2, 3], 2)\n    array([ 1., 4., 10., 12., 9.])\n\n    \"\"\"\n    # note: this is more efficient than `pu._pow(polymul, c1, c2)`, as it\n    # avoids calling `as_series` repeatedly\n    return pu._pow(np.convolve, c, pow, maxpower)"
    },
    {
      "name": "numpy.polynomial.polynomial.polyder",
      "category": "Standard polynomials",
      "description": "Differentiate a polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyder.html",
      "doc": "Differentiate a polynomial.\n\n    Returns the polynomial coefficients `c` differentiated `m` times along\n    `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable).  The\n    argument `c` is an array of coefficients from low to high degree along\n    each axis, e.g., [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2``\n    while [[1,2],[1,2]] represents ``1 + 1*x + 2*y + 2*x*y`` if axis=0 is\n    ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of polynomial coefficients. If c is multidimensional the\n        different axis correspond to different variables with the degree\n        in each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change\n        of variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Polynomial coefficients of the derivative.\n\n    See Also\n    --------\n    polyint\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = (1, 2, 3, 4)\n    >>> P.polyder(c)  # (d/dx)(c)\n    array([  2.,   6.,  12.])\n    >>> P.polyder(c, 3)  # (d**3/dx**3)(c)\n    array([24.])\n    >>> P.polyder(c, scl=-1)  # (d/d(-x))(c)\n    array([ -2.,  -6., -12.])\n    >>> P.polyder(c, 2, -1)  # (d**2/d(-x)**2)(c)\n    array([  6.,  24.])",
      "code": "def polyder(c, m=1, scl=1, axis=0):\n    \"\"\"\n    Differentiate a polynomial.\n\n    Returns the polynomial coefficients `c` differentiated `m` times along\n    `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable).  The\n    argument `c` is an array of coefficients from low to high degree along\n    each axis, e.g., [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2``\n    while [[1,2],[1,2]] represents ``1 + 1*x + 2*y + 2*x*y`` if axis=0 is\n    ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of polynomial coefficients. If c is multidimensional the\n        different axis correspond to different variables with the degree\n        in each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change\n        of variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Polynomial coefficients of the derivative.\n\n    See Also\n    --------\n    polyint\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = (1, 2, 3, 4)\n    >>> P.polyder(c)  # (d/dx)(c)\n    array([  2.,   6.,  12.])\n    >>> P.polyder(c, 3)  # (d**3/dx**3)(c)\n    array([24.])\n    >>> P.polyder(c, scl=-1)  # (d/d(-x))(c)\n    array([ -2.,  -6., -12.])\n    >>> P.polyder(c, 2, -1)  # (d**2/d(-x)**2)(c)\n    array([  6.,  24.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        # astype fails with NA\n        c = c + 0.0\n    cdt = c.dtype\n    cnt = pu._as_int(m, \"the order of derivation\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of derivation must be non-negative\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    n = len(c)\n    if cnt >= n:\n        c = c[:1] * 0\n    else:\n        for i in range(cnt):\n            n = n - 1\n            c *= scl\n            der = np.empty((n,) + c.shape[1:], dtype=cdt)\n            for j in range(n, 0, -1):\n                der[j - 1] = j * c[j]\n            c = der\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.polynomial.polyint",
      "category": "Standard polynomials",
      "description": "Integrate a polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyint.html",
      "doc": "Integrate a polynomial.\n\n    Returns the polynomial coefficients `c` integrated `m` times from\n    `lbnd` along `axis`.  At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.) The argument `c` is an array of\n    coefficients, from low to high degree along each axis, e.g., [1,2,3]\n    represents the polynomial ``1 + 2*x + 3*x**2`` while [[1,2],[1,2]]\n    represents ``1 + 1*x + 2*y + 2*x*y`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of polynomial coefficients, ordered from low to high.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at zero\n        is the first value in the list, the value of the second integral\n        at zero is the second value, etc.  If ``k == []`` (the default),\n        all constants are set to zero.  If ``m == 1``, a single scalar can\n        be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Coefficient array of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 1``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    polyder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.  Why\n    is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`. Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = (1, 2, 3)\n    >>> P.polyint(c)  # should return array([0, 1, 1, 1])\n    array([0.,  1.,  1.,  1.])\n    >>> P.polyint(c, 3)  # should return array([0, 0, 0, 1/6, 1/12, 1/20])\n     array([ 0.        ,  0.        ,  0.        ,  0.16666667,  0.08333333, # may vary\n             0.05      ])\n    >>> P.polyint(c, k=3)  # should return array([3, 1, 1, 1])\n    array([3.,  1.,  1.,  1.])\n    >>> P.polyint(c,lbnd=-2)  # should return array([6, 1, 1, 1])\n    array([6.,  1.,  1.,  1.])\n    >>> P.polyint(c,scl=-2)  # should return array([0, -2, -2, -2])\n    array([ 0., -2., -2., -2.])",
      "code": "def polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n    \"\"\"\n    Integrate a polynomial.\n\n    Returns the polynomial coefficients `c` integrated `m` times from\n    `lbnd` along `axis`.  At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.) The argument `c` is an array of\n    coefficients, from low to high degree along each axis, e.g., [1,2,3]\n    represents the polynomial ``1 + 2*x + 3*x**2`` while [[1,2],[1,2]]\n    represents ``1 + 1*x + 2*y + 2*x*y`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of polynomial coefficients, ordered from low to high.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at zero\n        is the first value in the list, the value of the second integral\n        at zero is the second value, etc.  If ``k == []`` (the default),\n        all constants are set to zero.  If ``m == 1``, a single scalar can\n        be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Coefficient array of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 1``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    polyder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.  Why\n    is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`. Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = (1, 2, 3)\n    >>> P.polyint(c)  # should return array([0, 1, 1, 1])\n    array([0.,  1.,  1.,  1.])\n    >>> P.polyint(c, 3)  # should return array([0, 0, 0, 1/6, 1/12, 1/20])\n     array([ 0.        ,  0.        ,  0.        ,  0.16666667,  0.08333333, # may vary\n             0.05      ])\n    >>> P.polyint(c, k=3)  # should return array([3, 1, 1, 1])\n    array([3.,  1.,  1.,  1.])\n    >>> P.polyint(c,lbnd=-2)  # should return array([6, 1, 1, 1])\n    array([6.,  1.,  1.,  1.])\n    >>> P.polyint(c,scl=-2)  # should return array([0, -2, -2, -2])\n    array([ 0., -2., -2., -2.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        # astype doesn't preserve mask attribute.\n        c = c + 0.0\n    cdt = c.dtype\n    if not np.iterable(k):\n        k = [k]\n    cnt = pu._as_int(m, \"the order of integration\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of integration must be non-negative\")\n    if len(k) > cnt:\n        raise ValueError(\"Too many integration constants\")\n    if np.ndim(lbnd) != 0:\n        raise ValueError(\"lbnd must be a scalar.\")\n    if np.ndim(scl) != 0:\n        raise ValueError(\"scl must be a scalar.\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    k = list(k) + [0] * (cnt - len(k))\n    c = np.moveaxis(c, iaxis, 0)\n    for i in range(cnt):\n        n = len(c)\n        c *= scl\n        if n == 1 and np.all(c[0] == 0):\n            c[0] += k[i]\n        else:\n            tmp = np.empty((n + 1,) + c.shape[1:], dtype=cdt)\n            tmp[0] = c[0] * 0\n            tmp[1] = c[0]\n            for j in range(1, n):\n                tmp[j + 1] = c[j] / (j + 1)\n            tmp[0] += k[i] - polyval(lbnd, tmp)\n            c = tmp\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.polynomial.polyval",
      "category": "Standard polynomials",
      "description": "Evaluate a polynomial at points x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyval.html",
      "doc": "Evaluate a polynomial at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value\n\n    .. math:: p(x) = c_0 + c_1 * x + ... + c_n * x^n\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        with themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The shape of the returned array is described above.\n\n    See Also\n    --------\n    polyval2d, polygrid2d, polyval3d, polygrid3d\n\n    Notes\n    -----\n    The evaluation uses Horner's method.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.polynomial import polyval\n    >>> polyval(1, [1,2,3])\n    6.0\n    >>> a = np.arange(4).reshape(2,2)\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> polyval(a, [1, 2, 3])\n    array([[ 1.,   6.],\n           [17.,  34.]])\n    >>> coef = np.arange(4).reshape(2, 2)  # multidimensional coefficients\n    >>> coef\n    array([[0, 1],\n           [2, 3]])\n    >>> polyval([1, 2], coef, tensor=True)\n    array([[2.,  4.],\n           [4.,  7.]])\n    >>> polyval([1, 2], coef, tensor=False)\n    array([2.,  7.])",
      "code": "def polyval(x, c, tensor=True):\n    \"\"\"\n    Evaluate a polynomial at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value\n\n    .. math:: p(x) = c_0 + c_1 * x + ... + c_n * x^n\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        with themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The shape of the returned array is described above.\n\n    See Also\n    --------\n    polyval2d, polygrid2d, polyval3d, polygrid3d\n\n    Notes\n    -----\n    The evaluation uses Horner's method.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.polynomial import polyval\n    >>> polyval(1, [1,2,3])\n    6.0\n    >>> a = np.arange(4).reshape(2,2)\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> polyval(a, [1, 2, 3])\n    array([[ 1.,   6.],\n           [17.,  34.]])\n    >>> coef = np.arange(4).reshape(2, 2)  # multidimensional coefficients\n    >>> coef\n    array([[0, 1],\n           [2, 3]])\n    >>> polyval([1, 2], coef, tensor=True)\n    array([[2.,  4.],\n           [4.,  7.]])\n    >>> polyval([1, 2], coef, tensor=False)\n    array([2.,  7.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        # astype fails with NA\n        c = c + 0.0\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n\n    c0 = c[-1] + x * 0\n    for i in range(2, len(c) + 1):\n        c0 = c[-i] + c0 * x\n    return c0"
    },
    {
      "name": "numpy.polynomial.polynomial.polyvalfromroots",
      "category": "Standard polynomials",
      "description": "Evaluate a polynomial specified by its roots at points x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyvalfromroots.html",
      "doc": "Evaluate a polynomial specified by its roots at points x.\n\n    If `r` is of length ``N``, this function returns the value\n\n    .. math:: p(x) = \\\\prod_{n=1}^{N} (x - r_n)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `r`.\n\n    If `r` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If `r`\n    is multidimensional, then the shape of the result depends on the value of\n    `tensor`. If `tensor` is ``True`` the shape will be r.shape[1:] + x.shape;\n    that is, each polynomial is evaluated at every value of `x`. If `tensor` is\n    ``False``, the shape will be r.shape[1:]; that is, each polynomial is\n    evaluated only for the corresponding broadcast value of `x`. Note that\n    scalars have shape (,).\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        with themselves and with the elements of `r`.\n    r : array_like\n        Array of roots. If `r` is multidimensional the first index is the\n        root index, while the remaining indices enumerate multiple\n        polynomials. For instance, in the two dimensional case the roots\n        of each polynomial may be thought of as stored in the columns of `r`.\n    tensor : boolean, optional\n        If True, the shape of the roots array is extended with ones on the\n        right, one for each dimension of `x`. Scalars have dimension 0 for this\n        action. The result is that every column of coefficients in `r` is\n        evaluated for every element of `x`. If False, `x` is broadcast over the\n        columns of `r` for the evaluation.  This keyword is useful when `r` is\n        multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The shape of the returned array is described above.\n\n    See Also\n    --------\n    polyroots, polyfromroots, polyval\n\n    Examples\n    --------\n    >>> from numpy.polynomial.polynomial import polyvalfromroots\n    >>> polyvalfromroots(1, [1, 2, 3])\n    0.0\n    >>> a = np.arange(4).reshape(2, 2)\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> polyvalfromroots(a, [-1, 0, 1])\n    array([[-0.,   0.],\n           [ 6.,  24.]])\n    >>> r = np.arange(-2, 2).reshape(2,2)  # multidimensional coefficients\n    >>> r # each column of r defines one polynomial\n    array([[-2, -1],\n           [ 0,  1]])\n    >>> b = [-2, 1]\n    >>> polyvalfromroots(b, r, tensor=True)\n    array([[-0.,  3.],\n           [ 3., 0.]])\n    >>> polyvalfromroots(b, r, tensor=False)\n    array([-0.,  0.])",
      "code": "def polyvalfromroots(x, r, tensor=True):\n    \"\"\"\n    Evaluate a polynomial specified by its roots at points x.\n\n    If `r` is of length ``N``, this function returns the value\n\n    .. math:: p(x) = \\\\prod_{n=1}^{N} (x - r_n)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `r`.\n\n    If `r` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If `r`\n    is multidimensional, then the shape of the result depends on the value of\n    `tensor`. If `tensor` is ``True`` the shape will be r.shape[1:] + x.shape;\n    that is, each polynomial is evaluated at every value of `x`. If `tensor` is\n    ``False``, the shape will be r.shape[1:]; that is, each polynomial is\n    evaluated only for the corresponding broadcast value of `x`. Note that\n    scalars have shape (,).\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        with themselves and with the elements of `r`.\n    r : array_like\n        Array of roots. If `r` is multidimensional the first index is the\n        root index, while the remaining indices enumerate multiple\n        polynomials. For instance, in the two dimensional case the roots\n        of each polynomial may be thought of as stored in the columns of `r`.\n    tensor : boolean, optional\n        If True, the shape of the roots array is extended with ones on the\n        right, one for each dimension of `x`. Scalars have dimension 0 for this\n        action. The result is that every column of coefficients in `r` is\n        evaluated for every element of `x`. If False, `x` is broadcast over the\n        columns of `r` for the evaluation.  This keyword is useful when `r` is\n        multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The shape of the returned array is described above.\n\n    See Also\n    --------\n    polyroots, polyfromroots, polyval\n\n    Examples\n    --------\n    >>> from numpy.polynomial.polynomial import polyvalfromroots\n    >>> polyvalfromroots(1, [1, 2, 3])\n    0.0\n    >>> a = np.arange(4).reshape(2, 2)\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> polyvalfromroots(a, [-1, 0, 1])\n    array([[-0.,   0.],\n           [ 6.,  24.]])\n    >>> r = np.arange(-2, 2).reshape(2,2)  # multidimensional coefficients\n    >>> r # each column of r defines one polynomial\n    array([[-2, -1],\n           [ 0,  1]])\n    >>> b = [-2, 1]\n    >>> polyvalfromroots(b, r, tensor=True)\n    array([[-0.,  3.],\n           [ 3., 0.]])\n    >>> polyvalfromroots(b, r, tensor=False)\n    array([-0.,  0.])\n\n    \"\"\"\n    r = np.array(r, ndmin=1, copy=None)\n    if r.dtype.char in '?bBhHiIlLqQpP':\n        r = r.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray):\n        if tensor:\n            r = r.reshape(r.shape + (1,) * x.ndim)\n        elif x.ndim >= r.ndim:\n            raise ValueError(\"x.ndim must be < r.ndim when tensor == False\")\n    return np.prod(x - r, axis=0)"
    },
    {
      "name": "numpy.polynomial.polynomial.polyval2d",
      "category": "Standard polynomials",
      "description": "Evaluate a 2-D polynomial at points (x, y).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyval2d.html",
      "doc": "Evaluate a 2-D polynomial at points (x, y).\n\n    This function returns the value\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * x^i * y^j\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points formed with\n        pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    polyval, polygrid2d, polyval3d, polygrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = ((1, 2, 3), (4, 5, 6))\n    >>> P.polyval2d(1, 1, c)\n    21.0",
      "code": "def polyval2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D polynomial at points (x, y).\n\n    This function returns the value\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * x^i * y^j\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points formed with\n        pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    polyval, polygrid2d, polyval3d, polygrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = ((1, 2, 3), (4, 5, 6))\n    >>> P.polyval2d(1, 1, c)\n    21.0\n\n    \"\"\"\n    return pu._valnd(polyval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.polynomial.polygrid2d",
      "category": "Standard polynomials",
      "description": "Evaluate a 2-D polynomial on the Cartesian product of x and y.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polygrid2d.html",
      "doc": "Evaluate a 2-D polynomial on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * a^i * b^j\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape + y.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    polyval, polyval2d, polyval3d, polygrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = ((1, 2, 3), (4, 5, 6))\n    >>> P.polygrid2d([0, 1], [0, 1], c)\n    array([[ 1.,  6.],\n           [ 5., 21.]])",
      "code": "def polygrid2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D polynomial on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * a^i * b^j\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape + y.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    polyval, polyval2d, polyval3d, polygrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = ((1, 2, 3), (4, 5, 6))\n    >>> P.polygrid2d([0, 1], [0, 1], c)\n    array([[ 1.,  6.],\n           [ 5., 21.]])\n\n    \"\"\"\n    return pu._gridnd(polyval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.polynomial.polyval3d",
      "category": "Standard polynomials",
      "description": "Evaluate a 3-D polynomial at points (x, y, z).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyval3d.html",
      "doc": "Evaluate a 3-D polynomial at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * x^i * y^j * z^k\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    polyval, polyval2d, polygrid2d, polygrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    >>> P.polyval3d(1, 1, 1, c)\n    45.0",
      "code": "def polyval3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D polynomial at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * x^i * y^j * z^k\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    polyval, polyval2d, polygrid2d, polygrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    >>> P.polyval3d(1, 1, 1, c)\n    45.0\n\n    \"\"\"\n    return pu._valnd(polyval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.polynomial.polygrid3d",
      "category": "Standard polynomials",
      "description": "Evaluate a 3-D polynomial on the Cartesian product of x, y and z.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polygrid3d.html",
      "doc": "Evaluate a 3-D polynomial on the Cartesian product of x, y and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * a^i * b^j * c^k\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    polyval, polyval2d, polygrid2d, polyval3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    >>> P.polygrid3d([0, 1], [0, 1], [0, 1], c)\n    array([[ 1., 13.],\n           [ 6., 51.]])",
      "code": "def polygrid3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D polynomial on the Cartesian product of x, y and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * a^i * b^j * c^k\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    polyval, polyval2d, polygrid2d, polyval3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n    >>> P.polygrid3d([0, 1], [0, 1], [0, 1], c)\n    array([[ 1., 13.],\n           [ 6., 51.]])\n\n    \"\"\"\n    return pu._gridnd(polyval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.polynomial.polyvander",
      "category": "Standard polynomials",
      "description": "Vandermonde matrix of given degree.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyvander.html",
      "doc": "Vandermonde matrix of given degree.\n\n    Returns the Vandermonde matrix of degree `deg` and sample points\n    `x`. The Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = x^i,\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the power of `x`.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    matrix ``V = polyvander(x, n)``, then ``np.dot(V, c)`` and\n    ``polyval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of polynomials of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray.\n        The Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where the last index is the power of `x`.\n        The dtype will be the same as the converted `x`.\n\n    See Also\n    --------\n    polyvander2d, polyvander3d\n\n    Examples\n    --------\n    The Vandermonde matrix of degree ``deg = 5`` and sample points\n    ``x = [-1, 2, 3]`` contains the element-wise powers of `x`\n    from 0 to 5 as its columns.\n\n    >>> from numpy.polynomial import polynomial as P\n    >>> x, deg = [-1, 2, 3], 5\n    >>> P.polyvander(x=x, deg=deg)\n    array([[  1.,  -1.,   1.,  -1.,   1.,  -1.],\n           [  1.,   2.,   4.,   8.,  16.,  32.],\n           [  1.,   3.,   9.,  27.,  81., 243.]])",
      "code": "def polyvander(x, deg):\n    \"\"\"Vandermonde matrix of given degree.\n\n    Returns the Vandermonde matrix of degree `deg` and sample points\n    `x`. The Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = x^i,\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the power of `x`.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    matrix ``V = polyvander(x, n)``, then ``np.dot(V, c)`` and\n    ``polyval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of polynomials of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray.\n        The Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where the last index is the power of `x`.\n        The dtype will be the same as the converted `x`.\n\n    See Also\n    --------\n    polyvander2d, polyvander3d\n\n    Examples\n    --------\n    The Vandermonde matrix of degree ``deg = 5`` and sample points\n    ``x = [-1, 2, 3]`` contains the element-wise powers of `x`\n    from 0 to 5 as its columns.\n\n    >>> from numpy.polynomial import polynomial as P\n    >>> x, deg = [-1, 2, 3], 5\n    >>> P.polyvander(x=x, deg=deg)\n    array([[  1.,  -1.,   1.,  -1.,   1.,  -1.],\n           [  1.,   2.,   4.,   8.,  16.,  32.],\n           [  1.,   3.,   9.,  27.,  81., 243.]])\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg < 0:\n        raise ValueError(\"deg must be non-negative\")\n\n    x = np.array(x, copy=None, ndmin=1) + 0.0\n    dims = (ideg + 1,) + x.shape\n    dtyp = x.dtype\n    v = np.empty(dims, dtype=dtyp)\n    v[0] = x * 0 + 1\n    if ideg > 0:\n        v[1] = x\n        for i in range(2, ideg + 1):\n            v[i] = v[i - 1] * x\n    return np.moveaxis(v, 0, -1)"
    },
    {
      "name": "numpy.polynomial.polynomial.polyvander2d",
      "category": "Standard polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyvander2d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = x^i * y^j,\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the powers of\n    `x` and `y`.\n\n    If ``V = polyvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``polyval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D polynomials\n    of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg([1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    polyvander, polyvander3d, polyval2d, polyval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n\n    The 2-D pseudo-Vandermonde matrix of degree ``[1, 2]`` and sample\n    points ``x = [-1, 2]`` and ``y = [1, 3]`` is as follows:\n\n    >>> from numpy.polynomial import polynomial as P\n    >>> x = np.array([-1, 2])\n    >>> y = np.array([1, 3])\n    >>> m, n = 1, 2\n    >>> deg = np.array([m, n])\n    >>> V = P.polyvander2d(x=x, y=y, deg=deg)\n    >>> V\n    array([[ 1.,  1.,  1., -1., -1., -1.],\n           [ 1.,  3.,  9.,  2.,  6., 18.]])\n\n    We can verify the columns for any ``0 <= i <= m`` and ``0 <= j <= n``:\n\n    >>> i, j = 0, 1\n    >>> V[:, (deg[1]+1)*i + j] == x**i * y**j\n    array([ True,  True])\n\n    The (1D) Vandermonde matrix of sample points ``x`` and degree ``m`` is a\n    special case of the (2D) pseudo-Vandermonde matrix with ``y`` points all\n    zero and degree ``[m, 0]``.\n\n    >>> P.polyvander2d(x=x, y=0*x, deg=(m, 0)) == P.polyvander(x=x, deg=m)\n    array([[ True,  True],\n           [ True,  True]])",
      "code": "def polyvander2d(x, y, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = x^i * y^j,\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the powers of\n    `x` and `y`.\n\n    If ``V = polyvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``polyval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D polynomials\n    of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg([1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    polyvander, polyvander3d, polyval2d, polyval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n\n    The 2-D pseudo-Vandermonde matrix of degree ``[1, 2]`` and sample\n    points ``x = [-1, 2]`` and ``y = [1, 3]`` is as follows:\n\n    >>> from numpy.polynomial import polynomial as P\n    >>> x = np.array([-1, 2])\n    >>> y = np.array([1, 3])\n    >>> m, n = 1, 2\n    >>> deg = np.array([m, n])\n    >>> V = P.polyvander2d(x=x, y=y, deg=deg)\n    >>> V\n    array([[ 1.,  1.,  1., -1., -1., -1.],\n           [ 1.,  3.,  9.,  2.,  6., 18.]])\n\n    We can verify the columns for any ``0 <= i <= m`` and ``0 <= j <= n``:\n\n    >>> i, j = 0, 1\n    >>> V[:, (deg[1]+1)*i + j] == x**i * y**j\n    array([ True,  True])\n\n    The (1D) Vandermonde matrix of sample points ``x`` and degree ``m`` is a\n    special case of the (2D) pseudo-Vandermonde matrix with ``y`` points all\n    zero and degree ``[m, 0]``.\n\n    >>> P.polyvander2d(x=x, y=0*x, deg=(m, 0)) == P.polyvander(x=x, deg=m)\n    array([[ True,  True],\n           [ True,  True]])\n\n    \"\"\"\n    return pu._vander_nd_flat((polyvander, polyvander), (x, y), deg)"
    },
    {
      "name": "numpy.polynomial.polynomial.polyvander3d",
      "category": "Standard polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyvander3d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = x^i * y^j * z^k,\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the powers of `x`, `y`, and `z`.\n\n    If ``V = polyvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and  ``np.dot(V, c.flat)`` and ``polyval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D polynomials\n    of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg([1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    polyvander, polyvander3d, polyval2d, polyval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polynomial as P\n    >>> x = np.asarray([-1, 2, 1])\n    >>> y = np.asarray([1, -2, -3])\n    >>> z = np.asarray([2, 2, 5])\n    >>> l, m, n = [2, 2, 1]\n    >>> deg = [l, m, n]\n    >>> V = P.polyvander3d(x=x, y=y, z=z, deg=deg)\n    >>> V\n    array([[  1.,   2.,   1.,   2.,   1.,   2.,  -1.,  -2.,  -1.,\n             -2.,  -1.,  -2.,   1.,   2.,   1.,   2.,   1.,   2.],\n           [  1.,   2.,  -2.,  -4.,   4.,   8.,   2.,   4.,  -4.,\n             -8.,   8.,  16.,   4.,   8.,  -8., -16.,  16.,  32.],\n           [  1.,   5.,  -3., -15.,   9.,  45.,   1.,   5.,  -3.,\n            -15.,   9.,  45.,   1.,   5.,  -3., -15.,   9.,  45.]])\n\n    We can verify the columns for any ``0 <= i <= l``, ``0 <= j <= m``,\n    and ``0 <= k <= n``\n\n    >>> i, j, k = 2, 1, 0\n    >>> V[:, (m+1)*(n+1)*i + (n+1)*j + k] == x**i * y**j * z**k\n    array([ True,  True,  True])",
      "code": "def polyvander3d(x, y, z, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = x^i * y^j * z^k,\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the powers of `x`, `y`, and `z`.\n\n    If ``V = polyvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and  ``np.dot(V, c.flat)`` and ``polyval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D polynomials\n    of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg([1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    polyvander, polyvander3d, polyval2d, polyval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polynomial as P\n    >>> x = np.asarray([-1, 2, 1])\n    >>> y = np.asarray([1, -2, -3])\n    >>> z = np.asarray([2, 2, 5])\n    >>> l, m, n = [2, 2, 1]\n    >>> deg = [l, m, n]\n    >>> V = P.polyvander3d(x=x, y=y, z=z, deg=deg)\n    >>> V\n    array([[  1.,   2.,   1.,   2.,   1.,   2.,  -1.,  -2.,  -1.,\n             -2.,  -1.,  -2.,   1.,   2.,   1.,   2.,   1.,   2.],\n           [  1.,   2.,  -2.,  -4.,   4.,   8.,   2.,   4.,  -4.,\n             -8.,   8.,  16.,   4.,   8.,  -8., -16.,  16.,  32.],\n           [  1.,   5.,  -3., -15.,   9.,  45.,   1.,   5.,  -3.,\n            -15.,   9.,  45.,   1.,   5.,  -3., -15.,   9.,  45.]])\n\n    We can verify the columns for any ``0 <= i <= l``, ``0 <= j <= m``,\n    and ``0 <= k <= n``\n\n    >>> i, j, k = 2, 1, 0\n    >>> V[:, (m+1)*(n+1)*i + (n+1)*j + k] == x**i * y**j * z**k\n    array([ True,  True,  True])\n\n    \"\"\"\n    return pu._vander_nd_flat((polyvander, polyvander, polyvander), (x, y, z), deg)"
    },
    {
      "name": "numpy.polynomial.polynomial.polyfit",
      "category": "Standard polynomials",
      "description": "Least-squares fit of a polynomial to data.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyfit.html",
      "doc": "Least-squares fit of a polynomial to data.\n\n    Return the coefficients of a polynomial of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * x + ... + c_n * x^n,\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (`M`,)\n        x-coordinates of the `M` sample (data) points ``(x[i], y[i])``.\n    y : array_like, shape (`M`,) or (`M`, `K`)\n        y-coordinates of the sample points.  Several sets of sample points\n        sharing the same x-coordinates can be (independently) fit with one\n        call to `polyfit` by passing in for `y` a 2-D array that contains\n        one data set per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit.  Singular values smaller\n        than `rcond`, relative to the largest singular value, will be\n        ignored.  The default value is ``len(x)*eps``, where `eps` is the\n        relative precision of the platform's float type, about 2e-16 in\n        most cases.\n    full : bool, optional\n        Switch determining the nature of the return value.  When ``False``\n        (the default) just the coefficients are returned; when ``True``,\n        diagnostic information from the singular value decomposition (used\n        to solve the fit's matrix equation) is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (`deg` + 1,) or (`deg` + 1, `K`)\n        Polynomial coefficients ordered from low to high.  If `y` was 2-D,\n        the coefficients in column `k` of `coef` represent the polynomial\n        fit to the data in `y`'s `k`-th column.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Raises\n    ------\n    RankWarning\n        Raised if the matrix in the least-squares fit is rank deficient.\n        The warning is only raised if ``full == False``.  The warnings can\n        be turned off by:\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.laguerre.lagfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.hermite_e.hermefit\n    polyval : Evaluates a polynomial.\n    polyvander : Vandermonde matrix for powers.\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the polynomial `p` that minimizes\n    the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up the (typically) over-determined matrix equation:\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected (and `full` == ``False``), a `~exceptions.RankWarning` will be\n    raised.  This means that the coefficient values may be poorly determined.\n    Fitting to a lower order polynomial will usually get rid of the warning\n    (but may not be what you want, of course; if you have independent\n    reason(s) for choosing the degree which isn't working, you may have to:\n    a) reconsider those reasons, and/or b) reconsider the quality of your\n    data).  The `rcond` parameter can also be set to a value smaller than\n    its default, but the resulting fit may be spurious and have large\n    contributions from roundoff error.\n\n    Polynomial fits using double precision tend to \"fail\" at about\n    (polynomial) degree 20. Fits using Chebyshev or Legendre series are\n    generally better conditioned, but much can still depend on the\n    distribution of the sample points and the smoothness of the data.  If\n    the quality of the fit is inadequate, splines may be a good\n    alternative.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polynomial as P\n    >>> x = np.linspace(-1,1,51)  # x \"data\": [-1, -0.96, ..., 0.96, 1]\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(size=len(x))\n    >>> y = x**3 - x + err  # x^3 - x + Gaussian noise\n    >>> c, stats = P.polyfit(x,y,3,full=True)\n    >>> c # c[0], c[1] approx. -1, c[2] should be approx. 0, c[3] approx. 1\n    array([ 0.23111996, -1.02785049, -0.2241444 ,  1.08405657]) # may vary\n    >>> stats # note the large SSR, explaining the rather poor results\n    [array([48.312088]),                                        # may vary\n     4,\n     array([1.38446749, 1.32119158, 0.50443316, 0.28853036]),\n     1.1324274851176597e-14]\n\n    Same thing without the added noise\n\n    >>> y = x**3 - x\n    >>> c, stats = P.polyfit(x,y,3,full=True)\n    >>> c # c[0], c[1] ~= -1, c[2] should be \"very close to 0\", c[3] ~= 1\n    array([-6.73496154e-17, -1.00000000e+00,  0.00000000e+00,  1.00000000e+00])\n    >>> stats # note the minuscule SSR\n    [array([8.79579319e-31]),\n     np.int32(4),\n     array([1.38446749, 1.32119158, 0.50443316, 0.28853036]),\n     1.1324274851176597e-14]",
      "code": "def polyfit(x, y, deg, rcond=None, full=False, w=None):\n    \"\"\"\n    Least-squares fit of a polynomial to data.\n\n    Return the coefficients of a polynomial of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * x + ... + c_n * x^n,\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (`M`,)\n        x-coordinates of the `M` sample (data) points ``(x[i], y[i])``.\n    y : array_like, shape (`M`,) or (`M`, `K`)\n        y-coordinates of the sample points.  Several sets of sample points\n        sharing the same x-coordinates can be (independently) fit with one\n        call to `polyfit` by passing in for `y` a 2-D array that contains\n        one data set per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit.  Singular values smaller\n        than `rcond`, relative to the largest singular value, will be\n        ignored.  The default value is ``len(x)*eps``, where `eps` is the\n        relative precision of the platform's float type, about 2e-16 in\n        most cases.\n    full : bool, optional\n        Switch determining the nature of the return value.  When ``False``\n        (the default) just the coefficients are returned; when ``True``,\n        diagnostic information from the singular value decomposition (used\n        to solve the fit's matrix equation) is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (`deg` + 1,) or (`deg` + 1, `K`)\n        Polynomial coefficients ordered from low to high.  If `y` was 2-D,\n        the coefficients in column `k` of `coef` represent the polynomial\n        fit to the data in `y`'s `k`-th column.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Raises\n    ------\n    RankWarning\n        Raised if the matrix in the least-squares fit is rank deficient.\n        The warning is only raised if ``full == False``.  The warnings can\n        be turned off by:\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.laguerre.lagfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.hermite_e.hermefit\n    polyval : Evaluates a polynomial.\n    polyvander : Vandermonde matrix for powers.\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the polynomial `p` that minimizes\n    the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up the (typically) over-determined matrix equation:\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected (and `full` == ``False``), a `~exceptions.RankWarning` will be\n    raised.  This means that the coefficient values may be poorly determined.\n    Fitting to a lower order polynomial will usually get rid of the warning\n    (but may not be what you want, of course; if you have independent\n    reason(s) for choosing the degree which isn't working, you may have to:\n    a) reconsider those reasons, and/or b) reconsider the quality of your\n    data).  The `rcond` parameter can also be set to a value smaller than\n    its default, but the resulting fit may be spurious and have large\n    contributions from roundoff error.\n\n    Polynomial fits using double precision tend to \"fail\" at about\n    (polynomial) degree 20. Fits using Chebyshev or Legendre series are\n    generally better conditioned, but much can still depend on the\n    distribution of the sample points and the smoothness of the data.  If\n    the quality of the fit is inadequate, splines may be a good\n    alternative.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polynomial as P\n    >>> x = np.linspace(-1,1,51)  # x \"data\": [-1, -0.96, ..., 0.96, 1]\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(size=len(x))\n    >>> y = x**3 - x + err  # x^3 - x + Gaussian noise\n    >>> c, stats = P.polyfit(x,y,3,full=True)\n    >>> c # c[0], c[1] approx. -1, c[2] should be approx. 0, c[3] approx. 1\n    array([ 0.23111996, -1.02785049, -0.2241444 ,  1.08405657]) # may vary\n    >>> stats # note the large SSR, explaining the rather poor results\n    [array([48.312088]),                                        # may vary\n     4,\n     array([1.38446749, 1.32119158, 0.50443316, 0.28853036]),\n     1.1324274851176597e-14]\n\n    Same thing without the added noise\n\n    >>> y = x**3 - x\n    >>> c, stats = P.polyfit(x,y,3,full=True)\n    >>> c # c[0], c[1] ~= -1, c[2] should be \"very close to 0\", c[3] ~= 1\n    array([-6.73496154e-17, -1.00000000e+00,  0.00000000e+00,  1.00000000e+00])\n    >>> stats # note the minuscule SSR\n    [array([8.79579319e-31]),\n     np.int32(4),\n     array([1.38446749, 1.32119158, 0.50443316, 0.28853036]),\n     1.1324274851176597e-14]\n\n    \"\"\"\n    return pu._fit(polyvander, x, y, deg, rcond, full, w)"
    },
    {
      "name": "numpy.polynomial.polynomial.polycompanion",
      "category": "Standard polynomials",
      "description": "Return the companion matrix of c.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polycompanion.html",
      "doc": "Return the companion matrix of c.\n\n    The companion matrix for power series cannot be made symmetric by\n    scaling the basis, so this function differs from those for the\n    orthogonal polynomials.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of polynomial coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Companion matrix of dimensions (deg, deg).\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = (1, 2, 3)\n    >>> P.polycompanion(c)\n    array([[ 0.        , -0.33333333],\n           [ 1.        , -0.66666667]])",
      "code": "def polycompanion(c):\n    \"\"\"\n    Return the companion matrix of c.\n\n    The companion matrix for power series cannot be made symmetric by\n    scaling the basis, so this function differs from those for the\n    orthogonal polynomials.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of polynomial coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Companion matrix of dimensions (deg, deg).\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polynomial as P\n    >>> c = (1, 2, 3)\n    >>> P.polycompanion(c)\n    array([[ 0.        , -0.33333333],\n           [ 1.        , -0.66666667]])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) < 2:\n        raise ValueError('Series must have maximum degree of at least 1.')\n    if len(c) == 2:\n        return np.array([[-c[0] / c[1]]])\n\n    n = len(c) - 1\n    mat = np.zeros((n, n), dtype=c.dtype)\n    bot = mat.reshape(-1)[n::n + 1]\n    bot[...] = 1\n    mat[:, -1] -= c[:-1] / c[-1]\n    return mat"
    },
    {
      "name": "numpy.polynomial.polynomial.polyroots",
      "category": "Standard polynomials",
      "description": "Compute the roots of a polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.polyroots.html",
      "doc": "Compute the roots of a polynomial.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * x^i.\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of polynomial coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the polynomial. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the power series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.polynomial as poly\n    >>> poly.polyroots(poly.polyfromroots((-1,0,1)))\n    array([-1.,  0.,  1.])\n    >>> poly.polyroots(poly.polyfromroots((-1,0,1))).dtype\n    dtype('float64')\n    >>> j = complex(0,1)\n    >>> poly.polyroots(poly.polyfromroots((-j,0,j)))\n    array([  0.00000000e+00+0.j,   0.00000000e+00+1.j,   2.77555756e-17-1.j])  # may vary",
      "code": "def polyroots(c):\n    \"\"\"\n    Compute the roots of a polynomial.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * x^i.\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of polynomial coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the polynomial. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the power series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.polynomial as poly\n    >>> poly.polyroots(poly.polyfromroots((-1,0,1)))\n    array([-1.,  0.,  1.])\n    >>> poly.polyroots(poly.polyfromroots((-1,0,1))).dtype\n    dtype('float64')\n    >>> j = complex(0,1)\n    >>> poly.polyroots(poly.polyfromroots((-j,0,j)))\n    array([  0.00000000e+00+0.j,   0.00000000e+00+1.j,   2.77555756e-17-1.j])  # may vary\n\n    \"\"\"  # noqa: E501\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) < 2:\n        return np.array([], dtype=c.dtype)\n    if len(c) == 2:\n        return np.array([-c[0] / c[1]])\n\n    m = polycompanion(c)\n    r = la.eigvals(m)\n    r.sort()\n    return r\n\n\n#\n# polynomial class\n#"
    },
    {
      "name": "numpy.polynomial.polynomial.Polynomial",
      "category": "Standard polynomials",
      "description": "A power series class.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polynomial.Polynomial.html",
      "doc": "A power series class.\n\n    The Polynomial class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Polynomial coefficients in order of increasing degree, i.e.,\n        ``(1, 2, 3)`` give ``1 + 2*x + 3*x**2``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24",
      "code": "class Polynomial(ABCPolyBase):\n    \"\"\"A power series class.\n\n    The Polynomial class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Polynomial coefficients in order of increasing degree, i.e.,\n        ``(1, 2, 3)`` give ``1 + 2*x + 3*x**2``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24\n\n    \"\"\"",
      "type": "class"
    },
    {
      "name": "numpy.polynomial.chebyshev.poly2cheb",
      "category": "Chebyshev polynomials",
      "description": "Convert a polynomial to a Chebyshev series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.poly2cheb.html",
      "doc": "Convert a polynomial to a Chebyshev series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Chebyshev series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Chebyshev\n        series.\n\n    See Also\n    --------\n    cheb2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> p = P.Polynomial(range(4))\n    >>> p\n    Polynomial([0., 1., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n    >>> c = p.convert(kind=P.Chebyshev)\n    >>> c\n    Chebyshev([1.  , 3.25, 1.  , 0.75], domain=[-1.,  1.], window=[-1., ...\n    >>> P.chebyshev.poly2cheb(range(4))\n    array([1.  , 3.25, 1.  , 0.75])",
      "code": "def poly2cheb(pol):\n    \"\"\"\n    Convert a polynomial to a Chebyshev series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Chebyshev series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Chebyshev\n        series.\n\n    See Also\n    --------\n    cheb2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> p = P.Polynomial(range(4))\n    >>> p\n    Polynomial([0., 1., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n    >>> c = p.convert(kind=P.Chebyshev)\n    >>> c\n    Chebyshev([1.  , 3.25, 1.  , 0.75], domain=[-1.,  1.], window=[-1., ...\n    >>> P.chebyshev.poly2cheb(range(4))\n    array([1.  , 3.25, 1.  , 0.75])\n\n    \"\"\"\n    [pol] = pu.as_series([pol])\n    deg = len(pol) - 1\n    res = 0\n    for i in range(deg, -1, -1):\n        res = chebadd(chebmulx(res), pol[i])\n    return res"
    },
    {
      "name": "numpy.polynomial.chebyshev.cheb2poly",
      "category": "Chebyshev polynomials",
      "description": "Convert a Chebyshev series to a polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.cheb2poly.html",
      "doc": "Convert a Chebyshev series to a polynomial.\n\n    Convert an array representing the coefficients of a Chebyshev series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Chebyshev series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2cheb\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> c = P.Chebyshev(range(4))\n    >>> c\n    Chebyshev([0., 1., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n    >>> p = c.convert(kind=P.Polynomial)\n    >>> p\n    Polynomial([-2., -8.,  4., 12.], domain=[-1.,  1.], window=[-1.,  1.], ...\n    >>> P.chebyshev.cheb2poly(range(4))\n    array([-2.,  -8.,   4.,  12.])",
      "code": "def cheb2poly(c):\n    \"\"\"\n    Convert a Chebyshev series to a polynomial.\n\n    Convert an array representing the coefficients of a Chebyshev series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Chebyshev series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2cheb\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> c = P.Chebyshev(range(4))\n    >>> c\n    Chebyshev([0., 1., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n    >>> p = c.convert(kind=P.Polynomial)\n    >>> p\n    Polynomial([-2., -8.,  4., 12.], domain=[-1.,  1.], window=[-1.,  1.], ...\n    >>> P.chebyshev.cheb2poly(range(4))\n    array([-2.,  -8.,   4.,  12.])\n\n    \"\"\"\n    from .polynomial import polyadd, polymulx, polysub\n\n    [c] = pu.as_series([c])\n    n = len(c)\n    if n < 3:\n        return c\n    else:\n        c0 = c[-2]\n        c1 = c[-1]\n        # i is the current degree of c1\n        for i in range(n - 1, 1, -1):\n            tmp = c0\n            c0 = polysub(c[i - 2], c1)\n            c1 = polyadd(tmp, polymulx(c1) * 2)\n        return polyadd(c0, polymulx(c1))\n\n\n#\n# These are constant arrays are of integer type so as to be compatible\n# with the widest range of other types, such as Decimal.\n#\n\n# Chebyshev default domain.\nchebdomain = np.array([-1., 1.])\n\n# Chebyshev coefficients representing zero.\nchebzero = np.array([0])\n\n# Chebyshev coefficients representing one.\nchebone = np.array([1])\n\n# Chebyshev coefficients representing the identity x.\nchebx = np.array([0, 1])"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebline",
      "category": "Chebyshev polynomials",
      "description": "Chebyshev series whose graph is a straight line.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebline.html",
      "doc": "Chebyshev series whose graph is a straight line.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Chebyshev series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as C\n    >>> C.chebline(3,2)\n    array([3, 2])\n    >>> C.chebval(-3, C.chebline(3,2)) # should be -3\n    -3.0",
      "code": "def chebline(off, scl):\n    \"\"\"\n    Chebyshev series whose graph is a straight line.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Chebyshev series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as C\n    >>> C.chebline(3,2)\n    array([3, 2])\n    >>> C.chebval(-3, C.chebline(3,2)) # should be -3\n    -3.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl])\n    else:\n        return np.array([off])"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebfromroots",
      "category": "Chebyshev polynomials",
      "description": "Generate a Chebyshev series with given roots.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebfromroots.html",
      "doc": "Generate a Chebyshev series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in Chebyshev form, where the :math:`r_n` are the roots specified in\n    `roots`.  If a zero has multiplicity n, then it must appear in `roots`\n    n times.  For instance, if 2 is a root of multiplicity three and 3 is a\n    root of multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3].\n    The roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * T_1(x) + ... +  c_n * T_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in Chebyshev form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as C\n    >>> C.chebfromroots((-1,0,1)) # x^3 - x relative to the standard basis\n    array([ 0.  , -0.25,  0.  ,  0.25])\n    >>> j = complex(0,1)\n    >>> C.chebfromroots((-j,j)) # x^2 + 1 relative to the standard basis\n    array([1.5+0.j, 0. +0.j, 0.5+0.j])",
      "code": "def chebfromroots(roots):\n    \"\"\"\n    Generate a Chebyshev series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in Chebyshev form, where the :math:`r_n` are the roots specified in\n    `roots`.  If a zero has multiplicity n, then it must appear in `roots`\n    n times.  For instance, if 2 is a root of multiplicity three and 3 is a\n    root of multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3].\n    The roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * T_1(x) + ... +  c_n * T_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in Chebyshev form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as C\n    >>> C.chebfromroots((-1,0,1)) # x^3 - x relative to the standard basis\n    array([ 0.  , -0.25,  0.  ,  0.25])\n    >>> j = complex(0,1)\n    >>> C.chebfromroots((-j,j)) # x^2 + 1 relative to the standard basis\n    array([1.5+0.j, 0. +0.j, 0.5+0.j])\n\n    \"\"\"\n    return pu._fromroots(chebline, chebmul, roots)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebadd",
      "category": "Chebyshev polynomials",
      "description": "Add one Chebyshev series to another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebadd.html",
      "doc": "Add one Chebyshev series to another.\n\n    Returns the sum of two Chebyshev series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Chebyshev series of their sum.\n\n    See Also\n    --------\n    chebsub, chebmulx, chebmul, chebdiv, chebpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Chebyshev series\n    is a Chebyshev series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebadd(c1,c2)\n    array([4., 4., 4.])",
      "code": "def chebadd(c1, c2):\n    \"\"\"\n    Add one Chebyshev series to another.\n\n    Returns the sum of two Chebyshev series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Chebyshev series of their sum.\n\n    See Also\n    --------\n    chebsub, chebmulx, chebmul, chebdiv, chebpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Chebyshev series\n    is a Chebyshev series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebadd(c1,c2)\n    array([4., 4., 4.])\n\n    \"\"\"\n    return pu._add(c1, c2)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebsub",
      "category": "Chebyshev polynomials",
      "description": "Subtract one Chebyshev series from another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebsub.html",
      "doc": "Subtract one Chebyshev series from another.\n\n    Returns the difference of two Chebyshev series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Chebyshev series coefficients representing their difference.\n\n    See Also\n    --------\n    chebadd, chebmulx, chebmul, chebdiv, chebpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Chebyshev\n    series is a Chebyshev series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebsub(c1,c2)\n    array([-2.,  0.,  2.])\n    >>> C.chebsub(c2,c1) # -C.chebsub(c1,c2)\n    array([ 2.,  0., -2.])",
      "code": "def chebsub(c1, c2):\n    \"\"\"\n    Subtract one Chebyshev series from another.\n\n    Returns the difference of two Chebyshev series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Chebyshev series coefficients representing their difference.\n\n    See Also\n    --------\n    chebadd, chebmulx, chebmul, chebdiv, chebpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Chebyshev\n    series is a Chebyshev series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebsub(c1,c2)\n    array([-2.,  0.,  2.])\n    >>> C.chebsub(c2,c1) # -C.chebsub(c1,c2)\n    array([ 2.,  0., -2.])\n\n    \"\"\"\n    return pu._sub(c1, c2)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebmulx",
      "category": "Chebyshev polynomials",
      "description": "Multiply a Chebyshev series by x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebmulx.html",
      "doc": "Multiply a Chebyshev series by x.\n\n    Multiply the polynomial `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmul, chebdiv, chebpow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> C.chebmulx([1,2,3])\n    array([1. , 2.5, 1. , 1.5])",
      "code": "def chebmulx(c):\n    \"\"\"Multiply a Chebyshev series by x.\n\n    Multiply the polynomial `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmul, chebdiv, chebpow\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> C.chebmulx([1,2,3])\n    array([1. , 2.5, 1. , 1.5])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    # The zero series needs special treatment\n    if len(c) == 1 and c[0] == 0:\n        return c\n\n    prd = np.empty(len(c) + 1, dtype=c.dtype)\n    prd[0] = c[0] * 0\n    prd[1] = c[0]\n    if len(c) > 1:\n        tmp = c[1:] / 2\n        prd[2:] = tmp\n        prd[0:-2] += tmp\n    return prd"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebmul",
      "category": "Chebyshev polynomials",
      "description": "Multiply one Chebyshev series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebmul.html",
      "doc": "Multiply one Chebyshev series by another.\n\n    Returns the product of two Chebyshev series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Chebyshev series coefficients representing their product.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmulx, chebdiv, chebpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Chebyshev polynomial basis set.  Thus, to express\n    the product as a C-series, it is typically necessary to \"reproject\"\n    the product onto said basis set, which typically produces\n    \"unintuitive live\" (but correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebmul(c1,c2) # multiplication requires \"reprojection\"\n    array([  6.5,  12. ,  12. ,   4. ,   1.5])",
      "code": "def chebmul(c1, c2):\n    \"\"\"\n    Multiply one Chebyshev series by another.\n\n    Returns the product of two Chebyshev series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Chebyshev series coefficients representing their product.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmulx, chebdiv, chebpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Chebyshev polynomial basis set.  Thus, to express\n    the product as a C-series, it is typically necessary to \"reproject\"\n    the product onto said basis set, which typically produces\n    \"unintuitive live\" (but correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebmul(c1,c2) # multiplication requires \"reprojection\"\n    array([  6.5,  12. ,  12. ,   4. ,   1.5])\n\n    \"\"\"\n    # c1, c2 are trimmed copies\n    [c1, c2] = pu.as_series([c1, c2])\n    z1 = _cseries_to_zseries(c1)\n    z2 = _cseries_to_zseries(c2)\n    prd = _zseries_mul(z1, z2)\n    ret = _zseries_to_cseries(prd)\n    return pu.trimseq(ret)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebdiv",
      "category": "Chebyshev polynomials",
      "description": "Divide one Chebyshev series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebdiv.html",
      "doc": "Divide one Chebyshev series by another.\n\n    Returns the quotient-with-remainder of two Chebyshev series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Chebyshev series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmulx, chebmul, chebpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one C-series by another\n    results in quotient and remainder terms that are not in the Chebyshev\n    polynomial basis set.  Thus, to express these results as C-series, it\n    is typically necessary to \"reproject\" the results onto said basis\n    set, which typically produces \"unintuitive\" (but correct) results;\n    see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebdiv(c1,c2) # quotient \"intuitive,\" remainder not\n    (array([3.]), array([-8., -4.]))\n    >>> c2 = (0,1,2,3)\n    >>> C.chebdiv(c2,c1) # neither \"intuitive\"\n    (array([0., 2.]), array([-2., -4.]))",
      "code": "def chebdiv(c1, c2):\n    \"\"\"\n    Divide one Chebyshev series by another.\n\n    Returns the quotient-with-remainder of two Chebyshev series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Chebyshev series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmulx, chebmul, chebpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one C-series by another\n    results in quotient and remainder terms that are not in the Chebyshev\n    polynomial basis set.  Thus, to express these results as C-series, it\n    is typically necessary to \"reproject\" the results onto said basis\n    set, which typically produces \"unintuitive\" (but correct) results;\n    see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebdiv(c1,c2) # quotient \"intuitive,\" remainder not\n    (array([3.]), array([-8., -4.]))\n    >>> c2 = (0,1,2,3)\n    >>> C.chebdiv(c2,c1) # neither \"intuitive\"\n    (array([0., 2.]), array([-2., -4.]))\n\n    \"\"\"\n    # c1, c2 are trimmed copies\n    [c1, c2] = pu.as_series([c1, c2])\n    if c2[-1] == 0:\n        raise ZeroDivisionError  # FIXME: add message with details to exception\n\n    # note: this is more efficient than `pu._div(chebmul, c1, c2)`\n    lc1 = len(c1)\n    lc2 = len(c2)\n    if lc1 < lc2:\n        return c1[:1] * 0, c1\n    elif lc2 == 1:\n        return c1 / c2[-1], c1[:1] * 0\n    else:\n        z1 = _cseries_to_zseries(c1)\n        z2 = _cseries_to_zseries(c2)\n        quo, rem = _zseries_div(z1, z2)\n        quo = pu.trimseq(_zseries_to_cseries(quo))\n        rem = pu.trimseq(_zseries_to_cseries(rem))\n        return quo, rem"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebpow",
      "category": "Chebyshev polynomials",
      "description": "Raise a Chebyshev series to a power.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebpow.html",
      "doc": "Raise a Chebyshev series to a power.\n\n    Returns the Chebyshev series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``T_0 + 2*T_1 + 3*T_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Chebyshev series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Chebyshev series of power.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmulx, chebmul, chebdiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> C.chebpow([1, 2, 3, 4], 2)\n    array([15.5, 22. , 16. , ..., 12.5, 12. ,  8. ])",
      "code": "def chebpow(c, pow, maxpower=16):\n    \"\"\"Raise a Chebyshev series to a power.\n\n    Returns the Chebyshev series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``T_0 + 2*T_1 + 3*T_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Chebyshev series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Chebyshev series of power.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmulx, chebmul, chebdiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> C.chebpow([1, 2, 3, 4], 2)\n    array([15.5, 22. , 16. , ..., 12.5, 12. ,  8. ])\n\n    \"\"\"\n    # note: this is more efficient than `pu._pow(chebmul, c1, c2)`, as it\n    # avoids converting between z and c series repeatedly\n\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    power = int(pow)\n    if power != pow or power < 0:\n        raise ValueError(\"Power must be a non-negative integer.\")\n    elif maxpower is not None and power > maxpower:\n        raise ValueError(\"Power is too large\")\n    elif power == 0:\n        return np.array([1], dtype=c.dtype)\n    elif power == 1:\n        return c\n    else:\n        # This can be made more efficient by using powers of two\n        # in the usual way.\n        zs = _cseries_to_zseries(c)\n        prd = zs\n        for i in range(2, power + 1):\n            prd = np.convolve(prd, zs)\n        return _zseries_to_cseries(prd)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebder",
      "category": "Chebyshev polynomials",
      "description": "Differentiate a Chebyshev series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebder.html",
      "doc": "Differentiate a Chebyshev series.\n\n    Returns the Chebyshev series coefficients `c` differentiated `m` times\n    along `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*T_0 + 2*T_1 + 3*T_2``\n    while [[1,2],[1,2]] represents ``1*T_0(x)*T_0(y) + 1*T_1(x)*T_0(y) +\n    2*T_0(x)*T_1(y) + 2*T_1(x)*T_1(y)`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Chebyshev series coefficients. If c is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Chebyshev series of the derivative.\n\n    See Also\n    --------\n    chebint\n\n    Notes\n    -----\n    In general, the result of differentiating a C-series needs to be\n    \"reprojected\" onto the C-series basis set. Thus, typically, the\n    result of this function is \"unintuitive,\" albeit correct; see Examples\n    section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c = (1,2,3,4)\n    >>> C.chebder(c)\n    array([14., 12., 24.])\n    >>> C.chebder(c,3)\n    array([96.])\n    >>> C.chebder(c,scl=-1)\n    array([-14., -12., -24.])\n    >>> C.chebder(c,2,-1)\n    array([12.,  96.])",
      "code": "def chebder(c, m=1, scl=1, axis=0):\n    \"\"\"\n    Differentiate a Chebyshev series.\n\n    Returns the Chebyshev series coefficients `c` differentiated `m` times\n    along `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*T_0 + 2*T_1 + 3*T_2``\n    while [[1,2],[1,2]] represents ``1*T_0(x)*T_0(y) + 1*T_1(x)*T_0(y) +\n    2*T_0(x)*T_1(y) + 2*T_1(x)*T_1(y)`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Chebyshev series coefficients. If c is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Chebyshev series of the derivative.\n\n    See Also\n    --------\n    chebint\n\n    Notes\n    -----\n    In general, the result of differentiating a C-series needs to be\n    \"reprojected\" onto the C-series basis set. Thus, typically, the\n    result of this function is \"unintuitive,\" albeit correct; see Examples\n    section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c = (1,2,3,4)\n    >>> C.chebder(c)\n    array([14., 12., 24.])\n    >>> C.chebder(c,3)\n    array([96.])\n    >>> C.chebder(c,scl=-1)\n    array([-14., -12., -24.])\n    >>> C.chebder(c,2,-1)\n    array([12.,  96.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    cnt = pu._as_int(m, \"the order of derivation\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of derivation must be non-negative\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    n = len(c)\n    if cnt >= n:\n        c = c[:1] * 0\n    else:\n        for i in range(cnt):\n            n = n - 1\n            c *= scl\n            der = np.empty((n,) + c.shape[1:], dtype=c.dtype)\n            for j in range(n, 2, -1):\n                der[j - 1] = (2 * j) * c[j]\n                c[j - 2] += (j * c[j]) / (j - 2)\n            if n > 1:\n                der[1] = 4 * c[2]\n            der[0] = c[1]\n            c = der\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebint",
      "category": "Chebyshev polynomials",
      "description": "Integrate a Chebyshev series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebint.html",
      "doc": "Integrate a Chebyshev series.\n\n    Returns the Chebyshev series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``T_0 + 2*T_1 + 3*T_2`` while [[1,2],[1,2]]\n    represents ``1*T_0(x)*T_0(y) + 1*T_1(x)*T_0(y) + 2*T_0(x)*T_1(y) +\n    2*T_1(x)*T_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Chebyshev series coefficients. If c is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at zero\n        is the first value in the list, the value of the second integral\n        at zero is the second value, etc.  If ``k == []`` (the default),\n        all constants are set to zero.  If ``m == 1``, a single scalar can\n        be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        C-series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 1``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    chebder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a`- perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c = (1,2,3)\n    >>> C.chebint(c)\n    array([ 0.5, -0.5,  0.5,  0.5])\n    >>> C.chebint(c,3)\n    array([ 0.03125   , -0.1875    ,  0.04166667, -0.05208333,  0.01041667, # may vary\n        0.00625   ])\n    >>> C.chebint(c, k=3)\n    array([ 3.5, -0.5,  0.5,  0.5])\n    >>> C.chebint(c,lbnd=-2)\n    array([ 8.5, -0.5,  0.5,  0.5])\n    >>> C.chebint(c,scl=-2)\n    array([-1.,  1., -1., -1.])",
      "code": "def chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n    \"\"\"\n    Integrate a Chebyshev series.\n\n    Returns the Chebyshev series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``T_0 + 2*T_1 + 3*T_2`` while [[1,2],[1,2]]\n    represents ``1*T_0(x)*T_0(y) + 1*T_1(x)*T_0(y) + 2*T_0(x)*T_1(y) +\n    2*T_1(x)*T_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Chebyshev series coefficients. If c is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at zero\n        is the first value in the list, the value of the second integral\n        at zero is the second value, etc.  If ``k == []`` (the default),\n        all constants are set to zero.  If ``m == 1``, a single scalar can\n        be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        C-series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 1``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    chebder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a`- perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c = (1,2,3)\n    >>> C.chebint(c)\n    array([ 0.5, -0.5,  0.5,  0.5])\n    >>> C.chebint(c,3)\n    array([ 0.03125   , -0.1875    ,  0.04166667, -0.05208333,  0.01041667, # may vary\n        0.00625   ])\n    >>> C.chebint(c, k=3)\n    array([ 3.5, -0.5,  0.5,  0.5])\n    >>> C.chebint(c,lbnd=-2)\n    array([ 8.5, -0.5,  0.5,  0.5])\n    >>> C.chebint(c,scl=-2)\n    array([-1.,  1., -1., -1.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if not np.iterable(k):\n        k = [k]\n    cnt = pu._as_int(m, \"the order of integration\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of integration must be non-negative\")\n    if len(k) > cnt:\n        raise ValueError(\"Too many integration constants\")\n    if np.ndim(lbnd) != 0:\n        raise ValueError(\"lbnd must be a scalar.\")\n    if np.ndim(scl) != 0:\n        raise ValueError(\"scl must be a scalar.\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    k = list(k) + [0] * (cnt - len(k))\n    for i in range(cnt):\n        n = len(c)\n        c *= scl\n        if n == 1 and np.all(c[0] == 0):\n            c[0] += k[i]\n        else:\n            tmp = np.empty((n + 1,) + c.shape[1:], dtype=c.dtype)\n            tmp[0] = c[0] * 0\n            tmp[1] = c[0]\n            if n > 1:\n                tmp[2] = c[1] / 4\n            for j in range(2, n):\n                tmp[j + 1] = c[j] / (2 * (j + 1))\n                tmp[j - 1] -= c[j] / (2 * (j - 1))\n            tmp[0] += k[i] - chebval(lbnd, tmp)\n            c = tmp\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebval",
      "category": "Chebyshev polynomials",
      "description": "Evaluate a Chebyshev series at points x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebval.html",
      "doc": "Evaluate a Chebyshev series at points x.\n\n    If `c` is of length `n + 1`, this function returns the value:\n\n    .. math:: p(x) = c_0 * T_0(x) + c_1 * T_1(x) + ... + c_n * T_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    chebval2d, chebgrid2d, chebval3d, chebgrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.",
      "code": "def chebval(x, c, tensor=True):\n    \"\"\"\n    Evaluate a Chebyshev series at points x.\n\n    If `c` is of length `n + 1`, this function returns the value:\n\n    .. math:: p(x) = c_0 * T_0(x) + c_1 * T_1(x) + ... + c_n * T_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    chebval2d, chebgrid2d, chebval3d, chebgrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        x2 = 2 * x\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            c0 = c[-i] - c1\n            c1 = tmp + c1 * x2\n    return c0 + c1 * x"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebval2d",
      "category": "Chebyshev polynomials",
      "description": "Evaluate a 2-D Chebyshev series at points (x, y).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebval2d.html",
      "doc": "Evaluate a 2-D Chebyshev series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * T_i(x) * T_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than 2 the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Chebyshev series at points formed\n        from pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    chebval, chebgrid2d, chebval3d, chebgrid3d",
      "code": "def chebval2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D Chebyshev series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * T_i(x) * T_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than 2 the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Chebyshev series at points formed\n        from pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    chebval, chebgrid2d, chebval3d, chebgrid3d\n    \"\"\"\n    return pu._valnd(chebval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebgrid2d",
      "category": "Chebyshev polynomials",
      "description": "Evaluate a 2-D Chebyshev series on the Cartesian product of x and y.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebgrid2d.html",
      "doc": "Evaluate a 2-D Chebyshev series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * T_i(a) * T_j(b),\n\n    where the points `(a, b)` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape + y.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j is contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Chebyshev series at points in the\n        Cartesian product of `x` and `y`.\n\n    See Also\n    --------\n    chebval, chebval2d, chebval3d, chebgrid3d",
      "code": "def chebgrid2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D Chebyshev series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * T_i(a) * T_j(b),\n\n    where the points `(a, b)` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape + y.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j is contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Chebyshev series at points in the\n        Cartesian product of `x` and `y`.\n\n    See Also\n    --------\n    chebval, chebval2d, chebval3d, chebgrid3d\n    \"\"\"\n    return pu._gridnd(chebval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebval3d",
      "category": "Chebyshev polynomials",
      "description": "Evaluate a 3-D Chebyshev series at points (x, y, z).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebval3d.html",
      "doc": "Evaluate a 3-D Chebyshev series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * T_i(x) * T_j(y) * T_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    chebval, chebval2d, chebgrid2d, chebgrid3d",
      "code": "def chebval3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D Chebyshev series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * T_i(x) * T_j(y) * T_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    chebval, chebval2d, chebgrid2d, chebgrid3d\n    \"\"\"\n    return pu._valnd(chebval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebgrid3d",
      "category": "Chebyshev polynomials",
      "description": "Evaluate a 3-D Chebyshev series on the Cartesian product of x, y, and z.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebgrid3d.html",
      "doc": "Evaluate a 3-D Chebyshev series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * T_i(a) * T_j(b) * T_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    chebval, chebval2d, chebgrid2d, chebval3d",
      "code": "def chebgrid3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D Chebyshev series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * T_i(a) * T_j(b) * T_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    chebval, chebval2d, chebgrid2d, chebval3d\n    \"\"\"\n    return pu._gridnd(chebval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebvander",
      "category": "Chebyshev polynomials",
      "description": "Pseudo-Vandermonde matrix of given degree.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebvander.html",
      "doc": "Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = T_i(x),\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the Chebyshev polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    matrix ``V = chebvander(x, n)``, then ``np.dot(V, c)`` and\n    ``chebval(x, c)`` are the same up to roundoff.  This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of Chebyshev series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding Chebyshev polynomial.  The dtype will be the same as\n        the converted `x`.",
      "code": "def chebvander(x, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = T_i(x),\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the Chebyshev polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    matrix ``V = chebvander(x, n)``, then ``np.dot(V, c)`` and\n    ``chebval(x, c)`` are the same up to roundoff.  This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of Chebyshev series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding Chebyshev polynomial.  The dtype will be the same as\n        the converted `x`.\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg < 0:\n        raise ValueError(\"deg must be non-negative\")\n\n    x = np.array(x, copy=None, ndmin=1) + 0.0\n    dims = (ideg + 1,) + x.shape\n    dtyp = x.dtype\n    v = np.empty(dims, dtype=dtyp)\n    # Use forward recursion to generate the entries.\n    v[0] = x * 0 + 1\n    if ideg > 0:\n        x2 = 2 * x\n        v[1] = x\n        for i in range(2, ideg + 1):\n            v[i] = v[i - 1] * x2 - v[i - 2]\n    return np.moveaxis(v, 0, -1)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebvander2d",
      "category": "Chebyshev polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebvander2d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = T_i(x) * T_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the Chebyshev polynomials.\n\n    If ``V = chebvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``chebval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D Chebyshev\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    chebvander, chebvander3d, chebval2d, chebval3d",
      "code": "def chebvander2d(x, y, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = T_i(x) * T_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the Chebyshev polynomials.\n\n    If ``V = chebvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``chebval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D Chebyshev\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    chebvander, chebvander3d, chebval2d, chebval3d\n    \"\"\"\n    return pu._vander_nd_flat((chebvander, chebvander), (x, y), deg)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebvander3d",
      "category": "Chebyshev polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebvander3d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = T_i(x)*T_j(y)*T_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the Chebyshev polynomials.\n\n    If ``V = chebvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and ``np.dot(V, c.flat)`` and ``chebval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D Chebyshev\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    chebvander, chebvander3d, chebval2d, chebval3d",
      "code": "def chebvander3d(x, y, z, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = T_i(x)*T_j(y)*T_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the Chebyshev polynomials.\n\n    If ``V = chebvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and ``np.dot(V, c.flat)`` and ``chebval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D Chebyshev\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    chebvander, chebvander3d, chebval2d, chebval3d\n    \"\"\"\n    return pu._vander_nd_flat((chebvander, chebvander, chebvander), (x, y, z), deg)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebfit",
      "category": "Chebyshev polynomials",
      "description": "Least squares fit of Chebyshev series to data.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebfit.html",
      "doc": "Least squares fit of Chebyshev series to data.\n\n    Return the coefficients of a Chebyshev series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * T_1(x) + ... + c_n * T_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer,\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is ``len(x)*eps``, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Chebyshev coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full == False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.laguerre.lagfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.hermite_e.hermefit\n    chebval : Evaluates a Chebyshev series.\n    chebvander : Vandermonde matrix of Chebyshev series.\n    chebweight : Chebyshev weight function.\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Chebyshev series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where :math:`w_j` are the weights. This problem is solved by setting up\n    as the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Chebyshev series are usually better conditioned than fits\n    using power series, but much can depend on the distribution of the\n    sample points and the smoothness of the data. If the quality of the fit\n    is inadequate splines may be a good alternative.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------",
      "code": "def chebfit(x, y, deg, rcond=None, full=False, w=None):\n    \"\"\"\n    Least squares fit of Chebyshev series to data.\n\n    Return the coefficients of a Chebyshev series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * T_1(x) + ... + c_n * T_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer,\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is ``len(x)*eps``, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Chebyshev coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full == False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.laguerre.lagfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.hermite_e.hermefit\n    chebval : Evaluates a Chebyshev series.\n    chebvander : Vandermonde matrix of Chebyshev series.\n    chebweight : Chebyshev weight function.\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Chebyshev series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where :math:`w_j` are the weights. This problem is solved by setting up\n    as the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Chebyshev series are usually better conditioned than fits\n    using power series, but much can depend on the distribution of the\n    sample points and the smoothness of the data. If the quality of the fit\n    is inadequate splines may be a good alternative.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n\n    \"\"\"\n    return pu._fit(chebvander, x, y, deg, rcond, full, w)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebcompanion",
      "category": "Chebyshev polynomials",
      "description": "Return the scaled companion matrix of c.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebcompanion.html",
      "doc": "Return the scaled companion matrix of c.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `c` is a Chebyshev basis polynomial. This provides\n    better eigenvalue estimates than the unscaled case and for basis\n    polynomials the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Chebyshev series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).",
      "code": "def chebcompanion(c):\n    \"\"\"Return the scaled companion matrix of c.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `c` is a Chebyshev basis polynomial. This provides\n    better eigenvalue estimates than the unscaled case and for basis\n    polynomials the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Chebyshev series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) < 2:\n        raise ValueError('Series must have maximum degree of at least 1.')\n    if len(c) == 2:\n        return np.array([[-c[0] / c[1]]])\n\n    n = len(c) - 1\n    mat = np.zeros((n, n), dtype=c.dtype)\n    scl = np.array([1.] + [np.sqrt(.5)] * (n - 1))\n    top = mat.reshape(-1)[1::n + 1]\n    bot = mat.reshape(-1)[n::n + 1]\n    top[0] = np.sqrt(.5)\n    top[1:] = 1 / 2\n    bot[...] = top\n    mat[:, -1] -= (c[:-1] / c[-1]) * (scl / scl[-1]) * .5\n    return mat"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebroots",
      "category": "Chebyshev polynomials",
      "description": "Compute the roots of a Chebyshev series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebroots.html",
      "doc": "Compute the roots of a Chebyshev series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * T_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    The Chebyshev series basis polynomials aren't powers of `x` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as cheb\n    >>> cheb.chebroots((-1, 1,-1, 1)) # T3 - T2 + T1 - T0 has real roots\n    array([ -5.00000000e-01,   2.60860684e-17,   1.00000000e+00]) # may vary",
      "code": "def chebroots(c):\n    \"\"\"\n    Compute the roots of a Chebyshev series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * T_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    The Chebyshev series basis polynomials aren't powers of `x` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as cheb\n    >>> cheb.chebroots((-1, 1,-1, 1)) # T3 - T2 + T1 - T0 has real roots\n    array([ -5.00000000e-01,   2.60860684e-17,   1.00000000e+00]) # may vary\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) < 2:\n        return np.array([], dtype=c.dtype)\n    if len(c) == 2:\n        return np.array([-c[0] / c[1]])\n\n    # rotated companion matrix reduces error\n    m = chebcompanion(c)[::-1, ::-1]\n    r = la.eigvals(m)\n    r.sort()\n    return r"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebinterpolate",
      "category": "Chebyshev polynomials",
      "description": "Interpolate a function at the Chebyshev points of the first kind.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebinterpolate.html",
      "doc": "Interpolate a function at the Chebyshev points of the first kind.\n\n    Returns the Chebyshev series that interpolates `func` at the Chebyshev\n    points of the first kind in the interval [-1, 1]. The interpolating\n    series tends to a minmax approximation to `func` with increasing `deg`\n    if the function is continuous in the interval.\n\n    Parameters\n    ----------\n    func : function\n        The function to be approximated. It must be a function of a single\n        variable of the form ``f(x, a, b, c...)``, where ``a, b, c...`` are\n        extra arguments passed in the `args` parameter.\n    deg : int\n        Degree of the interpolating polynomial\n    args : tuple, optional\n        Extra arguments to be used in the function call. Default is no extra\n        arguments.\n\n    Returns\n    -------\n    coef : ndarray, shape (deg + 1,)\n        Chebyshev coefficients of the interpolating series ordered from low to\n        high.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as C\n    >>> C.chebinterpolate(lambda x: np.tanh(x) + 0.5, 8)\n    array([  5.00000000e-01,   8.11675684e-01,  -9.86864911e-17,\n            -5.42457905e-02,  -2.71387850e-16,   4.51658839e-03,\n             2.46716228e-17,  -3.79694221e-04,  -3.26899002e-16])\n\n    Notes\n    -----\n    The Chebyshev polynomials used in the interpolation are orthogonal when\n    sampled at the Chebyshev points of the first kind. If it is desired to\n    constrain some of the coefficients they can simply be set to the desired\n    value after the interpolation, no new interpolation or fit is needed. This\n    is especially useful if it is known apriori that some of coefficients are\n    zero. For instance, if the function is even then the coefficients of the\n    terms of odd degree in the result can be set to zero.",
      "code": "def chebinterpolate(func, deg, args=()):\n    \"\"\"Interpolate a function at the Chebyshev points of the first kind.\n\n    Returns the Chebyshev series that interpolates `func` at the Chebyshev\n    points of the first kind in the interval [-1, 1]. The interpolating\n    series tends to a minmax approximation to `func` with increasing `deg`\n    if the function is continuous in the interval.\n\n    Parameters\n    ----------\n    func : function\n        The function to be approximated. It must be a function of a single\n        variable of the form ``f(x, a, b, c...)``, where ``a, b, c...`` are\n        extra arguments passed in the `args` parameter.\n    deg : int\n        Degree of the interpolating polynomial\n    args : tuple, optional\n        Extra arguments to be used in the function call. Default is no extra\n        arguments.\n\n    Returns\n    -------\n    coef : ndarray, shape (deg + 1,)\n        Chebyshev coefficients of the interpolating series ordered from low to\n        high.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as C\n    >>> C.chebinterpolate(lambda x: np.tanh(x) + 0.5, 8)\n    array([  5.00000000e-01,   8.11675684e-01,  -9.86864911e-17,\n            -5.42457905e-02,  -2.71387850e-16,   4.51658839e-03,\n             2.46716228e-17,  -3.79694221e-04,  -3.26899002e-16])\n\n    Notes\n    -----\n    The Chebyshev polynomials used in the interpolation are orthogonal when\n    sampled at the Chebyshev points of the first kind. If it is desired to\n    constrain some of the coefficients they can simply be set to the desired\n    value after the interpolation, no new interpolation or fit is needed. This\n    is especially useful if it is known apriori that some of coefficients are\n    zero. For instance, if the function is even then the coefficients of the\n    terms of odd degree in the result can be set to zero.\n\n    \"\"\"\n    deg = np.asarray(deg)\n\n    # check arguments.\n    if deg.ndim > 0 or deg.dtype.kind not in 'iu' or deg.size == 0:\n        raise TypeError(\"deg must be an int\")\n    if deg < 0:\n        raise ValueError(\"expected deg >= 0\")\n\n    order = deg + 1\n    xcheb = chebpts1(order)\n    yfunc = func(xcheb, *args)\n    m = chebvander(xcheb, deg)\n    c = np.dot(m.T, yfunc)\n    c[0] /= order\n    c[1:] /= 0.5 * order\n\n    return c"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebgauss",
      "category": "Chebyshev polynomials",
      "description": "Gauss-Chebyshev quadrature.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebgauss.html",
      "doc": "Gauss-Chebyshev quadrature.\n\n    Computes the sample points and weights for Gauss-Chebyshev quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[-1, 1]` with\n    the weight function :math:`f(x) = 1/\\\\sqrt{1 - x^2}`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100, higher degrees may\n    be problematic. For Gauss-Chebyshev there are closed form solutions for\n    the sample points and weights. If n = `deg`, then\n\n    .. math:: x_i = \\\\cos(\\\\pi (2 i - 1) / (2 n))\n\n    .. math:: w_i = \\\\pi / n",
      "code": "def chebgauss(deg):\n    \"\"\"\n    Gauss-Chebyshev quadrature.\n\n    Computes the sample points and weights for Gauss-Chebyshev quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[-1, 1]` with\n    the weight function :math:`f(x) = 1/\\\\sqrt{1 - x^2}`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100, higher degrees may\n    be problematic. For Gauss-Chebyshev there are closed form solutions for\n    the sample points and weights. If n = `deg`, then\n\n    .. math:: x_i = \\\\cos(\\\\pi (2 i - 1) / (2 n))\n\n    .. math:: w_i = \\\\pi / n\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg <= 0:\n        raise ValueError(\"deg must be a positive integer\")\n\n    x = np.cos(np.pi * np.arange(1, 2 * ideg, 2) / (2.0 * ideg))\n    w = np.ones(ideg) * (np.pi / ideg)\n\n    return x, w"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebweight",
      "category": "Chebyshev polynomials",
      "description": "The weight function of the Chebyshev polynomials.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebweight.html",
      "doc": "The weight function of the Chebyshev polynomials.\n\n    The weight function is :math:`1/\\\\sqrt{1 - x^2}` and the interval of\n    integration is :math:`[-1, 1]`. The Chebyshev polynomials are\n    orthogonal, but not normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.",
      "code": "def chebweight(x):\n    \"\"\"\n    The weight function of the Chebyshev polynomials.\n\n    The weight function is :math:`1/\\\\sqrt{1 - x^2}` and the interval of\n    integration is :math:`[-1, 1]`. The Chebyshev polynomials are\n    orthogonal, but not normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n    \"\"\"\n    w = 1. / (np.sqrt(1. + x) * np.sqrt(1. - x))\n    return w"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebpts1",
      "category": "Chebyshev polynomials",
      "description": "Chebyshev points of the first kind.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebpts1.html",
      "doc": "Chebyshev points of the first kind.\n\n    The Chebyshev points of the first kind are the points ``cos(x)``,\n    where ``x = [pi*(k + .5)/npts for k in range(npts)]``.\n\n    Parameters\n    ----------\n    npts : int\n        Number of sample points desired.\n\n    Returns\n    -------\n    pts : ndarray\n        The Chebyshev points of the first kind.\n\n    See Also\n    --------\n    chebpts2",
      "code": "def chebpts1(npts):\n    \"\"\"\n    Chebyshev points of the first kind.\n\n    The Chebyshev points of the first kind are the points ``cos(x)``,\n    where ``x = [pi*(k + .5)/npts for k in range(npts)]``.\n\n    Parameters\n    ----------\n    npts : int\n        Number of sample points desired.\n\n    Returns\n    -------\n    pts : ndarray\n        The Chebyshev points of the first kind.\n\n    See Also\n    --------\n    chebpts2\n    \"\"\"\n    _npts = int(npts)\n    if _npts != npts:\n        raise ValueError(\"npts must be integer\")\n    if _npts < 1:\n        raise ValueError(\"npts must be >= 1\")\n\n    x = 0.5 * np.pi / _npts * np.arange(-_npts + 1, _npts + 1, 2)\n    return np.sin(x)"
    },
    {
      "name": "numpy.polynomial.chebyshev.chebpts2",
      "category": "Chebyshev polynomials",
      "description": "Chebyshev points of the second kind.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.chebpts2.html",
      "doc": "Chebyshev points of the second kind.\n\n    The Chebyshev points of the second kind are the points ``cos(x)``,\n    where ``x = [pi*k/(npts - 1) for k in range(npts)]`` sorted in ascending\n    order.\n\n    Parameters\n    ----------\n    npts : int\n        Number of sample points desired.\n\n    Returns\n    -------\n    pts : ndarray\n        The Chebyshev points of the second kind.",
      "code": "def chebpts2(npts):\n    \"\"\"\n    Chebyshev points of the second kind.\n\n    The Chebyshev points of the second kind are the points ``cos(x)``,\n    where ``x = [pi*k/(npts - 1) for k in range(npts)]`` sorted in ascending\n    order.\n\n    Parameters\n    ----------\n    npts : int\n        Number of sample points desired.\n\n    Returns\n    -------\n    pts : ndarray\n        The Chebyshev points of the second kind.\n    \"\"\"\n    _npts = int(npts)\n    if _npts != npts:\n        raise ValueError(\"npts must be integer\")\n    if _npts < 2:\n        raise ValueError(\"npts must be >= 2\")\n\n    x = np.linspace(-np.pi, 0, _npts)\n    return np.cos(x)\n\n\n#\n# Chebyshev series class\n#"
    },
    {
      "name": "numpy.polynomial.chebyshev.Chebyshev",
      "category": "Chebyshev polynomials",
      "description": "A Chebyshev series class.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.chebyshev.Chebyshev.html",
      "doc": "A Chebyshev series class.\n\n    The Chebyshev class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Chebyshev coefficients in order of increasing degree, i.e.,\n        ``(1, 2, 3)`` gives ``1*T_0(x) + 2*T_1(x) + 3*T_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24",
      "code": "class Chebyshev(ABCPolyBase):\n    \"\"\"A Chebyshev series class.\n\n    The Chebyshev class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Chebyshev coefficients in order of increasing degree, i.e.,\n        ``(1, 2, 3)`` gives ``1*T_0(x) + 2*T_1(x) + 3*T_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24\n\n    \"\"\"",
      "type": "class"
    },
    {
      "name": "numpy.polynomial.legendre.poly2leg",
      "category": "Legendre polynomials",
      "description": "Convert a polynomial to a Legendre series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.poly2leg.html",
      "doc": "Convert a polynomial to a Legendre series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Legendre series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Legendre\n        series.\n\n    See Also\n    --------\n    leg2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy import polynomial as P\n    >>> p = P.Polynomial(np.arange(4))\n    >>> p\n    Polynomial([0.,  1.,  2.,  3.], domain=[-1.,  1.], window=[-1.,  1.], ...\n    >>> c = P.Legendre(P.legendre.poly2leg(p.coef))\n    >>> c\n    Legendre([ 1.  ,  3.25,  1.  ,  0.75], domain=[-1,  1], window=[-1,  1]) # may vary",
      "code": "def poly2leg(pol):\n    \"\"\"\n    Convert a polynomial to a Legendre series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Legendre series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Legendre\n        series.\n\n    See Also\n    --------\n    leg2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy import polynomial as P\n    >>> p = P.Polynomial(np.arange(4))\n    >>> p\n    Polynomial([0.,  1.,  2.,  3.], domain=[-1.,  1.], window=[-1.,  1.], ...\n    >>> c = P.Legendre(P.legendre.poly2leg(p.coef))\n    >>> c\n    Legendre([ 1.  ,  3.25,  1.  ,  0.75], domain=[-1,  1], window=[-1,  1]) # may vary\n\n    \"\"\"\n    [pol] = pu.as_series([pol])\n    deg = len(pol) - 1\n    res = 0\n    for i in range(deg, -1, -1):\n        res = legadd(legmulx(res), pol[i])\n    return res"
    },
    {
      "name": "numpy.polynomial.legendre.leg2poly",
      "category": "Legendre polynomials",
      "description": "Convert a Legendre series to a polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.leg2poly.html",
      "doc": "Convert a Legendre series to a polynomial.\n\n    Convert an array representing the coefficients of a Legendre series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Legendre series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2leg\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> c = P.Legendre(range(4))\n    >>> c\n    Legendre([0., 1., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n    >>> p = c.convert(kind=P.Polynomial)\n    >>> p\n    Polynomial([-1. , -3.5,  3. ,  7.5], domain=[-1.,  1.], window=[-1., ...\n    >>> P.legendre.leg2poly(range(4))\n    array([-1. , -3.5,  3. ,  7.5])",
      "code": "def leg2poly(c):\n    \"\"\"\n    Convert a Legendre series to a polynomial.\n\n    Convert an array representing the coefficients of a Legendre series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Legendre series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2leg\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> c = P.Legendre(range(4))\n    >>> c\n    Legendre([0., 1., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n    >>> p = c.convert(kind=P.Polynomial)\n    >>> p\n    Polynomial([-1. , -3.5,  3. ,  7.5], domain=[-1.,  1.], window=[-1., ...\n    >>> P.legendre.leg2poly(range(4))\n    array([-1. , -3.5,  3. ,  7.5])\n\n\n    \"\"\"\n    from .polynomial import polyadd, polymulx, polysub\n\n    [c] = pu.as_series([c])\n    n = len(c)\n    if n < 3:\n        return c\n    else:\n        c0 = c[-2]\n        c1 = c[-1]\n        # i is the current degree of c1\n        for i in range(n - 1, 1, -1):\n            tmp = c0\n            c0 = polysub(c[i - 2], (c1 * (i - 1)) / i)\n            c1 = polyadd(tmp, (polymulx(c1) * (2 * i - 1)) / i)\n        return polyadd(c0, polymulx(c1))\n\n\n#\n# These are constant arrays are of integer type so as to be compatible\n# with the widest range of other types, such as Decimal.\n#\n\n# Legendre\nlegdomain = np.array([-1., 1.])\n\n# Legendre coefficients representing zero.\nlegzero = np.array([0])\n\n# Legendre coefficients representing one.\nlegone = np.array([1])\n\n# Legendre coefficients representing the identity x.\nlegx = np.array([0, 1])"
    },
    {
      "name": "numpy.polynomial.legendre.legline",
      "category": "Legendre polynomials",
      "description": "Legendre series whose graph is a straight line.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legline.html",
      "doc": "Legendre series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Legendre series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as L\n    >>> L.legline(3,2)\n    array([3, 2])\n    >>> L.legval(-3, L.legline(3,2)) # should be -3\n    -3.0",
      "code": "def legline(off, scl):\n    \"\"\"\n    Legendre series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Legendre series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as L\n    >>> L.legline(3,2)\n    array([3, 2])\n    >>> L.legval(-3, L.legline(3,2)) # should be -3\n    -3.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl])\n    else:\n        return np.array([off])"
    },
    {
      "name": "numpy.polynomial.legendre.legfromroots",
      "category": "Legendre polynomials",
      "description": "Generate a Legendre series with given roots.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legfromroots.html",
      "doc": "Generate a Legendre series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in Legendre form, where the :math:`r_n` are the roots specified in `roots`.\n    If a zero has multiplicity n, then it must appear in `roots` n times.\n    For instance, if 2 is a root of multiplicity three and 3 is a root of\n    multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The\n    roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * L_1(x) + ... +  c_n * L_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in Legendre form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.chebyshev.chebfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as L\n    >>> L.legfromroots((-1,0,1)) # x^3 - x relative to the standard basis\n    array([ 0. , -0.4,  0. ,  0.4])\n    >>> j = complex(0,1)\n    >>> L.legfromroots((-j,j)) # x^2 + 1 relative to the standard basis\n    array([ 1.33333333+0.j,  0.00000000+0.j,  0.66666667+0.j]) # may vary",
      "code": "def legfromroots(roots):\n    \"\"\"\n    Generate a Legendre series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in Legendre form, where the :math:`r_n` are the roots specified in `roots`.\n    If a zero has multiplicity n, then it must appear in `roots` n times.\n    For instance, if 2 is a root of multiplicity three and 3 is a root of\n    multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The\n    roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * L_1(x) + ... +  c_n * L_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in Legendre form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.chebyshev.chebfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as L\n    >>> L.legfromroots((-1,0,1)) # x^3 - x relative to the standard basis\n    array([ 0. , -0.4,  0. ,  0.4])\n    >>> j = complex(0,1)\n    >>> L.legfromroots((-j,j)) # x^2 + 1 relative to the standard basis\n    array([ 1.33333333+0.j,  0.00000000+0.j,  0.66666667+0.j]) # may vary\n\n    \"\"\"\n    return pu._fromroots(legline, legmul, roots)"
    },
    {
      "name": "numpy.polynomial.legendre.legadd",
      "category": "Legendre polynomials",
      "description": "Add one Legendre series to another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legadd.html",
      "doc": "Add one Legendre series to another.\n\n    Returns the sum of two Legendre series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Legendre series of their sum.\n\n    See Also\n    --------\n    legsub, legmulx, legmul, legdiv, legpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Legendre series\n    is a Legendre series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> L.legadd(c1,c2)\n    array([4.,  4.,  4.])",
      "code": "def legadd(c1, c2):\n    \"\"\"\n    Add one Legendre series to another.\n\n    Returns the sum of two Legendre series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Legendre series of their sum.\n\n    See Also\n    --------\n    legsub, legmulx, legmul, legdiv, legpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Legendre series\n    is a Legendre series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> L.legadd(c1,c2)\n    array([4.,  4.,  4.])\n\n    \"\"\"\n    return pu._add(c1, c2)"
    },
    {
      "name": "numpy.polynomial.legendre.legsub",
      "category": "Legendre polynomials",
      "description": "Subtract one Legendre series from another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legsub.html",
      "doc": "Subtract one Legendre series from another.\n\n    Returns the difference of two Legendre series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Legendre series coefficients representing their difference.\n\n    See Also\n    --------\n    legadd, legmulx, legmul, legdiv, legpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Legendre\n    series is a Legendre series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> L.legsub(c1,c2)\n    array([-2.,  0.,  2.])\n    >>> L.legsub(c2,c1) # -C.legsub(c1,c2)\n    array([ 2.,  0., -2.])",
      "code": "def legsub(c1, c2):\n    \"\"\"\n    Subtract one Legendre series from another.\n\n    Returns the difference of two Legendre series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Legendre series coefficients representing their difference.\n\n    See Also\n    --------\n    legadd, legmulx, legmul, legdiv, legpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Legendre\n    series is a Legendre series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> L.legsub(c1,c2)\n    array([-2.,  0.,  2.])\n    >>> L.legsub(c2,c1) # -C.legsub(c1,c2)\n    array([ 2.,  0., -2.])\n\n    \"\"\"\n    return pu._sub(c1, c2)"
    },
    {
      "name": "numpy.polynomial.legendre.legmulx",
      "category": "Legendre polynomials",
      "description": "Multiply a Legendre series by x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legmulx.html",
      "doc": "Multiply a Legendre series by x.\n\n    Multiply the Legendre series `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    legadd, legsub, legmul, legdiv, legpow\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Legendre\n    polynomials in the form\n\n    .. math::\n\n      xP_i(x) = ((i + 1)*P_{i + 1}(x) + i*P_{i - 1}(x))/(2i + 1)\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> L.legmulx([1,2,3])\n    array([ 0.66666667, 2.2, 1.33333333, 1.8]) # may vary",
      "code": "def legmulx(c):\n    \"\"\"Multiply a Legendre series by x.\n\n    Multiply the Legendre series `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    legadd, legsub, legmul, legdiv, legpow\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Legendre\n    polynomials in the form\n\n    .. math::\n\n      xP_i(x) = ((i + 1)*P_{i + 1}(x) + i*P_{i - 1}(x))/(2i + 1)\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> L.legmulx([1,2,3])\n    array([ 0.66666667, 2.2, 1.33333333, 1.8]) # may vary\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    # The zero series needs special treatment\n    if len(c) == 1 and c[0] == 0:\n        return c\n\n    prd = np.empty(len(c) + 1, dtype=c.dtype)\n    prd[0] = c[0] * 0\n    prd[1] = c[0]\n    for i in range(1, len(c)):\n        j = i + 1\n        k = i - 1\n        s = i + j\n        prd[j] = (c[i] * j) / s\n        prd[k] += (c[i] * i) / s\n    return prd"
    },
    {
      "name": "numpy.polynomial.legendre.legmul",
      "category": "Legendre polynomials",
      "description": "Multiply one Legendre series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legmul.html",
      "doc": "Multiply one Legendre series by another.\n\n    Returns the product of two Legendre series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Legendre series coefficients representing their product.\n\n    See Also\n    --------\n    legadd, legsub, legmulx, legdiv, legpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Legendre polynomial basis set.  Thus, to express\n    the product as a Legendre series, it is necessary to \"reproject\" the\n    product onto said basis set, which may produce \"unintuitive\" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2)\n    >>> L.legmul(c1,c2) # multiplication requires \"reprojection\"\n    array([  4.33333333,  10.4       ,  11.66666667,   3.6       ]) # may vary",
      "code": "def legmul(c1, c2):\n    \"\"\"\n    Multiply one Legendre series by another.\n\n    Returns the product of two Legendre series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Legendre series coefficients representing their product.\n\n    See Also\n    --------\n    legadd, legsub, legmulx, legdiv, legpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Legendre polynomial basis set.  Thus, to express\n    the product as a Legendre series, it is necessary to \"reproject\" the\n    product onto said basis set, which may produce \"unintuitive\" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2)\n    >>> L.legmul(c1,c2) # multiplication requires \"reprojection\"\n    array([  4.33333333,  10.4       ,  11.66666667,   3.6       ]) # may vary\n\n    \"\"\"\n    # s1, s2 are trimmed copies\n    [c1, c2] = pu.as_series([c1, c2])\n\n    if len(c1) > len(c2):\n        c = c2\n        xs = c1\n    else:\n        c = c1\n        xs = c2\n\n    if len(c) == 1:\n        c0 = c[0] * xs\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0] * xs\n        c1 = c[1] * xs\n    else:\n        nd = len(c)\n        c0 = c[-2] * xs\n        c1 = c[-1] * xs\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = legsub(c[-i] * xs, (c1 * (nd - 1)) / nd)\n            c1 = legadd(tmp, (legmulx(c1) * (2 * nd - 1)) / nd)\n    return legadd(c0, legmulx(c1))"
    },
    {
      "name": "numpy.polynomial.legendre.legdiv",
      "category": "Legendre polynomials",
      "description": "Divide one Legendre series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legdiv.html",
      "doc": "Divide one Legendre series by another.\n\n    Returns the quotient-with-remainder of two Legendre series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    quo, rem : ndarrays\n        Of Legendre series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    legadd, legsub, legmulx, legmul, legpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Legendre series by another\n    results in quotient and remainder terms that are not in the Legendre\n    polynomial basis set.  Thus, to express these results as a Legendre\n    series, it is necessary to \"reproject\" the results onto the Legendre\n    basis set, which may produce \"unintuitive\" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> L.legdiv(c1,c2) # quotient \"intuitive,\" remainder not\n    (array([3.]), array([-8., -4.]))\n    >>> c2 = (0,1,2,3)\n    >>> L.legdiv(c2,c1) # neither \"intuitive\"\n    (array([-0.07407407,  1.66666667]), array([-1.03703704, -2.51851852])) # may vary",
      "code": "def legdiv(c1, c2):\n    \"\"\"\n    Divide one Legendre series by another.\n\n    Returns the quotient-with-remainder of two Legendre series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    quo, rem : ndarrays\n        Of Legendre series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    legadd, legsub, legmulx, legmul, legpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Legendre series by another\n    results in quotient and remainder terms that are not in the Legendre\n    polynomial basis set.  Thus, to express these results as a Legendre\n    series, it is necessary to \"reproject\" the results onto the Legendre\n    basis set, which may produce \"unintuitive\" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> L.legdiv(c1,c2) # quotient \"intuitive,\" remainder not\n    (array([3.]), array([-8., -4.]))\n    >>> c2 = (0,1,2,3)\n    >>> L.legdiv(c2,c1) # neither \"intuitive\"\n    (array([-0.07407407,  1.66666667]), array([-1.03703704, -2.51851852])) # may vary\n\n    \"\"\"\n    return pu._div(legmul, c1, c2)"
    },
    {
      "name": "numpy.polynomial.legendre.legpow",
      "category": "Legendre polynomials",
      "description": "Raise a Legendre series to a power.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legpow.html",
      "doc": "Raise a Legendre series to a power.\n\n    Returns the Legendre series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Legendre series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Legendre series of power.\n\n    See Also\n    --------\n    legadd, legsub, legmulx, legmul, legdiv",
      "code": "def legpow(c, pow, maxpower=16):\n    \"\"\"Raise a Legendre series to a power.\n\n    Returns the Legendre series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Legendre series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Legendre series of power.\n\n    See Also\n    --------\n    legadd, legsub, legmulx, legmul, legdiv\n\n    \"\"\"\n    return pu._pow(legmul, c, pow, maxpower)"
    },
    {
      "name": "numpy.polynomial.legendre.legder",
      "category": "Legendre polynomials",
      "description": "Differentiate a Legendre series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legder.html",
      "doc": "Differentiate a Legendre series.\n\n    Returns the Legendre series coefficients `c` differentiated `m` times\n    along `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*L_0 + 2*L_1 + 3*L_2``\n    while [[1,2],[1,2]] represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) +\n    2*L_0(x)*L_1(y) + 2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Legendre series coefficients. If c is multidimensional the\n        different axis correspond to different variables with the degree in\n        each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Legendre series of the derivative.\n\n    See Also\n    --------\n    legint\n\n    Notes\n    -----\n    In general, the result of differentiating a Legendre series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be \"unintuitive,\" albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c = (1,2,3,4)\n    >>> L.legder(c)\n    array([  6.,   9.,  20.])\n    >>> L.legder(c, 3)\n    array([60.])\n    >>> L.legder(c, scl=-1)\n    array([ -6.,  -9., -20.])\n    >>> L.legder(c, 2,-1)\n    array([  9.,  60.])",
      "code": "def legder(c, m=1, scl=1, axis=0):\n    \"\"\"\n    Differentiate a Legendre series.\n\n    Returns the Legendre series coefficients `c` differentiated `m` times\n    along `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*L_0 + 2*L_1 + 3*L_2``\n    while [[1,2],[1,2]] represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) +\n    2*L_0(x)*L_1(y) + 2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Legendre series coefficients. If c is multidimensional the\n        different axis correspond to different variables with the degree in\n        each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Legendre series of the derivative.\n\n    See Also\n    --------\n    legint\n\n    Notes\n    -----\n    In general, the result of differentiating a Legendre series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be \"unintuitive,\" albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c = (1,2,3,4)\n    >>> L.legder(c)\n    array([  6.,   9.,  20.])\n    >>> L.legder(c, 3)\n    array([60.])\n    >>> L.legder(c, scl=-1)\n    array([ -6.,  -9., -20.])\n    >>> L.legder(c, 2,-1)\n    array([  9.,  60.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    cnt = pu._as_int(m, \"the order of derivation\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of derivation must be non-negative\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    n = len(c)\n    if cnt >= n:\n        c = c[:1] * 0\n    else:\n        for i in range(cnt):\n            n = n - 1\n            c *= scl\n            der = np.empty((n,) + c.shape[1:], dtype=c.dtype)\n            for j in range(n, 2, -1):\n                der[j - 1] = (2 * j - 1) * c[j]\n                c[j - 2] += c[j]\n            if n > 1:\n                der[1] = 3 * c[2]\n            der[0] = c[1]\n            c = der\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.legendre.legint",
      "category": "Legendre polynomials",
      "description": "Integrate a Legendre series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legint.html",
      "doc": "Integrate a Legendre series.\n\n    Returns the Legendre series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``L_0 + 2*L_1 + 3*L_2`` while [[1,2],[1,2]]\n    represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) + 2*L_0(x)*L_1(y) +\n    2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Legendre series coefficients. If c is multidimensional the\n        different axis correspond to different variables with the degree in\n        each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Legendre series coefficient array of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    legder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c = (1,2,3)\n    >>> L.legint(c)\n    array([ 0.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary\n    >>> L.legint(c, 3)\n    array([  1.66666667e-02,  -1.78571429e-02,   4.76190476e-02, # may vary\n             -1.73472348e-18,   1.90476190e-02,   9.52380952e-03])\n    >>> L.legint(c, k=3)\n     array([ 3.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary\n    >>> L.legint(c, lbnd=-2)\n    array([ 7.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary\n    >>> L.legint(c, scl=2)\n    array([ 0.66666667,  0.8       ,  1.33333333,  1.2       ]) # may vary",
      "code": "def legint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n    \"\"\"\n    Integrate a Legendre series.\n\n    Returns the Legendre series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``L_0 + 2*L_1 + 3*L_2`` while [[1,2],[1,2]]\n    represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) + 2*L_0(x)*L_1(y) +\n    2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Legendre series coefficients. If c is multidimensional the\n        different axis correspond to different variables with the degree in\n        each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Legendre series coefficient array of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    legder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c = (1,2,3)\n    >>> L.legint(c)\n    array([ 0.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary\n    >>> L.legint(c, 3)\n    array([  1.66666667e-02,  -1.78571429e-02,   4.76190476e-02, # may vary\n             -1.73472348e-18,   1.90476190e-02,   9.52380952e-03])\n    >>> L.legint(c, k=3)\n     array([ 3.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary\n    >>> L.legint(c, lbnd=-2)\n    array([ 7.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary\n    >>> L.legint(c, scl=2)\n    array([ 0.66666667,  0.8       ,  1.33333333,  1.2       ]) # may vary\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if not np.iterable(k):\n        k = [k]\n    cnt = pu._as_int(m, \"the order of integration\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of integration must be non-negative\")\n    if len(k) > cnt:\n        raise ValueError(\"Too many integration constants\")\n    if np.ndim(lbnd) != 0:\n        raise ValueError(\"lbnd must be a scalar.\")\n    if np.ndim(scl) != 0:\n        raise ValueError(\"scl must be a scalar.\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    k = list(k) + [0] * (cnt - len(k))\n    for i in range(cnt):\n        n = len(c)\n        c *= scl\n        if n == 1 and np.all(c[0] == 0):\n            c[0] += k[i]\n        else:\n            tmp = np.empty((n + 1,) + c.shape[1:], dtype=c.dtype)\n            tmp[0] = c[0] * 0\n            tmp[1] = c[0]\n            if n > 1:\n                tmp[2] = c[1] / 3\n            for j in range(2, n):\n                t = c[j] / (2 * j + 1)\n                tmp[j + 1] = t\n                tmp[j - 1] -= t\n            tmp[0] += k[i] - legval(lbnd, tmp)\n            c = tmp\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.legendre.legval",
      "category": "Legendre polynomials",
      "description": "Evaluate a Legendre series at points x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legval.html",
      "doc": "Evaluate a Legendre series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * L_0(x) + c_1 * L_1(x) + ... + c_n * L_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    legval2d, leggrid2d, legval3d, leggrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.",
      "code": "def legval(x, c, tensor=True):\n    \"\"\"\n    Evaluate a Legendre series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * L_0(x) + c_1 * L_1(x) + ... + c_n * L_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    legval2d, leggrid2d, legval3d, leggrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        nd = len(c)\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = c[-i] - c1 * ((nd - 1) / nd)\n            c1 = tmp + c1 * x * ((2 * nd - 1) / nd)\n    return c0 + c1 * x"
    },
    {
      "name": "numpy.polynomial.legendre.legval2d",
      "category": "Legendre polynomials",
      "description": "Evaluate a 2-D Legendre series at points (x, y).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legval2d.html",
      "doc": "Evaluate a 2-D Legendre series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * L_i(x) * L_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Legendre series at points formed\n        from pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    legval, leggrid2d, legval3d, leggrid3d",
      "code": "def legval2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D Legendre series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * L_i(x) * L_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Legendre series at points formed\n        from pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    legval, leggrid2d, legval3d, leggrid3d\n    \"\"\"\n    return pu._valnd(legval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.legendre.leggrid2d",
      "category": "Legendre polynomials",
      "description": "Evaluate a 2-D Legendre series on the Cartesian product of x and y.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.leggrid2d.html",
      "doc": "Evaluate a 2-D Legendre series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape + y.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j is contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Chebyshev series at points in the\n        Cartesian product of `x` and `y`.\n\n    See Also\n    --------\n    legval, legval2d, legval3d, leggrid3d",
      "code": "def leggrid2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D Legendre series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape + y.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j is contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Chebyshev series at points in the\n        Cartesian product of `x` and `y`.\n\n    See Also\n    --------\n    legval, legval2d, legval3d, leggrid3d\n    \"\"\"\n    return pu._gridnd(legval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.legendre.legval3d",
      "category": "Legendre polynomials",
      "description": "Evaluate a 3-D Legendre series at points (x, y, z).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legval3d.html",
      "doc": "Evaluate a 3-D Legendre series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * L_i(x) * L_j(y) * L_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    legval, legval2d, leggrid2d, leggrid3d",
      "code": "def legval3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D Legendre series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * L_i(x) * L_j(y) * L_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    legval, legval2d, leggrid2d, leggrid3d\n    \"\"\"\n    return pu._valnd(legval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.legendre.leggrid3d",
      "category": "Legendre polynomials",
      "description": "Evaluate a 3-D Legendre series on the Cartesian product of x, y, and z.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.leggrid3d.html",
      "doc": "Evaluate a 3-D Legendre series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * L_i(a) * L_j(b) * L_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    legval, legval2d, leggrid2d, legval3d",
      "code": "def leggrid3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D Legendre series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * L_i(a) * L_j(b) * L_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    legval, legval2d, leggrid2d, legval3d\n    \"\"\"\n    return pu._gridnd(legval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.legendre.legvander",
      "category": "Legendre polynomials",
      "description": "Pseudo-Vandermonde matrix of given degree.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legvander.html",
      "doc": "Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = L_i(x)\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the Legendre polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = legvander(x, n)``, then ``np.dot(V, c)`` and\n    ``legval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of Legendre series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo-Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding Legendre polynomial.  The dtype will be the same as\n        the converted `x`.",
      "code": "def legvander(x, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = L_i(x)\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the Legendre polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = legvander(x, n)``, then ``np.dot(V, c)`` and\n    ``legval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of Legendre series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo-Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding Legendre polynomial.  The dtype will be the same as\n        the converted `x`.\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg < 0:\n        raise ValueError(\"deg must be non-negative\")\n\n    x = np.array(x, copy=None, ndmin=1) + 0.0\n    dims = (ideg + 1,) + x.shape\n    dtyp = x.dtype\n    v = np.empty(dims, dtype=dtyp)\n    # Use forward recursion to generate the entries. This is not as accurate\n    # as reverse recursion in this application but it is more efficient.\n    v[0] = x * 0 + 1\n    if ideg > 0:\n        v[1] = x\n        for i in range(2, ideg + 1):\n            v[i] = (v[i - 1] * x * (2 * i - 1) - v[i - 2] * (i - 1)) / i\n    return np.moveaxis(v, 0, -1)"
    },
    {
      "name": "numpy.polynomial.legendre.legvander2d",
      "category": "Legendre polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legvander2d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the Legendre polynomials.\n\n    If ``V = legvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``legval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D Legendre\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    legvander, legvander3d, legval2d, legval3d",
      "code": "def legvander2d(x, y, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the Legendre polynomials.\n\n    If ``V = legvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``legval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D Legendre\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    legvander, legvander3d, legval2d, legval3d\n    \"\"\"\n    return pu._vander_nd_flat((legvander, legvander), (x, y), deg)"
    },
    {
      "name": "numpy.polynomial.legendre.legvander3d",
      "category": "Legendre polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legvander3d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = L_i(x)*L_j(y)*L_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the Legendre polynomials.\n\n    If ``V = legvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and ``np.dot(V, c.flat)`` and ``legval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D Legendre\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    legvander, legvander3d, legval2d, legval3d",
      "code": "def legvander3d(x, y, z, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = L_i(x)*L_j(y)*L_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the Legendre polynomials.\n\n    If ``V = legvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and ``np.dot(V, c.flat)`` and ``legval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D Legendre\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    legvander, legvander3d, legval2d, legval3d\n    \"\"\"\n    return pu._vander_nd_flat((legvander, legvander, legvander), (x, y, z), deg)"
    },
    {
      "name": "numpy.polynomial.legendre.legfit",
      "category": "Legendre polynomials",
      "description": "Least squares fit of Legendre series to data.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legfit.html",
      "doc": "Least squares fit of Legendre series to data.\n\n    Return the coefficients of a Legendre series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * L_1(x) + ... + c_n * L_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Legendre coefficients ordered from low to high. If `y` was\n        2-D, the coefficients for the data in column k of `y` are in\n        column `k`. If `deg` is specified as a list, coefficients for\n        terms not included in the fit are set equal to zero in the\n        returned `coef`.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full == False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.laguerre.lagfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.hermite_e.hermefit\n    legval : Evaluates a Legendre series.\n    legvander : Vandermonde matrix of Legendre series.\n    legweight : Legendre weight function (= 1).\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Legendre series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where :math:`w_j` are the weights. This problem is solved by setting up\n    as the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Legendre series are usually better conditioned than fits\n    using power series, but much can depend on the distribution of the\n    sample points and the smoothness of the data. If the quality of the fit\n    is inadequate splines may be a good alternative.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------",
      "code": "def legfit(x, y, deg, rcond=None, full=False, w=None):\n    \"\"\"\n    Least squares fit of Legendre series to data.\n\n    Return the coefficients of a Legendre series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * L_1(x) + ... + c_n * L_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Legendre coefficients ordered from low to high. If `y` was\n        2-D, the coefficients for the data in column k of `y` are in\n        column `k`. If `deg` is specified as a list, coefficients for\n        terms not included in the fit are set equal to zero in the\n        returned `coef`.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full == False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.laguerre.lagfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.hermite_e.hermefit\n    legval : Evaluates a Legendre series.\n    legvander : Vandermonde matrix of Legendre series.\n    legweight : Legendre weight function (= 1).\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Legendre series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where :math:`w_j` are the weights. This problem is solved by setting up\n    as the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Legendre series are usually better conditioned than fits\n    using power series, but much can depend on the distribution of the\n    sample points and the smoothness of the data. If the quality of the fit\n    is inadequate splines may be a good alternative.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n\n    \"\"\"\n    return pu._fit(legvander, x, y, deg, rcond, full, w)"
    },
    {
      "name": "numpy.polynomial.legendre.legcompanion",
      "category": "Legendre polynomials",
      "description": "Return the scaled companion matrix of c.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legcompanion.html",
      "doc": "Return the scaled companion matrix of c.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `c` is an Legendre basis polynomial. This provides\n    better eigenvalue estimates than the unscaled case and for basis\n    polynomials the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Legendre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).",
      "code": "def legcompanion(c):\n    \"\"\"Return the scaled companion matrix of c.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `c` is an Legendre basis polynomial. This provides\n    better eigenvalue estimates than the unscaled case and for basis\n    polynomials the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Legendre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) < 2:\n        raise ValueError('Series must have maximum degree of at least 1.')\n    if len(c) == 2:\n        return np.array([[-c[0] / c[1]]])\n\n    n = len(c) - 1\n    mat = np.zeros((n, n), dtype=c.dtype)\n    scl = 1. / np.sqrt(2 * np.arange(n) + 1)\n    top = mat.reshape(-1)[1::n + 1]\n    bot = mat.reshape(-1)[n::n + 1]\n    top[...] = np.arange(1, n) * scl[:n - 1] * scl[1:n]\n    bot[...] = top\n    mat[:, -1] -= (c[:-1] / c[-1]) * (scl / scl[-1]) * (n / (2 * n - 1))\n    return mat"
    },
    {
      "name": "numpy.polynomial.legendre.legroots",
      "category": "Legendre polynomials",
      "description": "Compute the roots of a Legendre series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legroots.html",
      "doc": "Compute the roots of a Legendre series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * L_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.chebyshev.chebroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such values.\n    Roots with multiplicity greater than 1 will also show larger errors as\n    the value of the series near such points is relatively insensitive to\n    errors in the roots. Isolated roots near the origin can be improved by\n    a few iterations of Newton's method.\n\n    The Legendre series basis polynomials aren't powers of ``x`` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as leg\n    >>> leg.legroots((1, 2, 3, 4)) # 4L_3 + 3L_2 + 2L_1 + 1L_0, all real roots\n    array([-0.85099543, -0.11407192,  0.51506735]) # may vary",
      "code": "def legroots(c):\n    \"\"\"\n    Compute the roots of a Legendre series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * L_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.chebyshev.chebroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such values.\n    Roots with multiplicity greater than 1 will also show larger errors as\n    the value of the series near such points is relatively insensitive to\n    errors in the roots. Isolated roots near the origin can be improved by\n    a few iterations of Newton's method.\n\n    The Legendre series basis polynomials aren't powers of ``x`` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as leg\n    >>> leg.legroots((1, 2, 3, 4)) # 4L_3 + 3L_2 + 2L_1 + 1L_0, all real roots\n    array([-0.85099543, -0.11407192,  0.51506735]) # may vary\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) < 2:\n        return np.array([], dtype=c.dtype)\n    if len(c) == 2:\n        return np.array([-c[0] / c[1]])\n\n    # rotated companion matrix reduces error\n    m = legcompanion(c)[::-1, ::-1]\n    r = la.eigvals(m)\n    r.sort()\n    return r"
    },
    {
      "name": "numpy.polynomial.legendre.leggauss",
      "category": "Legendre polynomials",
      "description": "Gauss-Legendre quadrature.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.leggauss.html",
      "doc": "Gauss-Legendre quadrature.\n\n    Computes the sample points and weights for Gauss-Legendre quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[-1, 1]` with\n    the weight function :math:`f(x) = 1`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100, higher degrees may\n    be problematic. The weights are determined by using the fact that\n\n    .. math:: w_k = c / (L'_n(x_k) * L_{n-1}(x_k))\n\n    where :math:`c` is a constant independent of :math:`k` and :math:`x_k`\n    is the k'th root of :math:`L_n`, and then scaling the results to get\n    the right value when integrating 1.",
      "code": "def leggauss(deg):\n    \"\"\"\n    Gauss-Legendre quadrature.\n\n    Computes the sample points and weights for Gauss-Legendre quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[-1, 1]` with\n    the weight function :math:`f(x) = 1`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100, higher degrees may\n    be problematic. The weights are determined by using the fact that\n\n    .. math:: w_k = c / (L'_n(x_k) * L_{n-1}(x_k))\n\n    where :math:`c` is a constant independent of :math:`k` and :math:`x_k`\n    is the k'th root of :math:`L_n`, and then scaling the results to get\n    the right value when integrating 1.\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg <= 0:\n        raise ValueError(\"deg must be a positive integer\")\n\n    # first approximation of roots. We use the fact that the companion\n    # matrix is symmetric in this case in order to obtain better zeros.\n    c = np.array([0] * deg + [1])\n    m = legcompanion(c)\n    x = la.eigvalsh(m)\n\n    # improve roots by one application of Newton\n    dy = legval(x, c)\n    df = legval(x, legder(c))\n    x -= dy / df\n\n    # compute the weights. We scale the factor to avoid possible numerical\n    # overflow.\n    fm = legval(x, c[1:])\n    fm /= np.abs(fm).max()\n    df /= np.abs(df).max()\n    w = 1 / (fm * df)\n\n    # for Legendre we can also symmetrize\n    w = (w + w[::-1]) / 2\n    x = (x - x[::-1]) / 2\n\n    # scale w to get the right value\n    w *= 2. / w.sum()\n\n    return x, w"
    },
    {
      "name": "numpy.polynomial.legendre.legweight",
      "category": "Legendre polynomials",
      "description": "Weight function of the Legendre polynomials.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legweight.html",
      "doc": "Weight function of the Legendre polynomials.\n\n    The weight function is :math:`1` and the interval of integration is\n    :math:`[-1, 1]`. The Legendre polynomials are orthogonal, but not\n    normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.",
      "code": "def legweight(x):\n    \"\"\"\n    Weight function of the Legendre polynomials.\n\n    The weight function is :math:`1` and the interval of integration is\n    :math:`[-1, 1]`. The Legendre polynomials are orthogonal, but not\n    normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n    \"\"\"\n    w = x * 0.0 + 1.0\n    return w\n\n#\n# Legendre series class\n#"
    },
    {
      "name": "numpy.polynomial.legendre.Legendre",
      "category": "Legendre polynomials",
      "description": "A Legendre series class.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.Legendre.html",
      "doc": "A Legendre series class.\n\n    The Legendre class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Legendre coefficients in order of increasing degree, i.e.,\n        ``(1, 2, 3)`` gives ``1*P_0(x) + 2*P_1(x) + 3*P_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24",
      "code": "class Legendre(ABCPolyBase):\n    \"\"\"A Legendre series class.\n\n    The Legendre class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Legendre coefficients in order of increasing degree, i.e.,\n        ``(1, 2, 3)`` gives ``1*P_0(x) + 2*P_1(x) + 3*P_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24\n\n    \"\"\"",
      "type": "class"
    },
    {
      "name": "numpy.polynomial.hermite.poly2herm",
      "category": "Hermite polynomials",
      "description": "poly2herm(pol)",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.poly2herm.html",
      "doc": "poly2herm(pol)\n\n    Convert a polynomial to a Hermite series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Hermite series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Hermite\n        series.\n\n    See Also\n    --------\n    herm2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import poly2herm\n    >>> poly2herm(np.arange(4))\n    array([1.   ,  2.75 ,  0.5  ,  0.375])",
      "code": "def poly2herm(pol):\n    \"\"\"\n    poly2herm(pol)\n\n    Convert a polynomial to a Hermite series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Hermite series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Hermite\n        series.\n\n    See Also\n    --------\n    herm2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import poly2herm\n    >>> poly2herm(np.arange(4))\n    array([1.   ,  2.75 ,  0.5  ,  0.375])\n\n    \"\"\"\n    [pol] = pu.as_series([pol])\n    deg = len(pol) - 1\n    res = 0\n    for i in range(deg, -1, -1):\n        res = hermadd(hermmulx(res), pol[i])\n    return res"
    },
    {
      "name": "numpy.polynomial.hermite.herm2poly",
      "category": "Hermite polynomials",
      "description": "Convert a Hermite series to a polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.herm2poly.html",
      "doc": "Convert a Hermite series to a polynomial.\n\n    Convert an array representing the coefficients of a Hermite series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Hermite series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2herm\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import herm2poly\n    >>> herm2poly([ 1.   ,  2.75 ,  0.5  ,  0.375])\n    array([0., 1., 2., 3.])",
      "code": "def herm2poly(c):\n    \"\"\"\n    Convert a Hermite series to a polynomial.\n\n    Convert an array representing the coefficients of a Hermite series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Hermite series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2herm\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import herm2poly\n    >>> herm2poly([ 1.   ,  2.75 ,  0.5  ,  0.375])\n    array([0., 1., 2., 3.])\n\n    \"\"\"\n    from .polynomial import polyadd, polymulx, polysub\n\n    [c] = pu.as_series([c])\n    n = len(c)\n    if n == 1:\n        return c\n    if n == 2:\n        c[1] *= 2\n        return c\n    else:\n        c0 = c[-2]\n        c1 = c[-1]\n        # i is the current degree of c1\n        for i in range(n - 1, 1, -1):\n            tmp = c0\n            c0 = polysub(c[i - 2], c1 * (2 * (i - 1)))\n            c1 = polyadd(tmp, polymulx(c1) * 2)\n        return polyadd(c0, polymulx(c1) * 2)\n\n\n#\n# These are constant arrays are of integer type so as to be compatible\n# with the widest range of other types, such as Decimal.\n#\n\n# Hermite\nhermdomain = np.array([-1., 1.])\n\n# Hermite coefficients representing zero.\nhermzero = np.array([0])\n\n# Hermite coefficients representing one.\nhermone = np.array([1])\n\n# Hermite coefficients representing the identity x.\nhermx = np.array([0, 1 / 2])"
    },
    {
      "name": "numpy.polynomial.hermite.hermline",
      "category": "Hermite polynomials",
      "description": "Hermite series whose graph is a straight line.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermline.html",
      "doc": "Hermite series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Hermite series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermline, hermval\n    >>> hermval(0,hermline(3, 2))\n    3.0\n    >>> hermval(1,hermline(3, 2))\n    5.0",
      "code": "def hermline(off, scl):\n    \"\"\"\n    Hermite series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Hermite series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermline, hermval\n    >>> hermval(0,hermline(3, 2))\n    3.0\n    >>> hermval(1,hermline(3, 2))\n    5.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl / 2])\n    else:\n        return np.array([off])"
    },
    {
      "name": "numpy.polynomial.hermite.hermfromroots",
      "category": "Hermite polynomials",
      "description": "Generate a Hermite series with given roots.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermfromroots.html",
      "doc": "Generate a Hermite series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in Hermite form, where the :math:`r_n` are the roots specified in `roots`.\n    If a zero has multiplicity n, then it must appear in `roots` n times.\n    For instance, if 2 is a root of multiplicity three and 3 is a root of\n    multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The\n    roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * H_1(x) + ... +  c_n * H_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in Hermite form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.chebyshev.chebfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermfromroots, hermval\n    >>> coef = hermfromroots((-1, 0, 1))\n    >>> hermval((-1, 0, 1), coef)\n    array([0.,  0.,  0.])\n    >>> coef = hermfromroots((-1j, 1j))\n    >>> hermval((-1j, 1j), coef)\n    array([0.+0.j, 0.+0.j])",
      "code": "def hermfromroots(roots):\n    \"\"\"\n    Generate a Hermite series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in Hermite form, where the :math:`r_n` are the roots specified in `roots`.\n    If a zero has multiplicity n, then it must appear in `roots` n times.\n    For instance, if 2 is a root of multiplicity three and 3 is a root of\n    multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The\n    roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * H_1(x) + ... +  c_n * H_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in Hermite form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.chebyshev.chebfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermfromroots, hermval\n    >>> coef = hermfromroots((-1, 0, 1))\n    >>> hermval((-1, 0, 1), coef)\n    array([0.,  0.,  0.])\n    >>> coef = hermfromroots((-1j, 1j))\n    >>> hermval((-1j, 1j), coef)\n    array([0.+0.j, 0.+0.j])\n\n    \"\"\"\n    return pu._fromroots(hermline, hermmul, roots)"
    },
    {
      "name": "numpy.polynomial.hermite.hermadd",
      "category": "Hermite polynomials",
      "description": "Add one Hermite series to another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermadd.html",
      "doc": "Add one Hermite series to another.\n\n    Returns the sum of two Hermite series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Hermite series of their sum.\n\n    See Also\n    --------\n    hermsub, hermmulx, hermmul, hermdiv, hermpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Hermite series\n    is a Hermite series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermadd\n    >>> hermadd([1, 2, 3], [1, 2, 3, 4])\n    array([2., 4., 6., 4.])",
      "code": "def hermadd(c1, c2):\n    \"\"\"\n    Add one Hermite series to another.\n\n    Returns the sum of two Hermite series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Hermite series of their sum.\n\n    See Also\n    --------\n    hermsub, hermmulx, hermmul, hermdiv, hermpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Hermite series\n    is a Hermite series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermadd\n    >>> hermadd([1, 2, 3], [1, 2, 3, 4])\n    array([2., 4., 6., 4.])\n\n    \"\"\"\n    return pu._add(c1, c2)"
    },
    {
      "name": "numpy.polynomial.hermite.hermsub",
      "category": "Hermite polynomials",
      "description": "Subtract one Hermite series from another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermsub.html",
      "doc": "Subtract one Hermite series from another.\n\n    Returns the difference of two Hermite series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their difference.\n\n    See Also\n    --------\n    hermadd, hermmulx, hermmul, hermdiv, hermpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Hermite\n    series is a Hermite series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermsub\n    >>> hermsub([1, 2, 3, 4], [1, 2, 3])\n    array([0.,  0.,  0.,  4.])",
      "code": "def hermsub(c1, c2):\n    \"\"\"\n    Subtract one Hermite series from another.\n\n    Returns the difference of two Hermite series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their difference.\n\n    See Also\n    --------\n    hermadd, hermmulx, hermmul, hermdiv, hermpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Hermite\n    series is a Hermite series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermsub\n    >>> hermsub([1, 2, 3, 4], [1, 2, 3])\n    array([0.,  0.,  0.,  4.])\n\n    \"\"\"\n    return pu._sub(c1, c2)"
    },
    {
      "name": "numpy.polynomial.hermite.hermmulx",
      "category": "Hermite polynomials",
      "description": "Multiply a Hermite series by x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermmulx.html",
      "doc": "Multiply a Hermite series by x.\n\n    Multiply the Hermite series `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmul, hermdiv, hermpow\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Hermite\n    polynomials in the form\n\n    .. math::\n\n        xP_i(x) = (P_{i + 1}(x)/2 + i*P_{i - 1}(x))\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermmulx\n    >>> hermmulx([1, 2, 3])\n    array([2. , 6.5, 1. , 1.5])",
      "code": "def hermmulx(c):\n    \"\"\"Multiply a Hermite series by x.\n\n    Multiply the Hermite series `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmul, hermdiv, hermpow\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Hermite\n    polynomials in the form\n\n    .. math::\n\n        xP_i(x) = (P_{i + 1}(x)/2 + i*P_{i - 1}(x))\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermmulx\n    >>> hermmulx([1, 2, 3])\n    array([2. , 6.5, 1. , 1.5])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    # The zero series needs special treatment\n    if len(c) == 1 and c[0] == 0:\n        return c\n\n    prd = np.empty(len(c) + 1, dtype=c.dtype)\n    prd[0] = c[0] * 0\n    prd[1] = c[0] / 2\n    for i in range(1, len(c)):\n        prd[i + 1] = c[i] / 2\n        prd[i - 1] += c[i] * i\n    return prd"
    },
    {
      "name": "numpy.polynomial.hermite.hermmul",
      "category": "Hermite polynomials",
      "description": "Multiply one Hermite series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermmul.html",
      "doc": "Multiply one Hermite series by another.\n\n    Returns the product of two Hermite series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their product.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmulx, hermdiv, hermpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Hermite polynomial basis set.  Thus, to express\n    the product as a Hermite series, it is necessary to \"reproject\" the\n    product onto said basis set, which may produce \"unintuitive\" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermmul\n    >>> hermmul([1, 2, 3], [0, 1, 2])\n    array([52.,  29.,  52.,   7.,   6.])",
      "code": "def hermmul(c1, c2):\n    \"\"\"\n    Multiply one Hermite series by another.\n\n    Returns the product of two Hermite series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their product.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmulx, hermdiv, hermpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Hermite polynomial basis set.  Thus, to express\n    the product as a Hermite series, it is necessary to \"reproject\" the\n    product onto said basis set, which may produce \"unintuitive\" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermmul\n    >>> hermmul([1, 2, 3], [0, 1, 2])\n    array([52.,  29.,  52.,   7.,   6.])\n\n    \"\"\"\n    # s1, s2 are trimmed copies\n    [c1, c2] = pu.as_series([c1, c2])\n\n    if len(c1) > len(c2):\n        c = c2\n        xs = c1\n    else:\n        c = c1\n        xs = c2\n\n    if len(c) == 1:\n        c0 = c[0] * xs\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0] * xs\n        c1 = c[1] * xs\n    else:\n        nd = len(c)\n        c0 = c[-2] * xs\n        c1 = c[-1] * xs\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = hermsub(c[-i] * xs, c1 * (2 * (nd - 1)))\n            c1 = hermadd(tmp, hermmulx(c1) * 2)\n    return hermadd(c0, hermmulx(c1) * 2)"
    },
    {
      "name": "numpy.polynomial.hermite.hermdiv",
      "category": "Hermite polynomials",
      "description": "Divide one Hermite series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermdiv.html",
      "doc": "Divide one Hermite series by another.\n\n    Returns the quotient-with-remainder of two Hermite series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Hermite series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmulx, hermmul, hermpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Hermite series by another\n    results in quotient and remainder terms that are not in the Hermite\n    polynomial basis set.  Thus, to express these results as a Hermite\n    series, it is necessary to \"reproject\" the results onto the Hermite\n    basis set, which may produce \"unintuitive\" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermdiv\n    >>> hermdiv([ 52.,  29.,  52.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([0.]))\n    >>> hermdiv([ 54.,  31.,  52.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([2., 2.]))\n    >>> hermdiv([ 53.,  30.,  52.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([1., 1.]))",
      "code": "def hermdiv(c1, c2):\n    \"\"\"\n    Divide one Hermite series by another.\n\n    Returns the quotient-with-remainder of two Hermite series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Hermite series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmulx, hermmul, hermpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Hermite series by another\n    results in quotient and remainder terms that are not in the Hermite\n    polynomial basis set.  Thus, to express these results as a Hermite\n    series, it is necessary to \"reproject\" the results onto the Hermite\n    basis set, which may produce \"unintuitive\" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermdiv\n    >>> hermdiv([ 52.,  29.,  52.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([0.]))\n    >>> hermdiv([ 54.,  31.,  52.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([2., 2.]))\n    >>> hermdiv([ 53.,  30.,  52.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([1., 1.]))\n\n    \"\"\"\n    return pu._div(hermmul, c1, c2)"
    },
    {
      "name": "numpy.polynomial.hermite.hermpow",
      "category": "Hermite polynomials",
      "description": "Raise a Hermite series to a power.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermpow.html",
      "doc": "Raise a Hermite series to a power.\n\n    Returns the Hermite series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Hermite series of power.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmulx, hermmul, hermdiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermpow\n    >>> hermpow([1, 2, 3], 2)\n    array([81.,  52.,  82.,  12.,   9.])",
      "code": "def hermpow(c, pow, maxpower=16):\n    \"\"\"Raise a Hermite series to a power.\n\n    Returns the Hermite series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Hermite series of power.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmulx, hermmul, hermdiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermpow\n    >>> hermpow([1, 2, 3], 2)\n    array([81.,  52.,  82.,  12.,   9.])\n\n    \"\"\"\n    return pu._pow(hermmul, c, pow, maxpower)"
    },
    {
      "name": "numpy.polynomial.hermite.hermder",
      "category": "Hermite polynomials",
      "description": "Differentiate a Hermite series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermder.html",
      "doc": "Differentiate a Hermite series.\n\n    Returns the Hermite series coefficients `c` differentiated `m` times\n    along `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*H_0 + 2*H_1 + 3*H_2``\n    while [[1,2],[1,2]] represents ``1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) +\n    2*H_0(x)*H_1(y) + 2*H_1(x)*H_1(y)`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Hermite series coefficients. If `c` is multidimensional the\n        different axis correspond to different variables with the degree in\n        each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Hermite series of the derivative.\n\n    See Also\n    --------\n    hermint\n\n    Notes\n    -----\n    In general, the result of differentiating a Hermite series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be \"unintuitive,\" albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermder\n    >>> hermder([ 1. ,  0.5,  0.5,  0.5])\n    array([1., 2., 3.])\n    >>> hermder([-0.5,  1./2.,  1./8.,  1./12.,  1./16.], m=2)\n    array([1., 2., 3.])",
      "code": "def hermder(c, m=1, scl=1, axis=0):\n    \"\"\"\n    Differentiate a Hermite series.\n\n    Returns the Hermite series coefficients `c` differentiated `m` times\n    along `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*H_0 + 2*H_1 + 3*H_2``\n    while [[1,2],[1,2]] represents ``1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) +\n    2*H_0(x)*H_1(y) + 2*H_1(x)*H_1(y)`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Hermite series coefficients. If `c` is multidimensional the\n        different axis correspond to different variables with the degree in\n        each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Hermite series of the derivative.\n\n    See Also\n    --------\n    hermint\n\n    Notes\n    -----\n    In general, the result of differentiating a Hermite series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be \"unintuitive,\" albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermder\n    >>> hermder([ 1. ,  0.5,  0.5,  0.5])\n    array([1., 2., 3.])\n    >>> hermder([-0.5,  1./2.,  1./8.,  1./12.,  1./16.], m=2)\n    array([1., 2., 3.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    cnt = pu._as_int(m, \"the order of derivation\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of derivation must be non-negative\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    n = len(c)\n    if cnt >= n:\n        c = c[:1] * 0\n    else:\n        for i in range(cnt):\n            n = n - 1\n            c *= scl\n            der = np.empty((n,) + c.shape[1:], dtype=c.dtype)\n            for j in range(n, 0, -1):\n                der[j - 1] = (2 * j) * c[j]\n            c = der\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.hermite.hermint",
      "category": "Hermite polynomials",
      "description": "Integrate a Hermite series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermint.html",
      "doc": "Integrate a Hermite series.\n\n    Returns the Hermite series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``H_0 + 2*H_1 + 3*H_2`` while [[1,2],[1,2]]\n    represents ``1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) + 2*H_0(x)*H_1(y) +\n    2*H_1(x)*H_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Hermite series coefficients. If c is multidimensional the\n        different axis correspond to different variables with the degree in\n        each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Hermite series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    hermder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermint\n    >>> hermint([1,2,3]) # integrate once, value 0 at 0.\n    array([1. , 0.5, 0.5, 0.5])\n    >>> hermint([1,2,3], m=2) # integrate twice, value & deriv 0 at 0\n    array([-0.5       ,  0.5       ,  0.125     ,  0.08333333,  0.0625    ]) # may vary\n    >>> hermint([1,2,3], k=1) # integrate once, value 1 at 0.\n    array([2. , 0.5, 0.5, 0.5])\n    >>> hermint([1,2,3], lbnd=-1) # integrate once, value 0 at -1\n    array([-2. ,  0.5,  0.5,  0.5])\n    >>> hermint([1,2,3], m=2, k=[1,2], lbnd=-1)\n    array([ 1.66666667, -0.5       ,  0.125     ,  0.08333333,  0.0625    ]) # may vary",
      "code": "def hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n    \"\"\"\n    Integrate a Hermite series.\n\n    Returns the Hermite series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``H_0 + 2*H_1 + 3*H_2`` while [[1,2],[1,2]]\n    represents ``1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) + 2*H_0(x)*H_1(y) +\n    2*H_1(x)*H_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Hermite series coefficients. If c is multidimensional the\n        different axis correspond to different variables with the degree in\n        each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Hermite series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    hermder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermint\n    >>> hermint([1,2,3]) # integrate once, value 0 at 0.\n    array([1. , 0.5, 0.5, 0.5])\n    >>> hermint([1,2,3], m=2) # integrate twice, value & deriv 0 at 0\n    array([-0.5       ,  0.5       ,  0.125     ,  0.08333333,  0.0625    ]) # may vary\n    >>> hermint([1,2,3], k=1) # integrate once, value 1 at 0.\n    array([2. , 0.5, 0.5, 0.5])\n    >>> hermint([1,2,3], lbnd=-1) # integrate once, value 0 at -1\n    array([-2. ,  0.5,  0.5,  0.5])\n    >>> hermint([1,2,3], m=2, k=[1,2], lbnd=-1)\n    array([ 1.66666667, -0.5       ,  0.125     ,  0.08333333,  0.0625    ]) # may vary\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if not np.iterable(k):\n        k = [k]\n    cnt = pu._as_int(m, \"the order of integration\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of integration must be non-negative\")\n    if len(k) > cnt:\n        raise ValueError(\"Too many integration constants\")\n    if np.ndim(lbnd) != 0:\n        raise ValueError(\"lbnd must be a scalar.\")\n    if np.ndim(scl) != 0:\n        raise ValueError(\"scl must be a scalar.\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    k = list(k) + [0] * (cnt - len(k))\n    for i in range(cnt):\n        n = len(c)\n        c *= scl\n        if n == 1 and np.all(c[0] == 0):\n            c[0] += k[i]\n        else:\n            tmp = np.empty((n + 1,) + c.shape[1:], dtype=c.dtype)\n            tmp[0] = c[0] * 0\n            tmp[1] = c[0] / 2\n            for j in range(1, n):\n                tmp[j + 1] = c[j] / (2 * (j + 1))\n            tmp[0] += k[i] - hermval(lbnd, tmp)\n            c = tmp\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.hermite.hermval",
      "category": "Hermite polynomials",
      "description": "Evaluate an Hermite series at points x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermval.html",
      "doc": "Evaluate an Hermite series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * H_0(x) + c_1 * H_1(x) + ... + c_n * H_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    hermval2d, hermgrid2d, hermval3d, hermgrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermval\n    >>> coef = [1,2,3]\n    >>> hermval(1, coef)\n    11.0\n    >>> hermval([[1,2],[3,4]], coef)\n    array([[ 11.,   51.],\n           [115.,  203.]])",
      "code": "def hermval(x, c, tensor=True):\n    \"\"\"\n    Evaluate an Hermite series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * H_0(x) + c_1 * H_1(x) + ... + c_n * H_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    hermval2d, hermgrid2d, hermval3d, hermgrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermval\n    >>> coef = [1,2,3]\n    >>> hermval(1, coef)\n    11.0\n    >>> hermval([[1,2],[3,4]], coef)\n    array([[ 11.,   51.],\n           [115.,  203.]])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n\n    x2 = x * 2\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        nd = len(c)\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = c[-i] - c1 * (2 * (nd - 1))\n            c1 = tmp + c1 * x2\n    return c0 + c1 * x2"
    },
    {
      "name": "numpy.polynomial.hermite.hermval2d",
      "category": "Hermite polynomials",
      "description": "Evaluate a 2-D Hermite series at points (x, y).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermval2d.html",
      "doc": "Evaluate a 2-D Hermite series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * H_i(x) * H_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points formed with\n        pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    hermval, hermgrid2d, hermval3d, hermgrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermval2d\n    >>> x = [1, 2]\n    >>> y = [4, 5]\n    >>> c = [[1, 2, 3], [4, 5, 6]]\n    >>> hermval2d(x, y, c)\n    array([1035., 2883.])",
      "code": "def hermval2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D Hermite series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * H_i(x) * H_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points formed with\n        pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    hermval, hermgrid2d, hermval3d, hermgrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermval2d\n    >>> x = [1, 2]\n    >>> y = [4, 5]\n    >>> c = [[1, 2, 3], [4, 5, 6]]\n    >>> hermval2d(x, y, c)\n    array([1035., 2883.])\n\n    \"\"\"\n    return pu._valnd(hermval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.hermite.hermgrid2d",
      "category": "Hermite polynomials",
      "description": "Evaluate a 2-D Hermite series on the Cartesian product of x and y.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermgrid2d.html",
      "doc": "Evaluate a 2-D Hermite series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * H_i(a) * H_j(b)\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    hermval, hermval2d, hermval3d, hermgrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermgrid2d\n    >>> x = [1, 2, 3]\n    >>> y = [4, 5]\n    >>> c = [[1, 2, 3], [4, 5, 6]]\n    >>> hermgrid2d(x, y, c)\n    array([[1035., 1599.],\n           [1867., 2883.],\n           [2699., 4167.]])",
      "code": "def hermgrid2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D Hermite series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * H_i(a) * H_j(b)\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    hermval, hermval2d, hermval3d, hermgrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermgrid2d\n    >>> x = [1, 2, 3]\n    >>> y = [4, 5]\n    >>> c = [[1, 2, 3], [4, 5, 6]]\n    >>> hermgrid2d(x, y, c)\n    array([[1035., 1599.],\n           [1867., 2883.],\n           [2699., 4167.]])\n\n    \"\"\"\n    return pu._gridnd(hermval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.hermite.hermval3d",
      "category": "Hermite polynomials",
      "description": "Evaluate a 3-D Hermite series at points (x, y, z).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermval3d.html",
      "doc": "Evaluate a 3-D Hermite series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * H_i(x) * H_j(y) * H_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    hermval, hermval2d, hermgrid2d, hermgrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermval3d\n    >>> x = [1, 2]\n    >>> y = [4, 5]\n    >>> z = [6, 7]\n    >>> c = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]\n    >>> hermval3d(x, y, z, c)\n    array([ 40077., 120131.])",
      "code": "def hermval3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D Hermite series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * H_i(x) * H_j(y) * H_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    hermval, hermval2d, hermgrid2d, hermgrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermval3d\n    >>> x = [1, 2]\n    >>> y = [4, 5]\n    >>> z = [6, 7]\n    >>> c = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]\n    >>> hermval3d(x, y, z, c)\n    array([ 40077., 120131.])\n\n    \"\"\"\n    return pu._valnd(hermval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.hermite.hermgrid3d",
      "category": "Hermite polynomials",
      "description": "Evaluate a 3-D Hermite series on the Cartesian product of x, y, and z.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermgrid3d.html",
      "doc": "Evaluate a 3-D Hermite series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * H_i(a) * H_j(b) * H_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    hermval, hermval2d, hermgrid2d, hermval3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermgrid3d\n    >>> x = [1, 2]\n    >>> y = [4, 5]\n    >>> z = [6, 7]\n    >>> c = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]\n    >>> hermgrid3d(x, y, z, c)\n    array([[[ 40077.,  54117.],\n            [ 49293.,  66561.]],\n           [[ 72375.,  97719.],\n            [ 88975., 120131.]]])",
      "code": "def hermgrid3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D Hermite series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * H_i(a) * H_j(b) * H_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    hermval, hermval2d, hermgrid2d, hermval3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermgrid3d\n    >>> x = [1, 2]\n    >>> y = [4, 5]\n    >>> z = [6, 7]\n    >>> c = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]\n    >>> hermgrid3d(x, y, z, c)\n    array([[[ 40077.,  54117.],\n            [ 49293.,  66561.]],\n           [[ 72375.,  97719.],\n            [ 88975., 120131.]]])\n\n    \"\"\"\n    return pu._gridnd(hermval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.hermite.hermvander",
      "category": "Hermite polynomials",
      "description": "Pseudo-Vandermonde matrix of given degree.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermvander.html",
      "doc": "Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = H_i(x),\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the Hermite polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = hermvander(x, n)``, then ``np.dot(V, c)`` and\n    ``hermval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of Hermite series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo-Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding Hermite polynomial.  The dtype will be the same as\n        the converted `x`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite import hermvander\n    >>> x = np.array([-1, 0, 1])\n    >>> hermvander(x, 3)\n    array([[ 1., -2.,  2.,  4.],\n           [ 1.,  0., -2., -0.],\n           [ 1.,  2.,  2., -4.]])",
      "code": "def hermvander(x, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = H_i(x),\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the Hermite polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = hermvander(x, n)``, then ``np.dot(V, c)`` and\n    ``hermval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of Hermite series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo-Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding Hermite polynomial.  The dtype will be the same as\n        the converted `x`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite import hermvander\n    >>> x = np.array([-1, 0, 1])\n    >>> hermvander(x, 3)\n    array([[ 1., -2.,  2.,  4.],\n           [ 1.,  0., -2., -0.],\n           [ 1.,  2.,  2., -4.]])\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg < 0:\n        raise ValueError(\"deg must be non-negative\")\n\n    x = np.array(x, copy=None, ndmin=1) + 0.0\n    dims = (ideg + 1,) + x.shape\n    dtyp = x.dtype\n    v = np.empty(dims, dtype=dtyp)\n    v[0] = x * 0 + 1\n    if ideg > 0:\n        x2 = x * 2\n        v[1] = x2\n        for i in range(2, ideg + 1):\n            v[i] = (v[i - 1] * x2 - v[i - 2] * (2 * (i - 1)))\n    return np.moveaxis(v, 0, -1)"
    },
    {
      "name": "numpy.polynomial.hermite.hermvander2d",
      "category": "Hermite polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermvander2d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = H_i(x) * H_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the Hermite polynomials.\n\n    If ``V = hermvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``hermval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D Hermite\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    hermvander, hermvander3d, hermval2d, hermval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite import hermvander2d\n    >>> x = np.array([-1, 0, 1])\n    >>> y = np.array([-1, 0, 1])\n    >>> hermvander2d(x, y, [2, 2])\n    array([[ 1., -2.,  2., -2.,  4., -4.,  2., -4.,  4.],\n           [ 1.,  0., -2.,  0.,  0., -0., -2., -0.,  4.],\n           [ 1.,  2.,  2.,  2.,  4.,  4.,  2.,  4.,  4.]])",
      "code": "def hermvander2d(x, y, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = H_i(x) * H_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the Hermite polynomials.\n\n    If ``V = hermvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``hermval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D Hermite\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    hermvander, hermvander3d, hermval2d, hermval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite import hermvander2d\n    >>> x = np.array([-1, 0, 1])\n    >>> y = np.array([-1, 0, 1])\n    >>> hermvander2d(x, y, [2, 2])\n    array([[ 1., -2.,  2., -2.,  4., -4.,  2., -4.,  4.],\n           [ 1.,  0., -2.,  0.,  0., -0., -2., -0.,  4.],\n           [ 1.,  2.,  2.,  2.,  4.,  4.,  2.,  4.,  4.]])\n\n    \"\"\"\n    return pu._vander_nd_flat((hermvander, hermvander), (x, y), deg)"
    },
    {
      "name": "numpy.polynomial.hermite.hermvander3d",
      "category": "Hermite polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermvander3d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = H_i(x)*H_j(y)*H_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the Hermite polynomials.\n\n    If ``V = hermvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and  ``np.dot(V, c.flat)`` and ``hermval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D Hermite\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    hermvander, hermvander3d, hermval2d, hermval3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermvander3d\n    >>> x = np.array([-1, 0, 1])\n    >>> y = np.array([-1, 0, 1])\n    >>> z = np.array([-1, 0, 1])\n    >>> hermvander3d(x, y, z, [0, 1, 2])\n    array([[ 1., -2.,  2., -2.,  4., -4.],\n           [ 1.,  0., -2.,  0.,  0., -0.],\n           [ 1.,  2.,  2.,  2.,  4.,  4.]])",
      "code": "def hermvander3d(x, y, z, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = H_i(x)*H_j(y)*H_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the Hermite polynomials.\n\n    If ``V = hermvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and  ``np.dot(V, c.flat)`` and ``hermval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D Hermite\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    hermvander, hermvander3d, hermval2d, hermval3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermvander3d\n    >>> x = np.array([-1, 0, 1])\n    >>> y = np.array([-1, 0, 1])\n    >>> z = np.array([-1, 0, 1])\n    >>> hermvander3d(x, y, z, [0, 1, 2])\n    array([[ 1., -2.,  2., -2.,  4., -4.],\n           [ 1.,  0., -2.,  0.,  0., -0.],\n           [ 1.,  2.,  2.,  2.,  4.,  4.]])\n\n    \"\"\"\n    return pu._vander_nd_flat((hermvander, hermvander, hermvander), (x, y, z), deg)"
    },
    {
      "name": "numpy.polynomial.hermite.hermfit",
      "category": "Hermite polynomials",
      "description": "Least squares fit of Hermite series to data.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermfit.html",
      "doc": "Least squares fit of Hermite series to data.\n\n    Return the coefficients of a Hermite series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * H_1(x) + ... + c_n * H_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Hermite coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full == False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.laguerre.lagfit\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.hermite_e.hermefit\n    hermval : Evaluates a Hermite series.\n    hermvander : Vandermonde matrix of Hermite series.\n    hermweight : Hermite weight function\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Hermite series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Hermite series are probably most useful when the data can be\n    approximated by ``sqrt(w(x)) * p(x)``, where ``w(x)`` is the Hermite\n    weight. In that case the weight ``sqrt(w(x[i]))`` should be used\n    together with data values ``y[i]/sqrt(w(x[i]))``. The weight function is\n    available as `hermweight`.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite import hermfit, hermval\n    >>> x = np.linspace(-10, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = hermval(x, [1, 2, 3]) + err\n    >>> hermfit(x, y, 2)\n    array([1.02294967, 2.00016403, 2.99994614]) # may vary",
      "code": "def hermfit(x, y, deg, rcond=None, full=False, w=None):\n    \"\"\"\n    Least squares fit of Hermite series to data.\n\n    Return the coefficients of a Hermite series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * H_1(x) + ... + c_n * H_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Hermite coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full == False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.laguerre.lagfit\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.hermite_e.hermefit\n    hermval : Evaluates a Hermite series.\n    hermvander : Vandermonde matrix of Hermite series.\n    hermweight : Hermite weight function\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Hermite series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Hermite series are probably most useful when the data can be\n    approximated by ``sqrt(w(x)) * p(x)``, where ``w(x)`` is the Hermite\n    weight. In that case the weight ``sqrt(w(x[i]))`` should be used\n    together with data values ``y[i]/sqrt(w(x[i]))``. The weight function is\n    available as `hermweight`.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite import hermfit, hermval\n    >>> x = np.linspace(-10, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = hermval(x, [1, 2, 3]) + err\n    >>> hermfit(x, y, 2)\n    array([1.02294967, 2.00016403, 2.99994614]) # may vary\n\n    \"\"\"\n    return pu._fit(hermvander, x, y, deg, rcond, full, w)"
    },
    {
      "name": "numpy.polynomial.hermite.hermcompanion",
      "category": "Hermite polynomials",
      "description": "Return the scaled companion matrix of c.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermcompanion.html",
      "doc": "Return the scaled companion matrix of c.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `c` is an Hermite basis polynomial. This provides\n    better eigenvalue estimates than the unscaled case and for basis\n    polynomials the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermcompanion\n    >>> hermcompanion([1, 0, 1])\n    array([[0.        , 0.35355339],\n           [0.70710678, 0.        ]])",
      "code": "def hermcompanion(c):\n    \"\"\"Return the scaled companion matrix of c.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `c` is an Hermite basis polynomial. This provides\n    better eigenvalue estimates than the unscaled case and for basis\n    polynomials the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermcompanion\n    >>> hermcompanion([1, 0, 1])\n    array([[0.        , 0.35355339],\n           [0.70710678, 0.        ]])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) < 2:\n        raise ValueError('Series must have maximum degree of at least 1.')\n    if len(c) == 2:\n        return np.array([[-.5 * c[0] / c[1]]])\n\n    n = len(c) - 1\n    mat = np.zeros((n, n), dtype=c.dtype)\n    scl = np.hstack((1., 1. / np.sqrt(2. * np.arange(n - 1, 0, -1))))\n    scl = np.multiply.accumulate(scl)[::-1]\n    top = mat.reshape(-1)[1::n + 1]\n    bot = mat.reshape(-1)[n::n + 1]\n    top[...] = np.sqrt(.5 * np.arange(1, n))\n    bot[...] = top\n    mat[:, -1] -= scl * c[:-1] / (2.0 * c[-1])\n    return mat"
    },
    {
      "name": "numpy.polynomial.hermite.hermroots",
      "category": "Hermite polynomials",
      "description": "Compute the roots of a Hermite series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermroots.html",
      "doc": "Compute the roots of a Hermite series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * H_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.chebyshev.chebroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    The Hermite series basis polynomials aren't powers of `x` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermroots, hermfromroots\n    >>> coef = hermfromroots([-1, 0, 1])\n    >>> coef\n    array([0.   ,  0.25 ,  0.   ,  0.125])\n    >>> hermroots(coef)\n    array([-1.00000000e+00, -1.38777878e-17,  1.00000000e+00])",
      "code": "def hermroots(c):\n    \"\"\"\n    Compute the roots of a Hermite series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * H_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.chebyshev.chebroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    The Hermite series basis polynomials aren't powers of `x` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermroots, hermfromroots\n    >>> coef = hermfromroots([-1, 0, 1])\n    >>> coef\n    array([0.   ,  0.25 ,  0.   ,  0.125])\n    >>> hermroots(coef)\n    array([-1.00000000e+00, -1.38777878e-17,  1.00000000e+00])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) <= 1:\n        return np.array([], dtype=c.dtype)\n    if len(c) == 2:\n        return np.array([-.5 * c[0] / c[1]])\n\n    # rotated companion matrix reduces error\n    m = hermcompanion(c)[::-1, ::-1]\n    r = la.eigvals(m)\n    r.sort()\n    return r"
    },
    {
      "name": "numpy.polynomial.hermite.hermgauss",
      "category": "Hermite polynomials",
      "description": "Gauss-Hermite quadrature.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermgauss.html",
      "doc": "Gauss-Hermite quadrature.\n\n    Computes the sample points and weights for Gauss-Hermite quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[-\\\\inf, \\\\inf]`\n    with the weight function :math:`f(x) = \\\\exp(-x^2)`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100, higher degrees may\n    be problematic. The weights are determined by using the fact that\n\n    .. math:: w_k = c / (H'_n(x_k) * H_{n-1}(x_k))\n\n    where :math:`c` is a constant independent of :math:`k` and :math:`x_k`\n    is the k'th root of :math:`H_n`, and then scaling the results to get\n    the right value when integrating 1.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermgauss\n    >>> hermgauss(2)\n    (array([-0.70710678,  0.70710678]), array([0.88622693, 0.88622693]))",
      "code": "def hermgauss(deg):\n    \"\"\"\n    Gauss-Hermite quadrature.\n\n    Computes the sample points and weights for Gauss-Hermite quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[-\\\\inf, \\\\inf]`\n    with the weight function :math:`f(x) = \\\\exp(-x^2)`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100, higher degrees may\n    be problematic. The weights are determined by using the fact that\n\n    .. math:: w_k = c / (H'_n(x_k) * H_{n-1}(x_k))\n\n    where :math:`c` is a constant independent of :math:`k` and :math:`x_k`\n    is the k'th root of :math:`H_n`, and then scaling the results to get\n    the right value when integrating 1.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermgauss\n    >>> hermgauss(2)\n    (array([-0.70710678,  0.70710678]), array([0.88622693, 0.88622693]))\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg <= 0:\n        raise ValueError(\"deg must be a positive integer\")\n\n    # first approximation of roots. We use the fact that the companion\n    # matrix is symmetric in this case in order to obtain better zeros.\n    c = np.array([0] * deg + [1], dtype=np.float64)\n    m = hermcompanion(c)\n    x = la.eigvalsh(m)\n\n    # improve roots by one application of Newton\n    dy = _normed_hermite_n(x, ideg)\n    df = _normed_hermite_n(x, ideg - 1) * np.sqrt(2 * ideg)\n    x -= dy / df\n\n    # compute the weights. We scale the factor to avoid possible numerical\n    # overflow.\n    fm = _normed_hermite_n(x, ideg - 1)\n    fm /= np.abs(fm).max()\n    w = 1 / (fm * fm)\n\n    # for Hermite we can also symmetrize\n    w = (w + w[::-1]) / 2\n    x = (x - x[::-1]) / 2\n\n    # scale w to get the right value\n    w *= np.sqrt(np.pi) / w.sum()\n\n    return x, w"
    },
    {
      "name": "numpy.polynomial.hermite.hermweight",
      "category": "Hermite polynomials",
      "description": "Weight function of the Hermite polynomials.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.hermweight.html",
      "doc": "Weight function of the Hermite polynomials.\n\n    The weight function is :math:`\\\\exp(-x^2)` and the interval of\n    integration is :math:`[-\\\\inf, \\\\inf]`. the Hermite polynomials are\n    orthogonal, but not normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite import hermweight\n    >>> x = np.arange(-2, 2)\n    >>> hermweight(x)\n    array([0.01831564, 0.36787944, 1.        , 0.36787944])",
      "code": "def hermweight(x):\n    \"\"\"\n    Weight function of the Hermite polynomials.\n\n    The weight function is :math:`\\\\exp(-x^2)` and the interval of\n    integration is :math:`[-\\\\inf, \\\\inf]`. the Hermite polynomials are\n    orthogonal, but not normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite import hermweight\n    >>> x = np.arange(-2, 2)\n    >>> hermweight(x)\n    array([0.01831564, 0.36787944, 1.        , 0.36787944])\n\n    \"\"\"\n    w = np.exp(-x**2)\n    return w\n\n\n#\n# Hermite series class\n#"
    },
    {
      "name": "numpy.polynomial.hermite.Hermite",
      "category": "Hermite polynomials",
      "description": "An Hermite series class.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite.Hermite.html",
      "doc": "An Hermite series class.\n\n    The Hermite class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Hermite coefficients in order of increasing degree, i.e,\n        ``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(x) + 3*H_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24",
      "code": "class Hermite(ABCPolyBase):\n    \"\"\"An Hermite series class.\n\n    The Hermite class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Hermite coefficients in order of increasing degree, i.e,\n        ``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(x) + 3*H_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24\n\n    \"\"\"",
      "type": "class"
    },
    {
      "name": "numpy.polynomial.hermite_e.poly2herme",
      "category": "HermiteE polynomials",
      "description": "poly2herme(pol)",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.poly2herme.html",
      "doc": "poly2herme(pol)\n\n    Convert a polynomial to a Hermite series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Hermite series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Hermite\n        series.\n\n    See Also\n    --------\n    herme2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite_e import poly2herme\n    >>> poly2herme(np.arange(4))\n    array([  2.,  10.,   2.,   3.])",
      "code": "def poly2herme(pol):\n    \"\"\"\n    poly2herme(pol)\n\n    Convert a polynomial to a Hermite series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Hermite series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Hermite\n        series.\n\n    See Also\n    --------\n    herme2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite_e import poly2herme\n    >>> poly2herme(np.arange(4))\n    array([  2.,  10.,   2.,   3.])\n\n    \"\"\"\n    [pol] = pu.as_series([pol])\n    deg = len(pol) - 1\n    res = 0\n    for i in range(deg, -1, -1):\n        res = hermeadd(hermemulx(res), pol[i])\n    return res"
    },
    {
      "name": "numpy.polynomial.hermite_e.herme2poly",
      "category": "HermiteE polynomials",
      "description": "Convert a Hermite series to a polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.herme2poly.html",
      "doc": "Convert a Hermite series to a polynomial.\n\n    Convert an array representing the coefficients of a Hermite series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Hermite series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2herme\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import herme2poly\n    >>> herme2poly([  2.,  10.,   2.,   3.])\n    array([0.,  1.,  2.,  3.])",
      "code": "def herme2poly(c):\n    \"\"\"\n    Convert a Hermite series to a polynomial.\n\n    Convert an array representing the coefficients of a Hermite series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Hermite series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2herme\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import herme2poly\n    >>> herme2poly([  2.,  10.,   2.,   3.])\n    array([0.,  1.,  2.,  3.])\n\n    \"\"\"\n    from .polynomial import polyadd, polymulx, polysub\n\n    [c] = pu.as_series([c])\n    n = len(c)\n    if n == 1:\n        return c\n    if n == 2:\n        return c\n    else:\n        c0 = c[-2]\n        c1 = c[-1]\n        # i is the current degree of c1\n        for i in range(n - 1, 1, -1):\n            tmp = c0\n            c0 = polysub(c[i - 2], c1 * (i - 1))\n            c1 = polyadd(tmp, polymulx(c1))\n        return polyadd(c0, polymulx(c1))\n\n\n#\n# These are constant arrays are of integer type so as to be compatible\n# with the widest range of other types, such as Decimal.\n#\n\n# Hermite\nhermedomain = np.array([-1., 1.])\n\n# Hermite coefficients representing zero.\nhermezero = np.array([0])\n\n# Hermite coefficients representing one.\nhermeone = np.array([1])\n\n# Hermite coefficients representing the identity x.\nhermex = np.array([0, 1])"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermeline",
      "category": "HermiteE polynomials",
      "description": "Hermite series whose graph is a straight line.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermeline.html",
      "doc": "Hermite series whose graph is a straight line.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Hermite series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeline\n    >>> from numpy.polynomial.hermite_e import hermeline, hermeval\n    >>> hermeval(0,hermeline(3, 2))\n    3.0\n    >>> hermeval(1,hermeline(3, 2))\n    5.0",
      "code": "def hermeline(off, scl):\n    \"\"\"\n    Hermite series whose graph is a straight line.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Hermite series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.laguerre.lagline\n    numpy.polynomial.hermite.hermline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeline\n    >>> from numpy.polynomial.hermite_e import hermeline, hermeval\n    >>> hermeval(0,hermeline(3, 2))\n    3.0\n    >>> hermeval(1,hermeline(3, 2))\n    5.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off, scl])\n    else:\n        return np.array([off])"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermefromroots",
      "category": "HermiteE polynomials",
      "description": "Generate a HermiteE series with given roots.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermefromroots.html",
      "doc": "Generate a HermiteE series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in HermiteE form, where the :math:`r_n` are the roots specified in `roots`.\n    If a zero has multiplicity n, then it must appear in `roots` n times.\n    For instance, if 2 is a root of multiplicity three and 3 is a root of\n    multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The\n    roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * He_1(x) + ... +  c_n * He_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in HermiteE form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.chebyshev.chebfromroots\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermefromroots, hermeval\n    >>> coef = hermefromroots((-1, 0, 1))\n    >>> hermeval((-1, 0, 1), coef)\n    array([0., 0., 0.])\n    >>> coef = hermefromroots((-1j, 1j))\n    >>> hermeval((-1j, 1j), coef)\n    array([0.+0.j, 0.+0.j])",
      "code": "def hermefromroots(roots):\n    \"\"\"\n    Generate a HermiteE series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in HermiteE form, where the :math:`r_n` are the roots specified in `roots`.\n    If a zero has multiplicity n, then it must appear in `roots` n times.\n    For instance, if 2 is a root of multiplicity three and 3 is a root of\n    multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The\n    roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * He_1(x) + ... +  c_n * He_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in HermiteE form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.laguerre.lagfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.chebyshev.chebfromroots\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermefromroots, hermeval\n    >>> coef = hermefromroots((-1, 0, 1))\n    >>> hermeval((-1, 0, 1), coef)\n    array([0., 0., 0.])\n    >>> coef = hermefromroots((-1j, 1j))\n    >>> hermeval((-1j, 1j), coef)\n    array([0.+0.j, 0.+0.j])\n\n    \"\"\"\n    return pu._fromroots(hermeline, hermemul, roots)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermeadd",
      "category": "HermiteE polynomials",
      "description": "Add one Hermite series to another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermeadd.html",
      "doc": "Add one Hermite series to another.\n\n    Returns the sum of two Hermite series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Hermite series of their sum.\n\n    See Also\n    --------\n    hermesub, hermemulx, hermemul, hermediv, hermepow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Hermite series\n    is a Hermite series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeadd\n    >>> hermeadd([1, 2, 3], [1, 2, 3, 4])\n    array([2.,  4.,  6.,  4.])",
      "code": "def hermeadd(c1, c2):\n    \"\"\"\n    Add one Hermite series to another.\n\n    Returns the sum of two Hermite series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Hermite series of their sum.\n\n    See Also\n    --------\n    hermesub, hermemulx, hermemul, hermediv, hermepow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Hermite series\n    is a Hermite series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeadd\n    >>> hermeadd([1, 2, 3], [1, 2, 3, 4])\n    array([2.,  4.,  6.,  4.])\n\n    \"\"\"\n    return pu._add(c1, c2)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermesub",
      "category": "HermiteE polynomials",
      "description": "Subtract one Hermite series from another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermesub.html",
      "doc": "Subtract one Hermite series from another.\n\n    Returns the difference of two Hermite series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their difference.\n\n    See Also\n    --------\n    hermeadd, hermemulx, hermemul, hermediv, hermepow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Hermite\n    series is a Hermite series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermesub\n    >>> hermesub([1, 2, 3, 4], [1, 2, 3])\n    array([0., 0., 0., 4.])",
      "code": "def hermesub(c1, c2):\n    \"\"\"\n    Subtract one Hermite series from another.\n\n    Returns the difference of two Hermite series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their difference.\n\n    See Also\n    --------\n    hermeadd, hermemulx, hermemul, hermediv, hermepow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Hermite\n    series is a Hermite series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermesub\n    >>> hermesub([1, 2, 3, 4], [1, 2, 3])\n    array([0., 0., 0., 4.])\n\n    \"\"\"\n    return pu._sub(c1, c2)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermemulx",
      "category": "HermiteE polynomials",
      "description": "Multiply a Hermite series by x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermemulx.html",
      "doc": "Multiply a Hermite series by x.\n\n    Multiply the Hermite series `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemul, hermediv, hermepow\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Hermite\n    polynomials in the form\n\n    .. math::\n\n        xP_i(x) = (P_{i + 1}(x) + iP_{i - 1}(x)))\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermemulx\n    >>> hermemulx([1, 2, 3])\n    array([2.,  7.,  2.,  3.])",
      "code": "def hermemulx(c):\n    \"\"\"Multiply a Hermite series by x.\n\n    Multiply the Hermite series `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemul, hermediv, hermepow\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Hermite\n    polynomials in the form\n\n    .. math::\n\n        xP_i(x) = (P_{i + 1}(x) + iP_{i - 1}(x)))\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermemulx\n    >>> hermemulx([1, 2, 3])\n    array([2.,  7.,  2.,  3.])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    # The zero series needs special treatment\n    if len(c) == 1 and c[0] == 0:\n        return c\n\n    prd = np.empty(len(c) + 1, dtype=c.dtype)\n    prd[0] = c[0] * 0\n    prd[1] = c[0]\n    for i in range(1, len(c)):\n        prd[i + 1] = c[i]\n        prd[i - 1] += c[i] * i\n    return prd"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermemul",
      "category": "HermiteE polynomials",
      "description": "Multiply one Hermite series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermemul.html",
      "doc": "Multiply one Hermite series by another.\n\n    Returns the product of two Hermite series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their product.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemulx, hermediv, hermepow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Hermite polynomial basis set.  Thus, to express\n    the product as a Hermite series, it is necessary to \"reproject\" the\n    product onto said basis set, which may produce \"unintuitive\" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermemul\n    >>> hermemul([1, 2, 3], [0, 1, 2])\n    array([14.,  15.,  28.,   7.,   6.])",
      "code": "def hermemul(c1, c2):\n    \"\"\"\n    Multiply one Hermite series by another.\n\n    Returns the product of two Hermite series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their product.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemulx, hermediv, hermepow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Hermite polynomial basis set.  Thus, to express\n    the product as a Hermite series, it is necessary to \"reproject\" the\n    product onto said basis set, which may produce \"unintuitive\" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermemul\n    >>> hermemul([1, 2, 3], [0, 1, 2])\n    array([14.,  15.,  28.,   7.,   6.])\n\n    \"\"\"\n    # s1, s2 are trimmed copies\n    [c1, c2] = pu.as_series([c1, c2])\n\n    if len(c1) > len(c2):\n        c = c2\n        xs = c1\n    else:\n        c = c1\n        xs = c2\n\n    if len(c) == 1:\n        c0 = c[0] * xs\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0] * xs\n        c1 = c[1] * xs\n    else:\n        nd = len(c)\n        c0 = c[-2] * xs\n        c1 = c[-1] * xs\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = hermesub(c[-i] * xs, c1 * (nd - 1))\n            c1 = hermeadd(tmp, hermemulx(c1))\n    return hermeadd(c0, hermemulx(c1))"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermediv",
      "category": "HermiteE polynomials",
      "description": "Divide one Hermite series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermediv.html",
      "doc": "Divide one Hermite series by another.\n\n    Returns the quotient-with-remainder of two Hermite series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Hermite series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemulx, hermemul, hermepow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Hermite series by another\n    results in quotient and remainder terms that are not in the Hermite\n    polynomial basis set.  Thus, to express these results as a Hermite\n    series, it is necessary to \"reproject\" the results onto the Hermite\n    basis set, which may produce \"unintuitive\" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermediv\n    >>> hermediv([ 14.,  15.,  28.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([0.]))\n    >>> hermediv([ 15.,  17.,  28.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([1., 2.]))",
      "code": "def hermediv(c1, c2):\n    \"\"\"\n    Divide one Hermite series by another.\n\n    Returns the quotient-with-remainder of two Hermite series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Hermite series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemulx, hermemul, hermepow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Hermite series by another\n    results in quotient and remainder terms that are not in the Hermite\n    polynomial basis set.  Thus, to express these results as a Hermite\n    series, it is necessary to \"reproject\" the results onto the Hermite\n    basis set, which may produce \"unintuitive\" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermediv\n    >>> hermediv([ 14.,  15.,  28.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([0.]))\n    >>> hermediv([ 15.,  17.,  28.,   7.,   6.], [0, 1, 2])\n    (array([1., 2., 3.]), array([1., 2.]))\n\n    \"\"\"\n    return pu._div(hermemul, c1, c2)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermepow",
      "category": "HermiteE polynomials",
      "description": "Raise a Hermite series to a power.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermepow.html",
      "doc": "Raise a Hermite series to a power.\n\n    Returns the Hermite series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Hermite series of power.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemulx, hermemul, hermediv\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermepow\n    >>> hermepow([1, 2, 3], 2)\n    array([23.,  28.,  46.,  12.,   9.])",
      "code": "def hermepow(c, pow, maxpower=16):\n    \"\"\"Raise a Hermite series to a power.\n\n    Returns the Hermite series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Hermite series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Hermite series of power.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemulx, hermemul, hermediv\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermepow\n    >>> hermepow([1, 2, 3], 2)\n    array([23.,  28.,  46.,  12.,   9.])\n\n    \"\"\"\n    return pu._pow(hermemul, c, pow, maxpower)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermeder",
      "category": "HermiteE polynomials",
      "description": "Differentiate a Hermite_e series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermeder.html",
      "doc": "Differentiate a Hermite_e series.\n\n    Returns the series coefficients `c` differentiated `m` times along\n    `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*He_0 + 2*He_1 + 3*He_2``\n    while [[1,2],[1,2]] represents ``1*He_0(x)*He_0(y) + 1*He_1(x)*He_0(y)\n    + 2*He_0(x)*He_1(y) + 2*He_1(x)*He_1(y)`` if axis=0 is ``x`` and axis=1\n    is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Hermite_e series coefficients. If `c` is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Hermite series of the derivative.\n\n    See Also\n    --------\n    hermeint\n\n    Notes\n    -----\n    In general, the result of differentiating a Hermite series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be \"unintuitive,\" albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeder\n    >>> hermeder([ 1.,  1.,  1.,  1.])\n    array([1.,  2.,  3.])\n    >>> hermeder([-0.25,  1.,  1./2.,  1./3.,  1./4 ], m=2)\n    array([1.,  2.,  3.])",
      "code": "def hermeder(c, m=1, scl=1, axis=0):\n    \"\"\"\n    Differentiate a Hermite_e series.\n\n    Returns the series coefficients `c` differentiated `m` times along\n    `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*He_0 + 2*He_1 + 3*He_2``\n    while [[1,2],[1,2]] represents ``1*He_0(x)*He_0(y) + 1*He_1(x)*He_0(y)\n    + 2*He_0(x)*He_1(y) + 2*He_1(x)*He_1(y)`` if axis=0 is ``x`` and axis=1\n    is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Hermite_e series coefficients. If `c` is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Hermite series of the derivative.\n\n    See Also\n    --------\n    hermeint\n\n    Notes\n    -----\n    In general, the result of differentiating a Hermite series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be \"unintuitive,\" albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeder\n    >>> hermeder([ 1.,  1.,  1.,  1.])\n    array([1.,  2.,  3.])\n    >>> hermeder([-0.25,  1.,  1./2.,  1./3.,  1./4 ], m=2)\n    array([1.,  2.,  3.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    cnt = pu._as_int(m, \"the order of derivation\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of derivation must be non-negative\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    n = len(c)\n    if cnt >= n:\n        return c[:1] * 0\n    else:\n        for i in range(cnt):\n            n = n - 1\n            c *= scl\n            der = np.empty((n,) + c.shape[1:], dtype=c.dtype)\n            for j in range(n, 0, -1):\n                der[j - 1] = j * c[j]\n            c = der\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermeint",
      "category": "HermiteE polynomials",
      "description": "Integrate a Hermite_e series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermeint.html",
      "doc": "Integrate a Hermite_e series.\n\n    Returns the Hermite_e series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``H_0 + 2*H_1 + 3*H_2`` while [[1,2],[1,2]]\n    represents ``1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) + 2*H_0(x)*H_1(y) +\n    2*H_1(x)*H_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Hermite_e series coefficients. If c is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Hermite_e series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    hermeder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeint\n    >>> hermeint([1, 2, 3]) # integrate once, value 0 at 0.\n    array([1., 1., 1., 1.])\n    >>> hermeint([1, 2, 3], m=2) # integrate twice, value & deriv 0 at 0\n    array([-0.25      ,  1.        ,  0.5       ,  0.33333333,  0.25      ]) # may vary\n    >>> hermeint([1, 2, 3], k=1) # integrate once, value 1 at 0.\n    array([2., 1., 1., 1.])\n    >>> hermeint([1, 2, 3], lbnd=-1) # integrate once, value 0 at -1\n    array([-1.,  1.,  1.,  1.])\n    >>> hermeint([1, 2, 3], m=2, k=[1, 2], lbnd=-1)\n    array([ 1.83333333,  0.        ,  0.5       ,  0.33333333,  0.25      ]) # may vary",
      "code": "def hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n    \"\"\"\n    Integrate a Hermite_e series.\n\n    Returns the Hermite_e series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``H_0 + 2*H_1 + 3*H_2`` while [[1,2],[1,2]]\n    represents ``1*H_0(x)*H_0(y) + 1*H_1(x)*H_0(y) + 2*H_0(x)*H_1(y) +\n    2*H_1(x)*H_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Hermite_e series coefficients. If c is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Hermite_e series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    hermeder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeint\n    >>> hermeint([1, 2, 3]) # integrate once, value 0 at 0.\n    array([1., 1., 1., 1.])\n    >>> hermeint([1, 2, 3], m=2) # integrate twice, value & deriv 0 at 0\n    array([-0.25      ,  1.        ,  0.5       ,  0.33333333,  0.25      ]) # may vary\n    >>> hermeint([1, 2, 3], k=1) # integrate once, value 1 at 0.\n    array([2., 1., 1., 1.])\n    >>> hermeint([1, 2, 3], lbnd=-1) # integrate once, value 0 at -1\n    array([-1.,  1.,  1.,  1.])\n    >>> hermeint([1, 2, 3], m=2, k=[1, 2], lbnd=-1)\n    array([ 1.83333333,  0.        ,  0.5       ,  0.33333333,  0.25      ]) # may vary\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if not np.iterable(k):\n        k = [k]\n    cnt = pu._as_int(m, \"the order of integration\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of integration must be non-negative\")\n    if len(k) > cnt:\n        raise ValueError(\"Too many integration constants\")\n    if np.ndim(lbnd) != 0:\n        raise ValueError(\"lbnd must be a scalar.\")\n    if np.ndim(scl) != 0:\n        raise ValueError(\"scl must be a scalar.\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    k = list(k) + [0] * (cnt - len(k))\n    for i in range(cnt):\n        n = len(c)\n        c *= scl\n        if n == 1 and np.all(c[0] == 0):\n            c[0] += k[i]\n        else:\n            tmp = np.empty((n + 1,) + c.shape[1:], dtype=c.dtype)\n            tmp[0] = c[0] * 0\n            tmp[1] = c[0]\n            for j in range(1, n):\n                tmp[j + 1] = c[j] / (j + 1)\n            tmp[0] += k[i] - hermeval(lbnd, tmp)\n            c = tmp\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermeval",
      "category": "HermiteE polynomials",
      "description": "Evaluate an HermiteE series at points x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermeval.html",
      "doc": "Evaluate an HermiteE series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * He_0(x) + c_1 * He_1(x) + ... + c_n * He_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        with themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    hermeval2d, hermegrid2d, hermeval3d, hermegrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeval\n    >>> coef = [1,2,3]\n    >>> hermeval(1, coef)\n    3.0\n    >>> hermeval([[1,2],[3,4]], coef)\n    array([[ 3., 14.],\n           [31., 54.]])",
      "code": "def hermeval(x, c, tensor=True):\n    \"\"\"\n    Evaluate an HermiteE series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * He_0(x) + c_1 * He_1(x) + ... + c_n * He_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        with themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    hermeval2d, hermegrid2d, hermeval3d, hermegrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeval\n    >>> coef = [1,2,3]\n    >>> hermeval(1, coef)\n    3.0\n    >>> hermeval([[1,2],[3,4]], coef)\n    array([[ 3., 14.],\n           [31., 54.]])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        nd = len(c)\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = c[-i] - c1 * (nd - 1)\n            c1 = tmp + c1 * x\n    return c0 + c1 * x"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermeval2d",
      "category": "HermiteE polynomials",
      "description": "Evaluate a 2-D HermiteE series at points (x, y).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermeval2d.html",
      "doc": "Evaluate a 2-D HermiteE series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * He_i(x) * He_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points formed with\n        pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    hermeval, hermegrid2d, hermeval3d, hermegrid3d",
      "code": "def hermeval2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D HermiteE series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * He_i(x) * He_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points formed with\n        pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    hermeval, hermegrid2d, hermeval3d, hermegrid3d\n    \"\"\"\n    return pu._valnd(hermeval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermegrid2d",
      "category": "HermiteE polynomials",
      "description": "Evaluate a 2-D HermiteE series on the Cartesian product of x and y.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermegrid2d.html",
      "doc": "Evaluate a 2-D HermiteE series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * H_i(a) * H_j(b)\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    hermeval, hermeval2d, hermeval3d, hermegrid3d",
      "code": "def hermegrid2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D HermiteE series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * H_i(a) * H_j(b)\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    hermeval, hermeval2d, hermeval3d, hermegrid3d\n    \"\"\"\n    return pu._gridnd(hermeval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermeval3d",
      "category": "HermiteE polynomials",
      "description": "Evaluate a 3-D Hermite_e series at points (x, y, z).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermeval3d.html",
      "doc": "Evaluate a 3-D Hermite_e series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * He_i(x) * He_j(y) * He_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        `(x, y, z)`, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    hermeval, hermeval2d, hermegrid2d, hermegrid3d",
      "code": "def hermeval3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D Hermite_e series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * He_i(x) * He_j(y) * He_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        `(x, y, z)`, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    hermeval, hermeval2d, hermegrid2d, hermegrid3d\n    \"\"\"\n    return pu._valnd(hermeval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermegrid3d",
      "category": "HermiteE polynomials",
      "description": "Evaluate a 3-D HermiteE series on the Cartesian product of x, y, and z.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermegrid3d.html",
      "doc": "Evaluate a 3-D HermiteE series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * He_i(a) * He_j(b) * He_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    hermeval, hermeval2d, hermegrid2d, hermeval3d",
      "code": "def hermegrid3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D HermiteE series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * He_i(a) * He_j(b) * He_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    hermeval, hermeval2d, hermegrid2d, hermeval3d\n    \"\"\"\n    return pu._gridnd(hermeval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermevander",
      "category": "HermiteE polynomials",
      "description": "Pseudo-Vandermonde matrix of given degree.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermevander.html",
      "doc": "Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = He_i(x),\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the HermiteE polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = hermevander(x, n)``, then ``np.dot(V, c)`` and\n    ``hermeval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of HermiteE series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo-Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding HermiteE polynomial.  The dtype will be the same as\n        the converted `x`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite_e import hermevander\n    >>> x = np.array([-1, 0, 1])\n    >>> hermevander(x, 3)\n    array([[ 1., -1.,  0.,  2.],\n           [ 1.,  0., -1., -0.],\n           [ 1.,  1.,  0., -2.]])",
      "code": "def hermevander(x, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = He_i(x),\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the HermiteE polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = hermevander(x, n)``, then ``np.dot(V, c)`` and\n    ``hermeval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of HermiteE series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo-Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding HermiteE polynomial.  The dtype will be the same as\n        the converted `x`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite_e import hermevander\n    >>> x = np.array([-1, 0, 1])\n    >>> hermevander(x, 3)\n    array([[ 1., -1.,  0.,  2.],\n           [ 1.,  0., -1., -0.],\n           [ 1.,  1.,  0., -2.]])\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg < 0:\n        raise ValueError(\"deg must be non-negative\")\n\n    x = np.array(x, copy=None, ndmin=1) + 0.0\n    dims = (ideg + 1,) + x.shape\n    dtyp = x.dtype\n    v = np.empty(dims, dtype=dtyp)\n    v[0] = x * 0 + 1\n    if ideg > 0:\n        v[1] = x\n        for i in range(2, ideg + 1):\n            v[i] = (v[i - 1] * x - v[i - 2] * (i - 1))\n    return np.moveaxis(v, 0, -1)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermevander2d",
      "category": "HermiteE polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermevander2d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = He_i(x) * He_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the HermiteE polynomials.\n\n    If ``V = hermevander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``hermeval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D HermiteE\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    hermevander, hermevander3d, hermeval2d, hermeval3d",
      "code": "def hermevander2d(x, y, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = He_i(x) * He_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the HermiteE polynomials.\n\n    If ``V = hermevander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``hermeval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D HermiteE\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    hermevander, hermevander3d, hermeval2d, hermeval3d\n    \"\"\"\n    return pu._vander_nd_flat((hermevander, hermevander), (x, y), deg)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermevander3d",
      "category": "HermiteE polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermevander3d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then Hehe pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = He_i(x)*He_j(y)*He_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the HermiteE polynomials.\n\n    If ``V = hermevander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and  ``np.dot(V, c.flat)`` and ``hermeval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D HermiteE\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    hermevander, hermevander3d, hermeval2d, hermeval3d",
      "code": "def hermevander3d(x, y, z, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then Hehe pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = He_i(x)*He_j(y)*He_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the HermiteE polynomials.\n\n    If ``V = hermevander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and  ``np.dot(V, c.flat)`` and ``hermeval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D HermiteE\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    hermevander, hermevander3d, hermeval2d, hermeval3d\n    \"\"\"\n    return pu._vander_nd_flat((hermevander, hermevander, hermevander), (x, y, z), deg)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermefit",
      "category": "HermiteE polynomials",
      "description": "Least squares fit of Hermite series to data.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermefit.html",
      "doc": "Least squares fit of Hermite series to data.\n\n    Return the coefficients of a HermiteE series of degree `deg` that is\n    the least squares fit to the data values `y` given at points `x`. If\n    `y` is 1-D the returned coefficients will also be 1-D. If `y` is 2-D\n    multiple fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * He_1(x) + ... + c_n * He_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Hermite coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full = False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.laguerre.lagfit\n    hermeval : Evaluates a Hermite series.\n    hermevander : pseudo Vandermonde matrix of Hermite series.\n    hermeweight : HermiteE weight function.\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the HermiteE series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the pseudo Vandermonde matrix of `x`, the elements of `c`\n    are the coefficients to be solved for, and the elements of `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using HermiteE series are probably most useful when the data can\n    be approximated by ``sqrt(w(x)) * p(x)``, where ``w(x)`` is the HermiteE\n    weight. In that case the weight ``sqrt(w(x[i]))`` should be used\n    together with data values ``y[i]/sqrt(w(x[i]))``. The weight function is\n    available as `hermeweight`.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite_e import hermefit, hermeval\n    >>> x = np.linspace(-10, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = hermeval(x, [1, 2, 3]) + err\n    >>> hermefit(x, y, 2)\n    array([1.02284196, 2.00032805, 2.99978457]) # may vary",
      "code": "def hermefit(x, y, deg, rcond=None, full=False, w=None):\n    \"\"\"\n    Least squares fit of Hermite series to data.\n\n    Return the coefficients of a HermiteE series of degree `deg` that is\n    the least squares fit to the data values `y` given at points `x`. If\n    `y` is 1-D the returned coefficients will also be 1-D. If `y` is 2-D\n    multiple fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * He_1(x) + ... + c_n * He_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Hermite coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full = False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.laguerre.lagfit\n    hermeval : Evaluates a Hermite series.\n    hermevander : pseudo Vandermonde matrix of Hermite series.\n    hermeweight : HermiteE weight function.\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the HermiteE series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the pseudo Vandermonde matrix of `x`, the elements of `c`\n    are the coefficients to be solved for, and the elements of `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using HermiteE series are probably most useful when the data can\n    be approximated by ``sqrt(w(x)) * p(x)``, where ``w(x)`` is the HermiteE\n    weight. In that case the weight ``sqrt(w(x[i]))`` should be used\n    together with data values ``y[i]/sqrt(w(x[i]))``. The weight function is\n    available as `hermeweight`.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.hermite_e import hermefit, hermeval\n    >>> x = np.linspace(-10, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = hermeval(x, [1, 2, 3]) + err\n    >>> hermefit(x, y, 2)\n    array([1.02284196, 2.00032805, 2.99978457]) # may vary\n\n    \"\"\"\n    return pu._fit(hermevander, x, y, deg, rcond, full, w)"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermecompanion",
      "category": "HermiteE polynomials",
      "description": "Return the scaled companion matrix of c.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermecompanion.html",
      "doc": "Return the scaled companion matrix of c.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `c` is an HermiteE basis polynomial. This provides\n    better eigenvalue estimates than the unscaled case and for basis\n    polynomials the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of HermiteE series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).",
      "code": "def hermecompanion(c):\n    \"\"\"\n    Return the scaled companion matrix of c.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `c` is an HermiteE basis polynomial. This provides\n    better eigenvalue estimates than the unscaled case and for basis\n    polynomials the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of HermiteE series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) < 2:\n        raise ValueError('Series must have maximum degree of at least 1.')\n    if len(c) == 2:\n        return np.array([[-c[0] / c[1]]])\n\n    n = len(c) - 1\n    mat = np.zeros((n, n), dtype=c.dtype)\n    scl = np.hstack((1., 1. / np.sqrt(np.arange(n - 1, 0, -1))))\n    scl = np.multiply.accumulate(scl)[::-1]\n    top = mat.reshape(-1)[1::n + 1]\n    bot = mat.reshape(-1)[n::n + 1]\n    top[...] = np.sqrt(np.arange(1, n))\n    bot[...] = top\n    mat[:, -1] -= scl * c[:-1] / c[-1]\n    return mat"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermeroots",
      "category": "HermiteE polynomials",
      "description": "Compute the roots of a HermiteE series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermeroots.html",
      "doc": "Compute the roots of a HermiteE series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * He_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.chebyshev.chebroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    The HermiteE series basis polynomials aren't powers of `x` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeroots, hermefromroots\n    >>> coef = hermefromroots([-1, 0, 1])\n    >>> coef\n    array([0., 2., 0., 1.])\n    >>> hermeroots(coef)\n    array([-1.,  0.,  1.]) # may vary",
      "code": "def hermeroots(c):\n    \"\"\"\n    Compute the roots of a HermiteE series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * He_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.laguerre.lagroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.chebyshev.chebroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    The HermiteE series basis polynomials aren't powers of `x` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeroots, hermefromroots\n    >>> coef = hermefromroots([-1, 0, 1])\n    >>> coef\n    array([0., 2., 0., 1.])\n    >>> hermeroots(coef)\n    array([-1.,  0.,  1.]) # may vary\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) <= 1:\n        return np.array([], dtype=c.dtype)\n    if len(c) == 2:\n        return np.array([-c[0] / c[1]])\n\n    # rotated companion matrix reduces error\n    m = hermecompanion(c)[::-1, ::-1]\n    r = la.eigvals(m)\n    r.sort()\n    return r"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermegauss",
      "category": "HermiteE polynomials",
      "description": "Gauss-HermiteE quadrature.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermegauss.html",
      "doc": "Gauss-HermiteE quadrature.\n\n    Computes the sample points and weights for Gauss-HermiteE quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[-\\\\inf, \\\\inf]`\n    with the weight function :math:`f(x) = \\\\exp(-x^2/2)`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100, higher degrees may\n    be problematic. The weights are determined by using the fact that\n\n    .. math:: w_k = c / (He'_n(x_k) * He_{n-1}(x_k))\n\n    where :math:`c` is a constant independent of :math:`k` and :math:`x_k`\n    is the k'th root of :math:`He_n`, and then scaling the results to get\n    the right value when integrating 1.",
      "code": "def hermegauss(deg):\n    \"\"\"\n    Gauss-HermiteE quadrature.\n\n    Computes the sample points and weights for Gauss-HermiteE quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[-\\\\inf, \\\\inf]`\n    with the weight function :math:`f(x) = \\\\exp(-x^2/2)`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100, higher degrees may\n    be problematic. The weights are determined by using the fact that\n\n    .. math:: w_k = c / (He'_n(x_k) * He_{n-1}(x_k))\n\n    where :math:`c` is a constant independent of :math:`k` and :math:`x_k`\n    is the k'th root of :math:`He_n`, and then scaling the results to get\n    the right value when integrating 1.\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg <= 0:\n        raise ValueError(\"deg must be a positive integer\")\n\n    # first approximation of roots. We use the fact that the companion\n    # matrix is symmetric in this case in order to obtain better zeros.\n    c = np.array([0] * deg + [1])\n    m = hermecompanion(c)\n    x = la.eigvalsh(m)\n\n    # improve roots by one application of Newton\n    dy = _normed_hermite_e_n(x, ideg)\n    df = _normed_hermite_e_n(x, ideg - 1) * np.sqrt(ideg)\n    x -= dy / df\n\n    # compute the weights. We scale the factor to avoid possible numerical\n    # overflow.\n    fm = _normed_hermite_e_n(x, ideg - 1)\n    fm /= np.abs(fm).max()\n    w = 1 / (fm * fm)\n\n    # for Hermite_e we can also symmetrize\n    w = (w + w[::-1]) / 2\n    x = (x - x[::-1]) / 2\n\n    # scale w to get the right value\n    w *= np.sqrt(2 * np.pi) / w.sum()\n\n    return x, w"
    },
    {
      "name": "numpy.polynomial.hermite_e.hermeweight",
      "category": "HermiteE polynomials",
      "description": "Weight function of the Hermite_e polynomials.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.hermeweight.html",
      "doc": "Weight function of the Hermite_e polynomials.\n\n    The weight function is :math:`\\\\exp(-x^2/2)` and the interval of\n    integration is :math:`[-\\\\inf, \\\\inf]`. the HermiteE polynomials are\n    orthogonal, but not normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.",
      "code": "def hermeweight(x):\n    \"\"\"Weight function of the Hermite_e polynomials.\n\n    The weight function is :math:`\\\\exp(-x^2/2)` and the interval of\n    integration is :math:`[-\\\\inf, \\\\inf]`. the HermiteE polynomials are\n    orthogonal, but not normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n    \"\"\"\n    w = np.exp(-.5 * x**2)\n    return w\n\n\n#\n# HermiteE series class\n#"
    },
    {
      "name": "numpy.polynomial.hermite_e.HermiteE",
      "category": "HermiteE polynomials",
      "description": "An HermiteE series class.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.hermite_e.HermiteE.html",
      "doc": "An HermiteE series class.\n\n    The HermiteE class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        HermiteE coefficients in order of increasing degree, i.e,\n        ``(1, 2, 3)`` gives ``1*He_0(x) + 2*He_1(X) + 3*He_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24",
      "code": "class HermiteE(ABCPolyBase):\n    \"\"\"An HermiteE series class.\n\n    The HermiteE class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        HermiteE coefficients in order of increasing degree, i.e,\n        ``(1, 2, 3)`` gives ``1*He_0(x) + 2*He_1(X) + 3*He_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [-1., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [-1., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24\n\n    \"\"\"",
      "type": "class"
    },
    {
      "name": "numpy.polynomial.laguerre.poly2lag",
      "category": "Laguerre polynomials",
      "description": "poly2lag(pol)",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.poly2lag.html",
      "doc": "poly2lag(pol)\n\n    Convert a polynomial to a Laguerre series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Laguerre series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Laguerre\n        series.\n\n    See Also\n    --------\n    lag2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import poly2lag\n    >>> poly2lag(np.arange(4))\n    array([ 23., -63.,  58., -18.])",
      "code": "def poly2lag(pol):\n    \"\"\"\n    poly2lag(pol)\n\n    Convert a polynomial to a Laguerre series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the \"standard\" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Laguerre series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-D array containing the polynomial coefficients\n\n    Returns\n    -------\n    c : ndarray\n        1-D array containing the coefficients of the equivalent Laguerre\n        series.\n\n    See Also\n    --------\n    lag2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import poly2lag\n    >>> poly2lag(np.arange(4))\n    array([ 23., -63.,  58., -18.])\n\n    \"\"\"\n    [pol] = pu.as_series([pol])\n    res = 0\n    for p in pol[::-1]:\n        res = lagadd(lagmulx(res), p)\n    return res"
    },
    {
      "name": "numpy.polynomial.laguerre.lag2poly",
      "category": "Laguerre polynomials",
      "description": "Convert a Laguerre series to a polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lag2poly.html",
      "doc": "Convert a Laguerre series to a polynomial.\n\n    Convert an array representing the coefficients of a Laguerre series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Laguerre series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2lag\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lag2poly\n    >>> lag2poly([ 23., -63.,  58., -18.])\n    array([0., 1., 2., 3.])",
      "code": "def lag2poly(c):\n    \"\"\"\n    Convert a Laguerre series to a polynomial.\n\n    Convert an array representing the coefficients of a Laguerre series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the \"standard\" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array containing the Laguerre series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-D array containing the coefficients of the equivalent polynomial\n        (relative to the \"standard\" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2lag\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lag2poly\n    >>> lag2poly([ 23., -63.,  58., -18.])\n    array([0., 1., 2., 3.])\n\n    \"\"\"\n    from .polynomial import polyadd, polymulx, polysub\n\n    [c] = pu.as_series([c])\n    n = len(c)\n    if n == 1:\n        return c\n    else:\n        c0 = c[-2]\n        c1 = c[-1]\n        # i is the current degree of c1\n        for i in range(n - 1, 1, -1):\n            tmp = c0\n            c0 = polysub(c[i - 2], (c1 * (i - 1)) / i)\n            c1 = polyadd(tmp, polysub((2 * i - 1) * c1, polymulx(c1)) / i)\n        return polyadd(c0, polysub(c1, polymulx(c1)))\n\n\n#\n# These are constant arrays are of integer type so as to be compatible\n# with the widest range of other types, such as Decimal.\n#\n\n# Laguerre\nlagdomain = np.array([0., 1.])\n\n# Laguerre coefficients representing zero.\nlagzero = np.array([0])\n\n# Laguerre coefficients representing one.\nlagone = np.array([1])\n\n# Laguerre coefficients representing the identity x.\nlagx = np.array([1, -1])"
    },
    {
      "name": "numpy.polynomial.laguerre.lagline",
      "category": "Laguerre polynomials",
      "description": "Laguerre series whose graph is a straight line.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagline.html",
      "doc": "Laguerre series whose graph is a straight line.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Laguerre series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagline, lagval\n    >>> lagval(0,lagline(3, 2))\n    3.0\n    >>> lagval(1,lagline(3, 2))\n    5.0",
      "code": "def lagline(off, scl):\n    \"\"\"\n    Laguerre series whose graph is a straight line.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Laguerre series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyline\n    numpy.polynomial.chebyshev.chebline\n    numpy.polynomial.legendre.legline\n    numpy.polynomial.hermite.hermline\n    numpy.polynomial.hermite_e.hermeline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagline, lagval\n    >>> lagval(0,lagline(3, 2))\n    3.0\n    >>> lagval(1,lagline(3, 2))\n    5.0\n\n    \"\"\"\n    if scl != 0:\n        return np.array([off + scl, -scl])\n    else:\n        return np.array([off])"
    },
    {
      "name": "numpy.polynomial.laguerre.lagfromroots",
      "category": "Laguerre polynomials",
      "description": "Generate a Laguerre series with given roots.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagfromroots.html",
      "doc": "Generate a Laguerre series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in Laguerre form, where the :math:`r_n` are the roots specified in `roots`.\n    If a zero has multiplicity n, then it must appear in `roots` n times.\n    For instance, if 2 is a root of multiplicity three and 3 is a root of\n    multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The\n    roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * L_1(x) + ... +  c_n * L_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in Laguerre form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.chebyshev.chebfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagfromroots, lagval\n    >>> coef = lagfromroots((-1, 0, 1))\n    >>> lagval((-1, 0, 1), coef)\n    array([0.,  0.,  0.])\n    >>> coef = lagfromroots((-1j, 1j))\n    >>> lagval((-1j, 1j), coef)\n    array([0.+0.j, 0.+0.j])",
      "code": "def lagfromroots(roots):\n    \"\"\"\n    Generate a Laguerre series with given roots.\n\n    The function returns the coefficients of the polynomial\n\n    .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),\n\n    in Laguerre form, where the :math:`r_n` are the roots specified in `roots`.\n    If a zero has multiplicity n, then it must appear in `roots` n times.\n    For instance, if 2 is a root of multiplicity three and 3 is a root of\n    multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The\n    roots can appear in any order.\n\n    If the returned coefficients are `c`, then\n\n    .. math:: p(x) = c_0 + c_1 * L_1(x) + ... +  c_n * L_n(x)\n\n    The coefficient of the last term is not generally 1 for monic\n    polynomials in Laguerre form.\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-D array of coefficients.  If all roots are real then `out` is a\n        real array, if some of the roots are complex, then `out` is complex\n        even if all the coefficients in the result are real (see Examples\n        below).\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfromroots\n    numpy.polynomial.legendre.legfromroots\n    numpy.polynomial.chebyshev.chebfromroots\n    numpy.polynomial.hermite.hermfromroots\n    numpy.polynomial.hermite_e.hermefromroots\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagfromroots, lagval\n    >>> coef = lagfromroots((-1, 0, 1))\n    >>> lagval((-1, 0, 1), coef)\n    array([0.,  0.,  0.])\n    >>> coef = lagfromroots((-1j, 1j))\n    >>> lagval((-1j, 1j), coef)\n    array([0.+0.j, 0.+0.j])\n\n    \"\"\"\n    return pu._fromroots(lagline, lagmul, roots)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagadd",
      "category": "Laguerre polynomials",
      "description": "Add one Laguerre series to another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagadd.html",
      "doc": "Add one Laguerre series to another.\n\n    Returns the sum of two Laguerre series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Laguerre series of their sum.\n\n    See Also\n    --------\n    lagsub, lagmulx, lagmul, lagdiv, lagpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Laguerre series\n    is a Laguerre series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagadd\n    >>> lagadd([1, 2, 3], [1, 2, 3, 4])\n    array([2.,  4.,  6.,  4.])",
      "code": "def lagadd(c1, c2):\n    \"\"\"\n    Add one Laguerre series to another.\n\n    Returns the sum of two Laguerre series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Laguerre series of their sum.\n\n    See Also\n    --------\n    lagsub, lagmulx, lagmul, lagdiv, lagpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Laguerre series\n    is a Laguerre series (without having to \"reproject\" the result onto\n    the basis set) so addition, just like that of \"standard\" polynomials,\n    is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagadd\n    >>> lagadd([1, 2, 3], [1, 2, 3, 4])\n    array([2.,  4.,  6.,  4.])\n\n    \"\"\"\n    return pu._add(c1, c2)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagsub",
      "category": "Laguerre polynomials",
      "description": "Subtract one Laguerre series from another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagsub.html",
      "doc": "Subtract one Laguerre series from another.\n\n    Returns the difference of two Laguerre series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Laguerre series coefficients representing their difference.\n\n    See Also\n    --------\n    lagadd, lagmulx, lagmul, lagdiv, lagpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Laguerre\n    series is a Laguerre series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagsub\n    >>> lagsub([1, 2, 3, 4], [1, 2, 3])\n    array([0.,  0.,  0.,  4.])",
      "code": "def lagsub(c1, c2):\n    \"\"\"\n    Subtract one Laguerre series from another.\n\n    Returns the difference of two Laguerre series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Laguerre series coefficients representing their difference.\n\n    See Also\n    --------\n    lagadd, lagmulx, lagmul, lagdiv, lagpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Laguerre\n    series is a Laguerre series (without having to \"reproject\" the result\n    onto the basis set) so subtraction, just like that of \"standard\"\n    polynomials, is simply \"component-wise.\"\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagsub\n    >>> lagsub([1, 2, 3, 4], [1, 2, 3])\n    array([0.,  0.,  0.,  4.])\n\n    \"\"\"\n    return pu._sub(c1, c2)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagmulx",
      "category": "Laguerre polynomials",
      "description": "Multiply a Laguerre series by x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagmulx.html",
      "doc": "Multiply a Laguerre series by x.\n\n    Multiply the Laguerre series `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmul, lagdiv, lagpow\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Laguerre\n    polynomials in the form\n\n    .. math::\n\n        xP_i(x) = (-(i + 1)*P_{i + 1}(x) + (2i + 1)P_{i}(x) - iP_{i - 1}(x))\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagmulx\n    >>> lagmulx([1, 2, 3])\n    array([-1.,  -1.,  11.,  -9.])",
      "code": "def lagmulx(c):\n    \"\"\"Multiply a Laguerre series by x.\n\n    Multiply the Laguerre series `c` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmul, lagdiv, lagpow\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Laguerre\n    polynomials in the form\n\n    .. math::\n\n        xP_i(x) = (-(i + 1)*P_{i + 1}(x) + (2i + 1)P_{i}(x) - iP_{i - 1}(x))\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagmulx\n    >>> lagmulx([1, 2, 3])\n    array([-1.,  -1.,  11.,  -9.])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    # The zero series needs special treatment\n    if len(c) == 1 and c[0] == 0:\n        return c\n\n    prd = np.empty(len(c) + 1, dtype=c.dtype)\n    prd[0] = c[0]\n    prd[1] = -c[0]\n    for i in range(1, len(c)):\n        prd[i + 1] = -c[i] * (i + 1)\n        prd[i] += c[i] * (2 * i + 1)\n        prd[i - 1] -= c[i] * i\n    return prd"
    },
    {
      "name": "numpy.polynomial.laguerre.lagmul",
      "category": "Laguerre polynomials",
      "description": "Multiply one Laguerre series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagmul.html",
      "doc": "Multiply one Laguerre series by another.\n\n    Returns the product of two Laguerre series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Laguerre series coefficients representing their product.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmulx, lagdiv, lagpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Laguerre polynomial basis set.  Thus, to express\n    the product as a Laguerre series, it is necessary to \"reproject\" the\n    product onto said basis set, which may produce \"unintuitive\" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagmul\n    >>> lagmul([1, 2, 3], [0, 1, 2])\n    array([  8., -13.,  38., -51.,  36.])",
      "code": "def lagmul(c1, c2):\n    \"\"\"\n    Multiply one Laguerre series by another.\n\n    Returns the product of two Laguerre series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order \"term\" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Laguerre series coefficients representing their product.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmulx, lagdiv, lagpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Laguerre polynomial basis set.  Thus, to express\n    the product as a Laguerre series, it is necessary to \"reproject\" the\n    product onto said basis set, which may produce \"unintuitive\" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagmul\n    >>> lagmul([1, 2, 3], [0, 1, 2])\n    array([  8., -13.,  38., -51.,  36.])\n\n    \"\"\"\n    # s1, s2 are trimmed copies\n    [c1, c2] = pu.as_series([c1, c2])\n\n    if len(c1) > len(c2):\n        c = c2\n        xs = c1\n    else:\n        c = c1\n        xs = c2\n\n    if len(c) == 1:\n        c0 = c[0] * xs\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0] * xs\n        c1 = c[1] * xs\n    else:\n        nd = len(c)\n        c0 = c[-2] * xs\n        c1 = c[-1] * xs\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = lagsub(c[-i] * xs, (c1 * (nd - 1)) / nd)\n            c1 = lagadd(tmp, lagsub((2 * nd - 1) * c1, lagmulx(c1)) / nd)\n    return lagadd(c0, lagsub(c1, lagmulx(c1)))"
    },
    {
      "name": "numpy.polynomial.laguerre.lagdiv",
      "category": "Laguerre polynomials",
      "description": "Divide one Laguerre series by another.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagdiv.html",
      "doc": "Divide one Laguerre series by another.\n\n    Returns the quotient-with-remainder of two Laguerre series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Laguerre series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmulx, lagmul, lagpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Laguerre series by another\n    results in quotient and remainder terms that are not in the Laguerre\n    polynomial basis set.  Thus, to express these results as a Laguerre\n    series, it is necessary to \"reproject\" the results onto the Laguerre\n    basis set, which may produce \"unintuitive\" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagdiv\n    >>> lagdiv([  8., -13.,  38., -51.,  36.], [0, 1, 2])\n    (array([1., 2., 3.]), array([0.]))\n    >>> lagdiv([  9., -12.,  38., -51.,  36.], [0, 1, 2])\n    (array([1., 2., 3.]), array([1., 1.]))",
      "code": "def lagdiv(c1, c2):\n    \"\"\"\n    Divide one Laguerre series by another.\n\n    Returns the quotient-with-remainder of two Laguerre series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order \"term\" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Laguerre series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmulx, lagmul, lagpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Laguerre series by another\n    results in quotient and remainder terms that are not in the Laguerre\n    polynomial basis set.  Thus, to express these results as a Laguerre\n    series, it is necessary to \"reproject\" the results onto the Laguerre\n    basis set, which may produce \"unintuitive\" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagdiv\n    >>> lagdiv([  8., -13.,  38., -51.,  36.], [0, 1, 2])\n    (array([1., 2., 3.]), array([0.]))\n    >>> lagdiv([  9., -12.,  38., -51.,  36.], [0, 1, 2])\n    (array([1., 2., 3.]), array([1., 1.]))\n\n    \"\"\"\n    return pu._div(lagmul, c1, c2)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagpow",
      "category": "Laguerre polynomials",
      "description": "Raise a Laguerre series to a power.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagpow.html",
      "doc": "Raise a Laguerre series to a power.\n\n    Returns the Laguerre series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Laguerre series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Laguerre series of power.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmulx, lagmul, lagdiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagpow\n    >>> lagpow([1, 2, 3], 2)\n    array([ 14., -16.,  56., -72.,  54.])",
      "code": "def lagpow(c, pow, maxpower=16):\n    \"\"\"Raise a Laguerre series to a power.\n\n    Returns the Laguerre series `c` raised to the power `pow`. The\n    argument `c` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Laguerre series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to unmanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Laguerre series of power.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmulx, lagmul, lagdiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagpow\n    >>> lagpow([1, 2, 3], 2)\n    array([ 14., -16.,  56., -72.,  54.])\n\n    \"\"\"\n    return pu._pow(lagmul, c, pow, maxpower)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagder",
      "category": "Laguerre polynomials",
      "description": "Differentiate a Laguerre series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagder.html",
      "doc": "Differentiate a Laguerre series.\n\n    Returns the Laguerre series coefficients `c` differentiated `m` times\n    along `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*L_0 + 2*L_1 + 3*L_2``\n    while [[1,2],[1,2]] represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) +\n    2*L_0(x)*L_1(y) + 2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Laguerre series coefficients. If `c` is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Laguerre series of the derivative.\n\n    See Also\n    --------\n    lagint\n\n    Notes\n    -----\n    In general, the result of differentiating a Laguerre series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be \"unintuitive,\" albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagder\n    >>> lagder([ 1.,  1.,  1., -3.])\n    array([1.,  2.,  3.])\n    >>> lagder([ 1.,  0.,  0., -4.,  3.], m=2)\n    array([1.,  2.,  3.])",
      "code": "def lagder(c, m=1, scl=1, axis=0):\n    \"\"\"\n    Differentiate a Laguerre series.\n\n    Returns the Laguerre series coefficients `c` differentiated `m` times\n    along `axis`.  At each iteration the result is multiplied by `scl` (the\n    scaling factor is for use in a linear change of variable). The argument\n    `c` is an array of coefficients from low to high degree along each\n    axis, e.g., [1,2,3] represents the series ``1*L_0 + 2*L_1 + 3*L_2``\n    while [[1,2],[1,2]] represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) +\n    2*L_0(x)*L_1(y) + 2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is\n    ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Laguerre series coefficients. If `c` is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n    axis : int, optional\n        Axis over which the derivative is taken. (Default: 0).\n\n    Returns\n    -------\n    der : ndarray\n        Laguerre series of the derivative.\n\n    See Also\n    --------\n    lagint\n\n    Notes\n    -----\n    In general, the result of differentiating a Laguerre series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be \"unintuitive,\" albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagder\n    >>> lagder([ 1.,  1.,  1., -3.])\n    array([1.,  2.,  3.])\n    >>> lagder([ 1.,  0.,  0., -4.,  3.], m=2)\n    array([1.,  2.,  3.])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n\n    cnt = pu._as_int(m, \"the order of derivation\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of derivation must be non-negative\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    n = len(c)\n    if cnt >= n:\n        c = c[:1] * 0\n    else:\n        for i in range(cnt):\n            n = n - 1\n            c *= scl\n            der = np.empty((n,) + c.shape[1:], dtype=c.dtype)\n            for j in range(n, 1, -1):\n                der[j - 1] = -c[j]\n                c[j - 1] += c[j]\n            der[0] = -c[1]\n            c = der\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.laguerre.lagint",
      "category": "Laguerre polynomials",
      "description": "Integrate a Laguerre series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagint.html",
      "doc": "Integrate a Laguerre series.\n\n    Returns the Laguerre series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``L_0 + 2*L_1 + 3*L_2`` while [[1,2],[1,2]]\n    represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) + 2*L_0(x)*L_1(y) +\n    2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Laguerre series coefficients. If `c` is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Laguerre series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    lagder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagint\n    >>> lagint([1,2,3])\n    array([ 1.,  1.,  1., -3.])\n    >>> lagint([1,2,3], m=2)\n    array([ 1.,  0.,  0., -4.,  3.])\n    >>> lagint([1,2,3], k=1)\n    array([ 2.,  1.,  1., -3.])\n    >>> lagint([1,2,3], lbnd=-1)\n    array([11.5,  1. ,  1. , -3. ])\n    >>> lagint([1,2], m=2, k=[1,2], lbnd=-1)\n    array([ 11.16666667,  -5.        ,  -3.        ,   2.        ]) # may vary",
      "code": "def lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0):\n    \"\"\"\n    Integrate a Laguerre series.\n\n    Returns the Laguerre series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``L_0 + 2*L_1 + 3*L_2`` while [[1,2],[1,2]]\n    represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) + 2*L_0(x)*L_1(y) +\n    2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Laguerre series coefficients. If `c` is multidimensional\n        the different axis correspond to different variables with the\n        degree in each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Laguerre series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    lagder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagint\n    >>> lagint([1,2,3])\n    array([ 1.,  1.,  1., -3.])\n    >>> lagint([1,2,3], m=2)\n    array([ 1.,  0.,  0., -4.,  3.])\n    >>> lagint([1,2,3], k=1)\n    array([ 2.,  1.,  1., -3.])\n    >>> lagint([1,2,3], lbnd=-1)\n    array([11.5,  1. ,  1. , -3. ])\n    >>> lagint([1,2], m=2, k=[1,2], lbnd=-1)\n    array([ 11.16666667,  -5.        ,  -3.        ,   2.        ]) # may vary\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=True)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if not np.iterable(k):\n        k = [k]\n    cnt = pu._as_int(m, \"the order of integration\")\n    iaxis = pu._as_int(axis, \"the axis\")\n    if cnt < 0:\n        raise ValueError(\"The order of integration must be non-negative\")\n    if len(k) > cnt:\n        raise ValueError(\"Too many integration constants\")\n    if np.ndim(lbnd) != 0:\n        raise ValueError(\"lbnd must be a scalar.\")\n    if np.ndim(scl) != 0:\n        raise ValueError(\"scl must be a scalar.\")\n    iaxis = normalize_axis_index(iaxis, c.ndim)\n\n    if cnt == 0:\n        return c\n\n    c = np.moveaxis(c, iaxis, 0)\n    k = list(k) + [0] * (cnt - len(k))\n    for i in range(cnt):\n        n = len(c)\n        c *= scl\n        if n == 1 and np.all(c[0] == 0):\n            c[0] += k[i]\n        else:\n            tmp = np.empty((n + 1,) + c.shape[1:], dtype=c.dtype)\n            tmp[0] = c[0]\n            tmp[1] = -c[0]\n            for j in range(1, n):\n                tmp[j] += c[j]\n                tmp[j + 1] = -c[j]\n            tmp[0] += k[i] - lagval(lbnd, tmp)\n            c = tmp\n    c = np.moveaxis(c, 0, iaxis)\n    return c"
    },
    {
      "name": "numpy.polynomial.laguerre.lagval",
      "category": "Laguerre polynomials",
      "description": "Evaluate a Laguerre series at points x.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagval.html",
      "doc": "Evaluate a Laguerre series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * L_0(x) + c_1 * L_1(x) + ... + c_n * L_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    lagval2d, laggrid2d, lagval3d, laggrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagval\n    >>> coef = [1, 2, 3]\n    >>> lagval(1, coef)\n    -0.5\n    >>> lagval([[1, 2],[3, 4]], coef)\n    array([[-0.5, -4. ],\n           [-4.5, -2. ]])",
      "code": "def lagval(x, c, tensor=True):\n    \"\"\"\n    Evaluate a Laguerre series at points x.\n\n    If `c` is of length ``n + 1``, this function returns the value:\n\n    .. math:: p(x) = c_0 * L_0(x) + c_1 * L_1(x) + ... + c_n * L_n(x)\n\n    The parameter `x` is converted to an array only if it is a tuple or a\n    list, otherwise it is treated as a scalar. In either case, either `x`\n    or its elements must support multiplication and addition both with\n    themselves and with the elements of `c`.\n\n    If `c` is a 1-D array, then ``p(x)`` will have the same shape as `x`.  If\n    `c` is multidimensional, then the shape of the result depends on the\n    value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +\n    x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that\n    scalars have shape (,).\n\n    Trailing zeros in the coefficients will be used in the evaluation, so\n    they should be avoided if efficiency is a concern.\n\n    Parameters\n    ----------\n    x : array_like, compatible object\n        If `x` is a list or tuple, it is converted to an ndarray, otherwise\n        it is left unchanged and treated as a scalar. In either case, `x`\n        or its elements must support addition and multiplication with\n        themselves and with the elements of `c`.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree n are contained in c[n]. If `c` is multidimensional the\n        remaining indices enumerate multiple polynomials. In the two\n        dimensional case the coefficients may be thought of as stored in\n        the columns of `c`.\n    tensor : boolean, optional\n        If True, the shape of the coefficient array is extended with ones\n        on the right, one for each dimension of `x`. Scalars have dimension 0\n        for this action. The result is that every column of coefficients in\n        `c` is evaluated for every element of `x`. If False, `x` is broadcast\n        over the columns of `c` for the evaluation.  This keyword is useful\n        when `c` is multidimensional. The default value is True.\n\n    Returns\n    -------\n    values : ndarray, algebra_like\n        The shape of the return value is described above.\n\n    See Also\n    --------\n    lagval2d, laggrid2d, lagval3d, laggrid3d\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagval\n    >>> coef = [1, 2, 3]\n    >>> lagval(1, coef)\n    -0.5\n    >>> lagval([[1, 2],[3, 4]], coef)\n    array([[-0.5, -4. ],\n           [-4.5, -2. ]])\n\n    \"\"\"\n    c = np.array(c, ndmin=1, copy=None)\n    if c.dtype.char in '?bBhHiIlLqQpP':\n        c = c.astype(np.double)\n    if isinstance(x, (tuple, list)):\n        x = np.asarray(x)\n    if isinstance(x, np.ndarray) and tensor:\n        c = c.reshape(c.shape + (1,) * x.ndim)\n\n    if len(c) == 1:\n        c0 = c[0]\n        c1 = 0\n    elif len(c) == 2:\n        c0 = c[0]\n        c1 = c[1]\n    else:\n        nd = len(c)\n        c0 = c[-2]\n        c1 = c[-1]\n        for i in range(3, len(c) + 1):\n            tmp = c0\n            nd = nd - 1\n            c0 = c[-i] - (c1 * (nd - 1)) / nd\n            c1 = tmp + (c1 * ((2 * nd - 1) - x)) / nd\n    return c0 + c1 * (1 - x)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagval2d",
      "category": "Laguerre polynomials",
      "description": "Evaluate a 2-D Laguerre series at points (x, y).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagval2d.html",
      "doc": "Evaluate a 2-D Laguerre series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * L_i(x) * L_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points formed with\n        pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    lagval, laggrid2d, lagval3d, laggrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagval2d\n    >>> c = [[1, 2],[3, 4]]\n    >>> lagval2d(1, 1, c)\n    1.0",
      "code": "def lagval2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D Laguerre series at points (x, y).\n\n    This function returns the values:\n\n    .. math:: p(x,y) = \\\\sum_{i,j} c_{i,j} * L_i(x) * L_j(y)\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars and they\n    must have the same shape after conversion. In either case, either `x`\n    and `y` or their elements must support multiplication and addition both\n    with themselves and with the elements of `c`.\n\n    If `c` is a 1-D array a one is implicitly appended to its shape to make\n    it 2-D. The shape of the result will be c.shape[2:] + x.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points ``(x, y)``,\n        where `x` and `y` must have the same shape. If `x` or `y` is a list\n        or tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and if it isn't an ndarray it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term\n        of multi-degree i,j is contained in ``c[i,j]``. If `c` has\n        dimension greater than two the remaining indices enumerate multiple\n        sets of coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points formed with\n        pairs of corresponding values from `x` and `y`.\n\n    See Also\n    --------\n    lagval, laggrid2d, lagval3d, laggrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagval2d\n    >>> c = [[1, 2],[3, 4]]\n    >>> lagval2d(1, 1, c)\n    1.0\n    \"\"\"\n    return pu._valnd(lagval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.laguerre.laggrid2d",
      "category": "Laguerre polynomials",
      "description": "Evaluate a 2-D Laguerre series on the Cartesian product of x and y.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.laggrid2d.html",
      "doc": "Evaluate a 2-D Laguerre series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape + y.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j is contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Chebyshev series at points in the\n        Cartesian product of `x` and `y`.\n\n    See Also\n    --------\n    lagval, lagval2d, lagval3d, laggrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import laggrid2d\n    >>> c = [[1, 2], [3, 4]]\n    >>> laggrid2d([0, 1], [0, 1], c)\n    array([[10.,  4.],\n           [ 3.,  1.]])",
      "code": "def laggrid2d(x, y, c):\n    \"\"\"\n    Evaluate a 2-D Laguerre series on the Cartesian product of x and y.\n\n    This function returns the values:\n\n    .. math:: p(a,b) = \\\\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)\n\n    where the points ``(a, b)`` consist of all pairs formed by taking\n    `a` from `x` and `b` from `y`. The resulting points form a grid with\n    `x` in the first dimension and `y` in the second.\n\n    The parameters `x` and `y` are converted to arrays only if they are\n    tuples or a lists, otherwise they are treated as a scalars. In either\n    case, either `x` and `y` or their elements must support multiplication\n    and addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than two dimensions, ones are implicitly appended to\n    its shape to make it 2-D. The shape of the result will be c.shape[2:] +\n    x.shape + y.shape.\n\n    Parameters\n    ----------\n    x, y : array_like, compatible objects\n        The two dimensional series is evaluated at the points in the\n        Cartesian product of `x` and `y`.  If `x` or `y` is a list or\n        tuple, it is first converted to an ndarray, otherwise it is left\n        unchanged and, if it isn't an ndarray, it is treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j is contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional Chebyshev series at points in the\n        Cartesian product of `x` and `y`.\n\n    See Also\n    --------\n    lagval, lagval2d, lagval3d, laggrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import laggrid2d\n    >>> c = [[1, 2], [3, 4]]\n    >>> laggrid2d([0, 1], [0, 1], c)\n    array([[10.,  4.],\n           [ 3.,  1.]])\n\n    \"\"\"\n    return pu._gridnd(lagval, c, x, y)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagval3d",
      "category": "Laguerre polynomials",
      "description": "Evaluate a 3-D Laguerre series at points (x, y, z).",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagval3d.html",
      "doc": "Evaluate a 3-D Laguerre series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * L_i(x) * L_j(y) * L_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    lagval, lagval2d, laggrid2d, laggrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagval3d\n    >>> c = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n    >>> lagval3d(1, 1, 2, c)\n    -1.0",
      "code": "def lagval3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D Laguerre series at points (x, y, z).\n\n    This function returns the values:\n\n    .. math:: p(x,y,z) = \\\\sum_{i,j,k} c_{i,j,k} * L_i(x) * L_j(y) * L_k(z)\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if\n    they are tuples or a lists, otherwise they are treated as a scalars and\n    they must have the same shape after conversion. In either case, either\n    `x`, `y`, and `z` or their elements must support multiplication and\n    addition both with themselves and with the elements of `c`.\n\n    If `c` has fewer than 3 dimensions, ones are implicitly appended to its\n    shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible object\n        The three dimensional series is evaluated at the points\n        ``(x, y, z)``, where `x`, `y`, and `z` must have the same shape.  If\n        any of `x`, `y`, or `z` is a list or tuple, it is first converted\n        to an ndarray, otherwise it is left unchanged and if it isn't an\n        ndarray it is  treated as a scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficient of the term of\n        multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension\n        greater than 3 the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the multidimensional polynomial on points formed with\n        triples of corresponding values from `x`, `y`, and `z`.\n\n    See Also\n    --------\n    lagval, lagval2d, laggrid2d, laggrid3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagval3d\n    >>> c = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n    >>> lagval3d(1, 1, 2, c)\n    -1.0\n\n    \"\"\"\n    return pu._valnd(lagval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.laguerre.laggrid3d",
      "category": "Laguerre polynomials",
      "description": "Evaluate a 3-D Laguerre series on the Cartesian product of x, y, and z.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.laggrid3d.html",
      "doc": "Evaluate a 3-D Laguerre series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * L_i(a) * L_j(b) * L_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    lagval, lagval2d, laggrid2d, lagval3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import laggrid3d\n    >>> c = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n    >>> laggrid3d([0, 1], [0, 1], [2, 4], c)\n    array([[[ -4., -44.],\n            [ -2., -18.]],\n           [[ -2., -14.],\n            [ -1.,  -5.]]])",
      "code": "def laggrid3d(x, y, z, c):\n    \"\"\"\n    Evaluate a 3-D Laguerre series on the Cartesian product of x, y, and z.\n\n    This function returns the values:\n\n    .. math:: p(a,b,c) = \\\\sum_{i,j,k} c_{i,j,k} * L_i(a) * L_j(b) * L_k(c)\n\n    where the points ``(a, b, c)`` consist of all triples formed by taking\n    `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form\n    a grid with `x` in the first dimension, `y` in the second, and `z` in\n    the third.\n\n    The parameters `x`, `y`, and `z` are converted to arrays only if they\n    are tuples or a lists, otherwise they are treated as a scalars. In\n    either case, either `x`, `y`, and `z` or their elements must support\n    multiplication and addition both with themselves and with the elements\n    of `c`.\n\n    If `c` has fewer than three dimensions, ones are implicitly appended to\n    its shape to make it 3-D. The shape of the result will be c.shape[3:] +\n    x.shape + y.shape + z.shape.\n\n    Parameters\n    ----------\n    x, y, z : array_like, compatible objects\n        The three dimensional series is evaluated at the points in the\n        Cartesian product of `x`, `y`, and `z`.  If `x`, `y`, or `z` is a\n        list or tuple, it is first converted to an ndarray, otherwise it is\n        left unchanged and, if it isn't an ndarray, it is treated as a\n        scalar.\n    c : array_like\n        Array of coefficients ordered so that the coefficients for terms of\n        degree i,j are contained in ``c[i,j]``. If `c` has dimension\n        greater than two the remaining indices enumerate multiple sets of\n        coefficients.\n\n    Returns\n    -------\n    values : ndarray, compatible object\n        The values of the two dimensional polynomial at points in the Cartesian\n        product of `x` and `y`.\n\n    See Also\n    --------\n    lagval, lagval2d, laggrid2d, lagval3d\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import laggrid3d\n    >>> c = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n    >>> laggrid3d([0, 1], [0, 1], [2, 4], c)\n    array([[[ -4., -44.],\n            [ -2., -18.]],\n           [[ -2., -14.],\n            [ -1.,  -5.]]])\n\n    \"\"\"\n    return pu._gridnd(lagval, c, x, y, z)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagvander",
      "category": "Laguerre polynomials",
      "description": "Pseudo-Vandermonde matrix of given degree.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagvander.html",
      "doc": "Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = L_i(x)\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the Laguerre polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = lagvander(x, n)``, then ``np.dot(V, c)`` and\n    ``lagval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of Laguerre series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo-Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding Laguerre polynomial.  The dtype will be the same as\n        the converted `x`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import lagvander\n    >>> x = np.array([0, 1, 2])\n    >>> lagvander(x, 3)\n    array([[ 1.        ,  1.        ,  1.        ,  1.        ],\n           [ 1.        ,  0.        , -0.5       , -0.66666667],\n           [ 1.        , -1.        , -1.        , -0.33333333]])",
      "code": "def lagvander(x, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degree.\n\n    Returns the pseudo-Vandermonde matrix of degree `deg` and sample points\n    `x`. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., i] = L_i(x)\n\n    where ``0 <= i <= deg``. The leading indices of `V` index the elements of\n    `x` and the last index is the degree of the Laguerre polynomial.\n\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = lagvander(x, n)``, then ``np.dot(V, c)`` and\n    ``lagval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of Laguerre series of the same degree and sample points.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The dtype is converted to float64 or complex128\n        depending on whether any of the elements are complex. If `x` is\n        scalar it is converted to a 1-D array.\n    deg : int\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : ndarray\n        The pseudo-Vandermonde matrix. The shape of the returned matrix is\n        ``x.shape + (deg + 1,)``, where The last index is the degree of the\n        corresponding Laguerre polynomial.  The dtype will be the same as\n        the converted `x`.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import lagvander\n    >>> x = np.array([0, 1, 2])\n    >>> lagvander(x, 3)\n    array([[ 1.        ,  1.        ,  1.        ,  1.        ],\n           [ 1.        ,  0.        , -0.5       , -0.66666667],\n           [ 1.        , -1.        , -1.        , -0.33333333]])\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg < 0:\n        raise ValueError(\"deg must be non-negative\")\n\n    x = np.array(x, copy=None, ndmin=1) + 0.0\n    dims = (ideg + 1,) + x.shape\n    dtyp = x.dtype\n    v = np.empty(dims, dtype=dtyp)\n    v[0] = x * 0 + 1\n    if ideg > 0:\n        v[1] = 1 - x\n        for i in range(2, ideg + 1):\n            v[i] = (v[i - 1] * (2 * i - 1 - x) - v[i - 2] * (i - 1)) / i\n    return np.moveaxis(v, 0, -1)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagvander2d",
      "category": "Laguerre polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagvander2d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the Laguerre polynomials.\n\n    If ``V = lagvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``lagval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D Laguerre\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    lagvander, lagvander3d, lagval2d, lagval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import lagvander2d\n    >>> x = np.array([0])\n    >>> y = np.array([2])\n    >>> lagvander2d(x, y, [2, 1])\n    array([[ 1., -1.,  1., -1.,  1., -1.]])",
      "code": "def lagvander2d(x, y, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y)``. The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),\n\n    where ``0 <= i <= deg[0]`` and ``0 <= j <= deg[1]``. The leading indices of\n    `V` index the points ``(x, y)`` and the last index encodes the degrees of\n    the Laguerre polynomials.\n\n    If ``V = lagvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`\n    correspond to the elements of a 2-D coefficient array `c` of shape\n    (xdeg + 1, ydeg + 1) in the order\n\n    .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...\n\n    and ``np.dot(V, c.flat)`` and ``lagval2d(x, y, c)`` will be the same\n    up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 2-D Laguerre\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes\n        will be converted to either float64 or complex128 depending on\n        whether any of the elements are complex. Scalars are converted to\n        1-D arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg].\n\n    Returns\n    -------\n    vander2d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)`.  The dtype will be the same\n        as the converted `x` and `y`.\n\n    See Also\n    --------\n    lagvander, lagvander3d, lagval2d, lagval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import lagvander2d\n    >>> x = np.array([0])\n    >>> y = np.array([2])\n    >>> lagvander2d(x, y, [2, 1])\n    array([[ 1., -1.,  1., -1.,  1., -1.]])\n\n    \"\"\"\n    return pu._vander_nd_flat((lagvander, lagvander), (x, y), deg)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagvander3d",
      "category": "Laguerre polynomials",
      "description": "Pseudo-Vandermonde matrix of given degrees.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagvander3d.html",
      "doc": "Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = L_i(x)*L_j(y)*L_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the Laguerre polynomials.\n\n    If ``V = lagvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and  ``np.dot(V, c.flat)`` and ``lagval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D Laguerre\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    lagvander, lagvander3d, lagval2d, lagval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import lagvander3d\n    >>> x = np.array([0])\n    >>> y = np.array([2])\n    >>> z = np.array([0])\n    >>> lagvander3d(x, y, z, [2, 1, 3])\n    array([[ 1.,  1.,  1.,  1., -1., -1., -1., -1.,  1.,  1.,  1.,  1., -1.,\n            -1., -1., -1.,  1.,  1.,  1.,  1., -1., -1., -1., -1.]])",
      "code": "def lagvander3d(x, y, z, deg):\n    \"\"\"Pseudo-Vandermonde matrix of given degrees.\n\n    Returns the pseudo-Vandermonde matrix of degrees `deg` and sample\n    points ``(x, y, z)``. If `l`, `m`, `n` are the given degrees in `x`, `y`, `z`,\n    then The pseudo-Vandermonde matrix is defined by\n\n    .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = L_i(x)*L_j(y)*L_k(z),\n\n    where ``0 <= i <= l``, ``0 <= j <= m``, and ``0 <= j <= n``.  The leading\n    indices of `V` index the points ``(x, y, z)`` and the last index encodes\n    the degrees of the Laguerre polynomials.\n\n    If ``V = lagvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns\n    of `V` correspond to the elements of a 3-D coefficient array `c` of\n    shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order\n\n    .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...\n\n    and  ``np.dot(V, c.flat)`` and ``lagval3d(x, y, z, c)`` will be the\n    same up to roundoff. This equivalence is useful both for least squares\n    fitting and for the evaluation of a large number of 3-D Laguerre\n    series of the same degrees and sample points.\n\n    Parameters\n    ----------\n    x, y, z : array_like\n        Arrays of point coordinates, all of the same shape. The dtypes will\n        be converted to either float64 or complex128 depending on whether\n        any of the elements are complex. Scalars are converted to 1-D\n        arrays.\n    deg : list of ints\n        List of maximum degrees of the form [x_deg, y_deg, z_deg].\n\n    Returns\n    -------\n    vander3d : ndarray\n        The shape of the returned matrix is ``x.shape + (order,)``, where\n        :math:`order = (deg[0]+1)*(deg[1]+1)*(deg[2]+1)`.  The dtype will\n        be the same as the converted `x`, `y`, and `z`.\n\n    See Also\n    --------\n    lagvander, lagvander3d, lagval2d, lagval3d\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import lagvander3d\n    >>> x = np.array([0])\n    >>> y = np.array([2])\n    >>> z = np.array([0])\n    >>> lagvander3d(x, y, z, [2, 1, 3])\n    array([[ 1.,  1.,  1.,  1., -1., -1., -1., -1.,  1.,  1.,  1.,  1., -1.,\n            -1., -1., -1.,  1.,  1.,  1.,  1., -1., -1., -1., -1.]])\n\n    \"\"\"\n    return pu._vander_nd_flat((lagvander, lagvander, lagvander), (x, y, z), deg)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagfit",
      "category": "Laguerre polynomials",
      "description": "Least squares fit of Laguerre series to data.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagfit.html",
      "doc": "Least squares fit of Laguerre series to data.\n\n    Return the coefficients of a Laguerre series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * L_1(x) + ... + c_n * L_n(x),\n\n    where ``n`` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Laguerre coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column *k*  of `y` are in column\n        *k*.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full == False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.hermite_e.hermefit\n    lagval : Evaluates a Laguerre series.\n    lagvander : pseudo Vandermonde matrix of Laguerre series.\n    lagweight : Laguerre weight function.\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Laguerre series ``p`` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up as the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where ``V`` is the weighted pseudo Vandermonde matrix of `x`, ``c`` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of ``V``.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Laguerre series are probably most useful when the data can\n    be approximated by ``sqrt(w(x)) * p(x)``, where ``w(x)`` is the Laguerre\n    weight. In that case the weight ``sqrt(w(x[i]))`` should be used\n    together with data values ``y[i]/sqrt(w(x[i]))``. The weight function is\n    available as `lagweight`.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import lagfit, lagval\n    >>> x = np.linspace(0, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = lagval(x, [1, 2, 3]) + err\n    >>> lagfit(x, y, 2)\n    array([1.00578369, 1.99417356, 2.99827656]) # may vary",
      "code": "def lagfit(x, y, deg, rcond=None, full=False, w=None):\n    \"\"\"\n    Least squares fit of Laguerre series to data.\n\n    Return the coefficients of a Laguerre series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * L_1(x) + ... + c_n * L_n(x),\n\n    where ``n`` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int or 1-D array_like\n        Degree(s) of the fitting polynomials. If `deg` is a single integer\n        all terms up to and including the `deg`'th term are included in the\n        fit. For NumPy versions >= 1.11.0 a list of integers specifying the\n        degrees of the terms to include may be used instead.\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the weight ``w[i]`` applies to the unsquared\n        residual ``y[i] - y_hat[i]`` at ``x[i]``. Ideally the weights are\n        chosen so that the errors of the products ``w[i]*y[i]`` all have the\n        same variance.  When using inverse-variance weighting, use\n        ``w[i] = 1/sigma(y[i])``.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Laguerre coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column *k*  of `y` are in column\n        *k*.\n\n    [residuals, rank, singular_values, rcond] : list\n        These values are only returned if ``full == True``\n\n        - residuals -- sum of squared residuals of the least squares fit\n        - rank -- the numerical rank of the scaled Vandermonde matrix\n        - singular_values -- singular values of the scaled Vandermonde matrix\n        - rcond -- value of `rcond`.\n\n        For more details, see `numpy.linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if ``full == False``.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter('ignore', np.exceptions.RankWarning)\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyfit\n    numpy.polynomial.legendre.legfit\n    numpy.polynomial.chebyshev.chebfit\n    numpy.polynomial.hermite.hermfit\n    numpy.polynomial.hermite_e.hermefit\n    lagval : Evaluates a Laguerre series.\n    lagvander : pseudo Vandermonde matrix of Laguerre series.\n    lagweight : Laguerre weight function.\n    numpy.linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Laguerre series ``p`` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\\\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up as the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where ``V`` is the weighted pseudo Vandermonde matrix of `x`, ``c`` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of ``V``.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `~exceptions.RankWarning` will be issued. This means that\n    the coefficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Laguerre series are probably most useful when the data can\n    be approximated by ``sqrt(w(x)) * p(x)``, where ``w(x)`` is the Laguerre\n    weight. In that case the weight ``sqrt(w(x[i]))`` should be used\n    together with data values ``y[i]/sqrt(w(x[i]))``. The weight function is\n    available as `lagweight`.\n\n    References\n    ----------\n    .. [1] Wikipedia, \"Curve fitting\",\n           https://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial.laguerre import lagfit, lagval\n    >>> x = np.linspace(0, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = lagval(x, [1, 2, 3]) + err\n    >>> lagfit(x, y, 2)\n    array([1.00578369, 1.99417356, 2.99827656]) # may vary\n\n    \"\"\"\n    return pu._fit(lagvander, x, y, deg, rcond, full, w)"
    },
    {
      "name": "numpy.polynomial.laguerre.lagcompanion",
      "category": "Laguerre polynomials",
      "description": "Return the companion matrix of c.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagcompanion.html",
      "doc": "Return the companion matrix of c.\n\n    The usual companion matrix of the Laguerre polynomials is already\n    symmetric when `c` is a basis Laguerre polynomial, so no scaling is\n    applied.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Laguerre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Companion matrix of dimensions (deg, deg).\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagcompanion\n    >>> lagcompanion([1, 2, 3])\n    array([[ 1.        , -0.33333333],\n           [-1.        ,  4.33333333]])",
      "code": "def lagcompanion(c):\n    \"\"\"\n    Return the companion matrix of c.\n\n    The usual companion matrix of the Laguerre polynomials is already\n    symmetric when `c` is a basis Laguerre polynomial, so no scaling is\n    applied.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Laguerre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Companion matrix of dimensions (deg, deg).\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagcompanion\n    >>> lagcompanion([1, 2, 3])\n    array([[ 1.        , -0.33333333],\n           [-1.        ,  4.33333333]])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) < 2:\n        raise ValueError('Series must have maximum degree of at least 1.')\n    if len(c) == 2:\n        return np.array([[1 + c[0] / c[1]]])\n\n    n = len(c) - 1\n    mat = np.zeros((n, n), dtype=c.dtype)\n    top = mat.reshape(-1)[1::n + 1]\n    mid = mat.reshape(-1)[0::n + 1]\n    bot = mat.reshape(-1)[n::n + 1]\n    top[...] = -np.arange(1, n)\n    mid[...] = 2. * np.arange(n) + 1.\n    bot[...] = top\n    mat[:, -1] += (c[:-1] / c[-1]) * n\n    return mat"
    },
    {
      "name": "numpy.polynomial.laguerre.lagroots",
      "category": "Laguerre polynomials",
      "description": "Compute the roots of a Laguerre series.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagroots.html",
      "doc": "Compute the roots of a Laguerre series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * L_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.chebyshev.chebroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    The Laguerre series basis polynomials aren't powers of `x` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagroots, lagfromroots\n    >>> coef = lagfromroots([0, 1, 2])\n    >>> coef\n    array([  2.,  -8.,  12.,  -6.])\n    >>> lagroots(coef)\n    array([-4.4408921e-16,  1.0000000e+00,  2.0000000e+00])",
      "code": "def lagroots(c):\n    \"\"\"\n    Compute the roots of a Laguerre series.\n\n    Return the roots (a.k.a. \"zeros\") of the polynomial\n\n    .. math:: p(x) = \\\\sum_i c[i] * L_i(x).\n\n    Parameters\n    ----------\n    c : 1-D array_like\n        1-D array of coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the series. If all the roots are real,\n        then `out` is also real, otherwise it is complex.\n\n    See Also\n    --------\n    numpy.polynomial.polynomial.polyroots\n    numpy.polynomial.legendre.legroots\n    numpy.polynomial.chebyshev.chebroots\n    numpy.polynomial.hermite.hermroots\n    numpy.polynomial.hermite_e.hermeroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton's method.\n\n    The Laguerre series basis polynomials aren't powers of `x` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagroots, lagfromroots\n    >>> coef = lagfromroots([0, 1, 2])\n    >>> coef\n    array([  2.,  -8.,  12.,  -6.])\n    >>> lagroots(coef)\n    array([-4.4408921e-16,  1.0000000e+00,  2.0000000e+00])\n\n    \"\"\"\n    # c is a trimmed copy\n    [c] = pu.as_series([c])\n    if len(c) <= 1:\n        return np.array([], dtype=c.dtype)\n    if len(c) == 2:\n        return np.array([1 + c[0] / c[1]])\n\n    # rotated companion matrix reduces error\n    m = lagcompanion(c)[::-1, ::-1]\n    r = la.eigvals(m)\n    r.sort()\n    return r"
    },
    {
      "name": "numpy.polynomial.laguerre.laggauss",
      "category": "Laguerre polynomials",
      "description": "Gauss-Laguerre quadrature.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.laggauss.html",
      "doc": "Gauss-Laguerre quadrature.\n\n    Computes the sample points and weights for Gauss-Laguerre quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[0, \\\\inf]`\n    with the weight function :math:`f(x) = \\\\exp(-x)`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100 higher degrees may\n    be problematic. The weights are determined by using the fact that\n\n    .. math:: w_k = c / (L'_n(x_k) * L_{n-1}(x_k))\n\n    where :math:`c` is a constant independent of :math:`k` and :math:`x_k`\n    is the k'th root of :math:`L_n`, and then scaling the results to get\n    the right value when integrating 1.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import laggauss\n    >>> laggauss(2)\n    (array([0.58578644, 3.41421356]), array([0.85355339, 0.14644661]))",
      "code": "def laggauss(deg):\n    \"\"\"\n    Gauss-Laguerre quadrature.\n\n    Computes the sample points and weights for Gauss-Laguerre quadrature.\n    These sample points and weights will correctly integrate polynomials of\n    degree :math:`2*deg - 1` or less over the interval :math:`[0, \\\\inf]`\n    with the weight function :math:`f(x) = \\\\exp(-x)`.\n\n    Parameters\n    ----------\n    deg : int\n        Number of sample points and weights. It must be >= 1.\n\n    Returns\n    -------\n    x : ndarray\n        1-D ndarray containing the sample points.\n    y : ndarray\n        1-D ndarray containing the weights.\n\n    Notes\n    -----\n    The results have only been tested up to degree 100 higher degrees may\n    be problematic. The weights are determined by using the fact that\n\n    .. math:: w_k = c / (L'_n(x_k) * L_{n-1}(x_k))\n\n    where :math:`c` is a constant independent of :math:`k` and :math:`x_k`\n    is the k'th root of :math:`L_n`, and then scaling the results to get\n    the right value when integrating 1.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import laggauss\n    >>> laggauss(2)\n    (array([0.58578644, 3.41421356]), array([0.85355339, 0.14644661]))\n\n    \"\"\"\n    ideg = pu._as_int(deg, \"deg\")\n    if ideg <= 0:\n        raise ValueError(\"deg must be a positive integer\")\n\n    # first approximation of roots. We use the fact that the companion\n    # matrix is symmetric in this case in order to obtain better zeros.\n    c = np.array([0] * deg + [1])\n    m = lagcompanion(c)\n    x = la.eigvalsh(m)\n\n    # improve roots by one application of Newton\n    dy = lagval(x, c)\n    df = lagval(x, lagder(c))\n    x -= dy / df\n\n    # compute the weights. We scale the factor to avoid possible numerical\n    # overflow.\n    fm = lagval(x, c[1:])\n    fm /= np.abs(fm).max()\n    df /= np.abs(df).max()\n    w = 1 / (fm * df)\n\n    # scale w to get the right value, 1 in this case\n    w /= w.sum()\n\n    return x, w"
    },
    {
      "name": "numpy.polynomial.laguerre.lagweight",
      "category": "Laguerre polynomials",
      "description": "Weight function of the Laguerre polynomials.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.lagweight.html",
      "doc": "Weight function of the Laguerre polynomials.\n\n    The weight function is :math:`exp(-x)` and the interval of integration\n    is :math:`[0, \\\\inf]`. The Laguerre polynomials are orthogonal, but not\n    normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagweight\n    >>> x = np.array([0, 1, 2])\n    >>> lagweight(x)\n    array([1.        , 0.36787944, 0.13533528])",
      "code": "def lagweight(x):\n    \"\"\"Weight function of the Laguerre polynomials.\n\n    The weight function is :math:`exp(-x)` and the interval of integration\n    is :math:`[0, \\\\inf]`. The Laguerre polynomials are orthogonal, but not\n    normalized, with respect to this weight function.\n\n    Parameters\n    ----------\n    x : array_like\n       Values at which the weight function will be computed.\n\n    Returns\n    -------\n    w : ndarray\n       The weight function at `x`.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagweight\n    >>> x = np.array([0, 1, 2])\n    >>> lagweight(x)\n    array([1.        , 0.36787944, 0.13533528])\n\n    \"\"\"\n    w = np.exp(-x)\n    return w\n\n#\n# Laguerre series class\n#"
    },
    {
      "name": "numpy.polynomial.laguerre.Laguerre",
      "category": "Laguerre polynomials",
      "description": "A Laguerre series class.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.laguerre.Laguerre.html",
      "doc": "A Laguerre series class.\n\n    The Laguerre class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Laguerre coefficients in order of increasing degree, i.e,\n        ``(1, 2, 3)`` gives ``1*L_0(x) + 2*L_1(X) + 3*L_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [0., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [0., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24",
      "code": "class Laguerre(ABCPolyBase):\n    \"\"\"A Laguerre series class.\n\n    The Laguerre class provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the\n    attributes and methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Laguerre coefficients in order of increasing degree, i.e,\n        ``(1, 2, 3)`` gives ``1*L_0(x) + 2*L_1(X) + 3*L_2(x)``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is [0., 1.].\n    window : (2,) array_like, optional\n        Window, see `domain` for its use. The default value is [0., 1.].\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24\n\n    \"\"\"",
      "type": "class"
    },
    {
      "name": "numpy.polynomial.polyutils.trimseq",
      "category": "Polynomial utilities",
      "description": "Remove small Poly series coefficients.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.trimseq.html",
      "doc": "Remove small Poly series coefficients.\n\n    Parameters\n    ----------\n    seq : sequence\n        Sequence of Poly series coefficients.\n\n    Returns\n    -------\n    series : sequence\n        Subsequence with trailing zeros removed. If the resulting sequence\n        would be empty, return the first element. The returned sequence may\n        or may not be a view.\n\n    Notes\n    -----\n    Do not lose the type info if the sequence contains unknown objects.",
      "code": "def trimseq(seq):\n    \"\"\"Remove small Poly series coefficients.\n\n    Parameters\n    ----------\n    seq : sequence\n        Sequence of Poly series coefficients.\n\n    Returns\n    -------\n    series : sequence\n        Subsequence with trailing zeros removed. If the resulting sequence\n        would be empty, return the first element. The returned sequence may\n        or may not be a view.\n\n    Notes\n    -----\n    Do not lose the type info if the sequence contains unknown objects.\n\n    \"\"\"\n    if len(seq) == 0 or seq[-1] != 0:\n        return seq\n    else:\n        for i in range(len(seq) - 1, -1, -1):\n            if seq[i] != 0:\n                break\n        return seq[:i + 1]"
    },
    {
      "name": "numpy.polynomial.polyutils.as_series",
      "category": "Polynomial utilities",
      "description": "Return argument as a list of 1-d arrays.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.as_series.html",
      "doc": "Return argument as a list of 1-d arrays.\n\n    The returned list contains array(s) of dtype double, complex double, or\n    object.  A 1-d argument of shape ``(N,)`` is parsed into ``N`` arrays of\n    size one; a 2-d argument of shape ``(M,N)`` is parsed into ``M`` arrays\n    of size ``N`` (i.e., is \"parsed by row\"); and a higher dimensional array\n    raises a Value Error if it is not first reshaped into either a 1-d or 2-d\n    array.\n\n    Parameters\n    ----------\n    alist : array_like\n        A 1- or 2-d array_like\n    trim : boolean, optional\n        When True, trailing zeros are removed from the inputs.\n        When False, the inputs are passed through intact.\n\n    Returns\n    -------\n    [a1, a2,...] : list of 1-D arrays\n        A copy of the input data as a list of 1-d arrays.\n\n    Raises\n    ------\n    ValueError\n        Raised when `as_series` cannot convert its input to 1-d arrays, or at\n        least one of the resulting arrays is empty.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polyutils as pu\n    >>> a = np.arange(4)\n    >>> pu.as_series(a)\n    [array([0.]), array([1.]), array([2.]), array([3.])]\n    >>> b = np.arange(6).reshape((2,3))\n    >>> pu.as_series(b)\n    [array([0., 1., 2.]), array([3., 4., 5.])]\n\n    >>> pu.as_series((1, np.arange(3), np.arange(2, dtype=np.float16)))\n    [array([1.]), array([0., 1., 2.]), array([0., 1.])]\n\n    >>> pu.as_series([2, [1.1, 0.]])\n    [array([2.]), array([1.1])]\n\n    >>> pu.as_series([2, [1.1, 0.]], trim=False)\n    [array([2.]), array([1.1, 0. ])]",
      "code": "def as_series(alist, trim=True):\n    \"\"\"\n    Return argument as a list of 1-d arrays.\n\n    The returned list contains array(s) of dtype double, complex double, or\n    object.  A 1-d argument of shape ``(N,)`` is parsed into ``N`` arrays of\n    size one; a 2-d argument of shape ``(M,N)`` is parsed into ``M`` arrays\n    of size ``N`` (i.e., is \"parsed by row\"); and a higher dimensional array\n    raises a Value Error if it is not first reshaped into either a 1-d or 2-d\n    array.\n\n    Parameters\n    ----------\n    alist : array_like\n        A 1- or 2-d array_like\n    trim : boolean, optional\n        When True, trailing zeros are removed from the inputs.\n        When False, the inputs are passed through intact.\n\n    Returns\n    -------\n    [a1, a2,...] : list of 1-D arrays\n        A copy of the input data as a list of 1-d arrays.\n\n    Raises\n    ------\n    ValueError\n        Raised when `as_series` cannot convert its input to 1-d arrays, or at\n        least one of the resulting arrays is empty.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polyutils as pu\n    >>> a = np.arange(4)\n    >>> pu.as_series(a)\n    [array([0.]), array([1.]), array([2.]), array([3.])]\n    >>> b = np.arange(6).reshape((2,3))\n    >>> pu.as_series(b)\n    [array([0., 1., 2.]), array([3., 4., 5.])]\n\n    >>> pu.as_series((1, np.arange(3), np.arange(2, dtype=np.float16)))\n    [array([1.]), array([0., 1., 2.]), array([0., 1.])]\n\n    >>> pu.as_series([2, [1.1, 0.]])\n    [array([2.]), array([1.1])]\n\n    >>> pu.as_series([2, [1.1, 0.]], trim=False)\n    [array([2.]), array([1.1, 0. ])]\n\n    \"\"\"\n    arrays = [np.array(a, ndmin=1, copy=None) for a in alist]\n    for a in arrays:\n        if a.size == 0:\n            raise ValueError(\"Coefficient array is empty\")\n        if a.ndim != 1:\n            raise ValueError(\"Coefficient array is not 1-d\")\n    if trim:\n        arrays = [trimseq(a) for a in arrays]\n\n    try:\n        dtype = np.common_type(*arrays)\n    except Exception as e:\n        object_dtype = np.dtypes.ObjectDType()\n        has_one_object_type = False\n        ret = []\n        for a in arrays:\n            if a.dtype != object_dtype:\n                tmp = np.empty(len(a), dtype=object_dtype)\n                tmp[:] = a[:]\n                ret.append(tmp)\n            else:\n                has_one_object_type = True\n                ret.append(a.copy())\n        if not has_one_object_type:\n            raise ValueError(\"Coefficient arrays have no common type\") from e\n    else:\n        ret = [np.array(a, copy=True, dtype=dtype) for a in arrays]\n    return ret"
    },
    {
      "name": "numpy.polynomial.polyutils.trimcoef",
      "category": "Polynomial utilities",
      "description": "Remove \"small\" \"trailing\" coefficients from a polynomial.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.trimcoef.html",
      "doc": "Remove \"small\" \"trailing\" coefficients from a polynomial.\n\n    \"Small\" means \"small in absolute value\" and is controlled by the\n    parameter `tol`; \"trailing\" means highest order coefficient(s), e.g., in\n    ``[0, 1, 1, 0, 0]`` (which represents ``0 + x + x**2 + 0*x**3 + 0*x**4``)\n    both the 3-rd and 4-th order coefficients would be \"trimmed.\"\n\n    Parameters\n    ----------\n    c : array_like\n        1-d array of coefficients, ordered from lowest order to highest.\n    tol : number, optional\n        Trailing (i.e., highest order) elements with absolute value less\n        than or equal to `tol` (default value is zero) are removed.\n\n    Returns\n    -------\n    trimmed : ndarray\n        1-d array with trailing zeros removed.  If the resulting series\n        would be empty, a series containing a single zero is returned.\n\n    Raises\n    ------\n    ValueError\n        If `tol` < 0\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polyutils as pu\n    >>> pu.trimcoef((0,0,3,0,5,0,0))\n    array([0.,  0.,  3.,  0.,  5.])\n    >>> pu.trimcoef((0,0,1e-3,0,1e-5,0,0),1e-3) # item == tol is trimmed\n    array([0.])\n    >>> i = complex(0,1) # works for complex\n    >>> pu.trimcoef((3e-4,1e-3*(1-i),5e-4,2e-5*(1+i)), 1e-3)\n    array([0.0003+0.j   , 0.001 -0.001j])",
      "code": "def trimcoef(c, tol=0):\n    \"\"\"\n    Remove \"small\" \"trailing\" coefficients from a polynomial.\n\n    \"Small\" means \"small in absolute value\" and is controlled by the\n    parameter `tol`; \"trailing\" means highest order coefficient(s), e.g., in\n    ``[0, 1, 1, 0, 0]`` (which represents ``0 + x + x**2 + 0*x**3 + 0*x**4``)\n    both the 3-rd and 4-th order coefficients would be \"trimmed.\"\n\n    Parameters\n    ----------\n    c : array_like\n        1-d array of coefficients, ordered from lowest order to highest.\n    tol : number, optional\n        Trailing (i.e., highest order) elements with absolute value less\n        than or equal to `tol` (default value is zero) are removed.\n\n    Returns\n    -------\n    trimmed : ndarray\n        1-d array with trailing zeros removed.  If the resulting series\n        would be empty, a series containing a single zero is returned.\n\n    Raises\n    ------\n    ValueError\n        If `tol` < 0\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polyutils as pu\n    >>> pu.trimcoef((0,0,3,0,5,0,0))\n    array([0.,  0.,  3.,  0.,  5.])\n    >>> pu.trimcoef((0,0,1e-3,0,1e-5,0,0),1e-3) # item == tol is trimmed\n    array([0.])\n    >>> i = complex(0,1) # works for complex\n    >>> pu.trimcoef((3e-4,1e-3*(1-i),5e-4,2e-5*(1+i)), 1e-3)\n    array([0.0003+0.j   , 0.001 -0.001j])\n\n    \"\"\"\n    if tol < 0:\n        raise ValueError(\"tol must be non-negative\")\n\n    [c] = as_series([c])\n    [ind] = np.nonzero(np.abs(c) > tol)\n    if len(ind) == 0:\n        return c[:1] * 0\n    else:\n        return c[:ind[-1] + 1].copy()"
    },
    {
      "name": "numpy.polynomial.polyutils.getdomain",
      "category": "Polynomial utilities",
      "description": "Return a domain suitable for given abscissae.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.getdomain.html",
      "doc": "Return a domain suitable for given abscissae.\n\n    Find a domain suitable for a polynomial or Chebyshev series\n    defined at the values supplied.\n\n    Parameters\n    ----------\n    x : array_like\n        1-d array of abscissae whose domain will be determined.\n\n    Returns\n    -------\n    domain : ndarray\n        1-d array containing two values.  If the inputs are complex, then\n        the two returned points are the lower left and upper right corners\n        of the smallest rectangle (aligned with the axes) in the complex\n        plane containing the points `x`. If the inputs are real, then the\n        two points are the ends of the smallest interval containing the\n        points `x`.\n\n    See Also\n    --------\n    mapparms, mapdomain\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polyutils as pu\n    >>> points = np.arange(4)**2 - 5; points\n    array([-5, -4, -1,  4])\n    >>> pu.getdomain(points)\n    array([-5.,  4.])\n    >>> c = np.exp(complex(0,1)*np.pi*np.arange(12)/6) # unit circle\n    >>> pu.getdomain(c)\n    array([-1.-1.j,  1.+1.j])",
      "code": "def getdomain(x):\n    \"\"\"\n    Return a domain suitable for given abscissae.\n\n    Find a domain suitable for a polynomial or Chebyshev series\n    defined at the values supplied.\n\n    Parameters\n    ----------\n    x : array_like\n        1-d array of abscissae whose domain will be determined.\n\n    Returns\n    -------\n    domain : ndarray\n        1-d array containing two values.  If the inputs are complex, then\n        the two returned points are the lower left and upper right corners\n        of the smallest rectangle (aligned with the axes) in the complex\n        plane containing the points `x`. If the inputs are real, then the\n        two points are the ends of the smallest interval containing the\n        points `x`.\n\n    See Also\n    --------\n    mapparms, mapdomain\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polyutils as pu\n    >>> points = np.arange(4)**2 - 5; points\n    array([-5, -4, -1,  4])\n    >>> pu.getdomain(points)\n    array([-5.,  4.])\n    >>> c = np.exp(complex(0,1)*np.pi*np.arange(12)/6) # unit circle\n    >>> pu.getdomain(c)\n    array([-1.-1.j,  1.+1.j])\n\n    \"\"\"\n    [x] = as_series([x], trim=False)\n    if x.dtype.char in np.typecodes['Complex']:\n        rmin, rmax = x.real.min(), x.real.max()\n        imin, imax = x.imag.min(), x.imag.max()\n        return np.array((complex(rmin, imin), complex(rmax, imax)))\n    else:\n        return np.array((x.min(), x.max()))"
    },
    {
      "name": "numpy.polynomial.polyutils.mapparms",
      "category": "Polynomial utilities",
      "description": "Linear map parameters between domains.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.mapparms.html",
      "doc": "Linear map parameters between domains.\n\n    Return the parameters of the linear map ``offset + scale*x`` that maps\n    `old` to `new` such that ``old[i] -> new[i]``, ``i = 0, 1``.\n\n    Parameters\n    ----------\n    old, new : array_like\n        Domains. Each domain must (successfully) convert to a 1-d array\n        containing precisely two values.\n\n    Returns\n    -------\n    offset, scale : scalars\n        The map ``L(x) = offset + scale*x`` maps the first domain to the\n        second.\n\n    See Also\n    --------\n    getdomain, mapdomain\n\n    Notes\n    -----\n    Also works for complex numbers, and thus can be used to calculate the\n    parameters required to map any line in the complex plane to any other\n    line therein.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polyutils as pu\n    >>> pu.mapparms((-1,1),(-1,1))\n    (0.0, 1.0)\n    >>> pu.mapparms((1,-1),(-1,1))\n    (-0.0, -1.0)\n    >>> i = complex(0,1)\n    >>> pu.mapparms((-i,-1),(1,i))\n    ((1+1j), (1-0j))",
      "code": "def mapparms(old, new):\n    \"\"\"\n    Linear map parameters between domains.\n\n    Return the parameters of the linear map ``offset + scale*x`` that maps\n    `old` to `new` such that ``old[i] -> new[i]``, ``i = 0, 1``.\n\n    Parameters\n    ----------\n    old, new : array_like\n        Domains. Each domain must (successfully) convert to a 1-d array\n        containing precisely two values.\n\n    Returns\n    -------\n    offset, scale : scalars\n        The map ``L(x) = offset + scale*x`` maps the first domain to the\n        second.\n\n    See Also\n    --------\n    getdomain, mapdomain\n\n    Notes\n    -----\n    Also works for complex numbers, and thus can be used to calculate the\n    parameters required to map any line in the complex plane to any other\n    line therein.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polyutils as pu\n    >>> pu.mapparms((-1,1),(-1,1))\n    (0.0, 1.0)\n    >>> pu.mapparms((1,-1),(-1,1))\n    (-0.0, -1.0)\n    >>> i = complex(0,1)\n    >>> pu.mapparms((-i,-1),(1,i))\n    ((1+1j), (1-0j))\n\n    \"\"\"\n    oldlen = old[1] - old[0]\n    newlen = new[1] - new[0]\n    off = (old[1] * new[0] - old[0] * new[1]) / oldlen\n    scl = newlen / oldlen\n    return off, scl"
    },
    {
      "name": "numpy.polynomial.polyutils.mapdomain",
      "category": "Polynomial utilities",
      "description": "Apply linear map to input points.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.mapdomain.html",
      "doc": "Apply linear map to input points.\n\n    The linear map ``offset + scale*x`` that maps the domain `old` to\n    the domain `new` is applied to the points `x`.\n\n    Parameters\n    ----------\n    x : array_like\n        Points to be mapped. If `x` is a subtype of ndarray the subtype\n        will be preserved.\n    old, new : array_like\n        The two domains that determine the map.  Each must (successfully)\n        convert to 1-d arrays containing precisely two values.\n\n    Returns\n    -------\n    x_out : ndarray\n        Array of points of the same shape as `x`, after application of the\n        linear map between the two domains.\n\n    See Also\n    --------\n    getdomain, mapparms\n\n    Notes\n    -----\n    Effectively, this implements:\n\n    .. math::\n        x\\\\_out = new[0] + m(x - old[0])\n\n    where\n\n    .. math::\n        m = \\\\frac{new[1]-new[0]}{old[1]-old[0]}\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polyutils as pu\n    >>> old_domain = (-1,1)\n    >>> new_domain = (0,2*np.pi)\n    >>> x = np.linspace(-1,1,6); x\n    array([-1. , -0.6, -0.2,  0.2,  0.6,  1. ])\n    >>> x_out = pu.mapdomain(x, old_domain, new_domain); x_out\n    array([ 0.        ,  1.25663706,  2.51327412,  3.76991118,  5.02654825, # may vary\n            6.28318531])\n    >>> x - pu.mapdomain(x_out, new_domain, old_domain)\n    array([0., 0., 0., 0., 0., 0.])\n\n    Also works for complex numbers (and thus can be used to map any line in\n    the complex plane to any other line therein).\n\n    >>> i = complex(0,1)\n    >>> old = (-1 - i, 1 + i)\n    >>> new = (-1 + i, 1 - i)\n    >>> z = np.linspace(old[0], old[1], 6); z\n    array([-1. -1.j , -0.6-0.6j, -0.2-0.2j,  0.2+0.2j,  0.6+0.6j,  1. +1.j ])\n    >>> new_z = pu.mapdomain(z, old, new); new_z\n    array([-1.0+1.j , -0.6+0.6j, -0.2+0.2j,  0.2-0.2j,  0.6-0.6j,  1.0-1.j ]) # may vary",
      "code": "def mapdomain(x, old, new):\n    \"\"\"\n    Apply linear map to input points.\n\n    The linear map ``offset + scale*x`` that maps the domain `old` to\n    the domain `new` is applied to the points `x`.\n\n    Parameters\n    ----------\n    x : array_like\n        Points to be mapped. If `x` is a subtype of ndarray the subtype\n        will be preserved.\n    old, new : array_like\n        The two domains that determine the map.  Each must (successfully)\n        convert to 1-d arrays containing precisely two values.\n\n    Returns\n    -------\n    x_out : ndarray\n        Array of points of the same shape as `x`, after application of the\n        linear map between the two domains.\n\n    See Also\n    --------\n    getdomain, mapparms\n\n    Notes\n    -----\n    Effectively, this implements:\n\n    .. math::\n        x\\\\_out = new[0] + m(x - old[0])\n\n    where\n\n    .. math::\n        m = \\\\frac{new[1]-new[0]}{old[1]-old[0]}\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.polynomial import polyutils as pu\n    >>> old_domain = (-1,1)\n    >>> new_domain = (0,2*np.pi)\n    >>> x = np.linspace(-1,1,6); x\n    array([-1. , -0.6, -0.2,  0.2,  0.6,  1. ])\n    >>> x_out = pu.mapdomain(x, old_domain, new_domain); x_out\n    array([ 0.        ,  1.25663706,  2.51327412,  3.76991118,  5.02654825, # may vary\n            6.28318531])\n    >>> x - pu.mapdomain(x_out, new_domain, old_domain)\n    array([0., 0., 0., 0., 0., 0.])\n\n    Also works for complex numbers (and thus can be used to map any line in\n    the complex plane to any other line therein).\n\n    >>> i = complex(0,1)\n    >>> old = (-1 - i, 1 + i)\n    >>> new = (-1 + i, 1 - i)\n    >>> z = np.linspace(old[0], old[1], 6); z\n    array([-1. -1.j , -0.6-0.6j, -0.2-0.2j,  0.2+0.2j,  0.6+0.6j,  1. +1.j ])\n    >>> new_z = pu.mapdomain(z, old, new); new_z\n    array([-1.0+1.j , -0.6+0.6j, -0.2+0.2j,  0.2-0.2j,  0.6-0.6j,  1.0-1.j ]) # may vary\n\n    \"\"\"\n    if type(x) not in (int, float, complex) and not isinstance(x, np.generic):\n        x = np.asanyarray(x)\n    off, scl = mapparms(old, new)\n    return off + scl * x"
    },
    {
      "name": "numpy.polynomial.polyutils.format_float",
      "category": "Polynomial utilities",
      "description": "format_float function",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polyutils.format_float.html",
      "doc": "format_float function",
      "code": "def format_float(x, parens=False):\n    if not np.issubdtype(type(x), np.floating):\n        return str(x)\n\n    opts = np.get_printoptions()\n\n    if np.isnan(x):\n        return opts['nanstr']\n    elif np.isinf(x):\n        return opts['infstr']\n\n    exp_format = False\n    if x != 0:\n        a = np.abs(x)\n        if a >= 1.e8 or a < 10**min(0, -(opts['precision'] - 1) // 2):\n            exp_format = True\n\n    trim, unique = '0', True\n    if opts['floatmode'] == 'fixed':\n        trim, unique = 'k', False\n\n    if exp_format:\n        s = dragon4_scientific(x, precision=opts['precision'],\n                               unique=unique, trim=trim,\n                               sign=opts['sign'] == '+')\n        if parens:\n            s = '(' + s + ')'\n    else:\n        s = dragon4_positional(x, precision=opts['precision'],\n                               fractional=True,\n                               unique=unique, trim=trim,\n                               sign=opts['sign'] == '+')\n    return s"
    },
    {
      "name": "numpy.polynomial.polybase.ABCPolyBase",
      "category": "Polynomial base class",
      "description": "An abstract base class for immutable series classes.",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.polybase.ABCPolyBase.html",
      "doc": "An abstract base class for immutable series classes.\n\n    ABCPolyBase provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' along with the\n    methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Series coefficients in order of increasing degree, i.e.,\n        ``(1, 2, 3)`` gives ``1*P_0(x) + 2*P_1(x) + 3*P_2(x)``, where\n        ``P_i`` is the basis polynomials of degree ``i``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is the derived class domain.\n    window : (2,) array_like, optional\n        Window, see domain for its use. The default value is the\n        derived class window.\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24\n\n    Attributes\n    ----------\n    coef : (N,) ndarray\n        Series coefficients in order of increasing degree.\n    domain : (2,) ndarray\n        Domain that is mapped to window.\n    window : (2,) ndarray\n        Window that domain is mapped to.\n    symbol : str\n        Symbol representing the independent variable.\n\n    Class Attributes\n    ----------------\n    maxpower : int\n        Maximum power allowed, i.e., the largest number ``n`` such that\n        ``p(x)**n`` is allowed. This is to limit runaway polynomial size.\n    domain : (2,) ndarray\n        Default domain of the class.\n    window : (2,) ndarray\n        Default window of the class.",
      "code": "class ABCPolyBase(abc.ABC):\n    \"\"\"An abstract base class for immutable series classes.\n\n    ABCPolyBase provides the standard Python numerical methods\n    '+', '-', '*', '//', '%', 'divmod', '**', and '()' along with the\n    methods listed below.\n\n    Parameters\n    ----------\n    coef : array_like\n        Series coefficients in order of increasing degree, i.e.,\n        ``(1, 2, 3)`` gives ``1*P_0(x) + 2*P_1(x) + 3*P_2(x)``, where\n        ``P_i`` is the basis polynomials of degree ``i``.\n    domain : (2,) array_like, optional\n        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped\n        to the interval ``[window[0], window[1]]`` by shifting and scaling.\n        The default value is the derived class domain.\n    window : (2,) array_like, optional\n        Window, see domain for its use. The default value is the\n        derived class window.\n    symbol : str, optional\n        Symbol used to represent the independent variable in string\n        representations of the polynomial expression, e.g. for printing.\n        The symbol must be a valid Python identifier. Default value is 'x'.\n\n        .. versionadded:: 1.24\n\n    Attributes\n    ----------\n    coef : (N,) ndarray\n        Series coefficients in order of increasing degree.\n    domain : (2,) ndarray\n        Domain that is mapped to window.\n    window : (2,) ndarray\n        Window that domain is mapped to.\n    symbol : str\n        Symbol representing the independent variable.\n\n    Class Attributes\n    ----------------\n    maxpower : int\n        Maximum power allowed, i.e., the largest number ``n`` such that\n        ``p(x)**n`` is allowed. This is to limit runaway polynomial size.\n    domain : (2,) ndarray\n        Default domain of the class.\n    window : (2,) ndarray\n        Default window of the class.\n\n    \"\"\"",
      "type": "class"
    }
  ]
}
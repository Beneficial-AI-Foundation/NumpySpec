{
  "metadata": {
    "module": "numpy.strings",
    "source": "https://github.com/numpy/numpy/blob/main/numpy/_core/strings.py",
    "description": "NumPy string operations module - provides universal functions for string manipulation on numpy.str_ and numpy.bytes_ arrays",
    "note": "Prior to NumPy 2.0, all string functionality was in numpy.char which only operated on fixed-width strings. The numpy.strings module is the modern replacement."
  },
  "functions": [
    {
      "name": "numpy.strings.add",
      "category": "String operations",
      "description": "Add arguments element-wise (string concatenation)",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.add.html",
      "doc": "Add arguments element-wise.\n\nFor string arrays, this concatenates the strings element-wise.\n\nParameters\n----------\nx1, x2 : array_like\n    Input arrays to be added element-wise.\n    Must be broadcastable to a common shape.\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored.\nwhere : array_like, optional\n    This condition is broadcast over the input.\nkwargs\n    For other keyword-only arguments, see the ufunc docs.\n\nReturns\n-------\nadd : ndarray or scalar\n    The concatenated strings, element-wise.\n\nExamples\n--------\n>>> np.strings.add([\"num\", \"doc\"], [\"py\", \"umentation\"])\narray(['numpy', 'documentation'], dtype='<U13')",
      "code": "# Universal function (ufunc) implemented in C\n# Add arguments element-wise (string concatenation)\n# \n# This function is implemented as a compiled ufunc in NumPy's C extension modules.\n# The ufunc infrastructure provides:\n# - Element-wise operations with broadcasting\n# - Type casting and promotion rules\n# - Output array allocation and memory management\n# - Optimized loops for different data types\n# - Support for where parameter (conditional operation)\n# - Vectorized execution using SIMD instructions where available\n#\n# For more details, see numpy/_core/src/umath/"
    },
    {
      "name": "numpy.strings.multiply",
      "category": "String operations",
      "description": "Return (a * i), that is string multiple concatenation, element-wise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.multiply.html",
      "doc": "Return (a * i), that is string multiple concatenation, element-wise.\n\nValues in `i` of less than 0 are treated as 0 (which yields an empty string).\n\nParameters\n----------\na : array_like, with `np.bytes_` or `np.str_` dtype\n    Input array of strings\ni : array_like, with any integer dtype\n    Number of times to repeat each string\n\nReturns\n-------\nout : ndarray\n    Output array of strings\n\nExamples\n--------\n>>> np.strings.multiply('Hello ', 3)\narray('Hello Hello Hello ', dtype='<U18')",
      "code": "def multiply(a, i):\n    \"\"\"\n    Return (a * i), that is string multiple concatenation,\n    element-wise.\n\n    Values in ``i`` of less than 0 are treated as 0 (which yields an\n    empty string).\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\n    i : array_like, with any integer dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    Examples\n    --------\n    >>> np.strings.multiply('Hello ', 3)\n    array('Hello Hello Hello ', dtype='<U18')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    i = np.asanyarray(i)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if i.dtype.kind not in \"iu\":\n        raise TypeError(f\"expected an integer array-like, got {i.dtype}\")\n    return _multiply_ufunc(a, i)"
    },
    {
      "name": "numpy.strings.center",
      "category": "String operations",
      "description": "Return a copy of a with its elements centered in a string of length width",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.center.html",
      "doc": "Return a copy of a with its elements centered in a string of length width.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nwidth : array_like, with any integer dtype\n    The length of the resulting strings, unless ``width < str_len(a)``.\nfillchar : array_like, with `StringDType`, `bytes_` or `str_` dtype, optional\n    The padding character to use. Default is space.\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types\n\nExamples\n--------\n>>> c = np.array(['a1b2','1b2a','b2a1','2a1b']); c\narray(['a1b2', '1b2a', 'b2a1', '2a1b'], dtype='<U4')\n>>> np.strings.center(c, width=9)\narray(['   a1b2  ', '   1b2a  ', '   b2a1  ', '   2a1b  '], dtype='<U9')",
      "code": "def center(a, width, fillchar=' '):\n    \"\"\"\n    Return a copy of `a` with its elements centered in a string of\n    length `width`.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n    width : array_like, with any integer dtype\n        The length of the resulting strings, unless ``width < str_len(a)``.\n    fillchar : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype, optional\n        The padding character to use. Default is space.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    See Also\n    --------\n    ljust, rjust\n\n    Notes\n    -----\n    This function is intended to work with arrays of strings.  The\n    fill character is not applied to numeric types.\n\n    Examples\n    --------\n    >>> c = np.array(['a1b2','1b2a','b2a1','2a1b']); c\n    array(['a1b2', '1b2a', 'b2a1', '2a1b'], dtype='<U4')\n    >>> np.strings.center(c, width=9)\n    array(['   a1b2  ', '   1b2a  ', '   b2a1  ', '   2a1b  '], dtype='<U9')\n    >>> np.strings.center(c, width=9, fillchar='*')\n    array(['***a1b2**', '***1b2a**', '***b2a1**', '***2a1b**'], dtype='<U9')\n    >>> np.strings.center(c, width=1)\n    array(['a1b2', '1b2a', 'b2a1', '2a1b'], dtype='<U4')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    fillchar = np.asanyarray(fillchar, dtype=a.dtype)\n    width = np.asanyarray(width)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if not _is_string_dtype(fillchar.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if width.dtype.kind not in \"iu\":\n        raise TypeError(f\"expected an integer array-like, got {width.dtype}\")\n    if np.any(str_len(fillchar) != 1):\n        raise TypeError(\"The fill character must be exactly one character long\")\n    return _center_ljust_rjust_ufunc(a, width, fillchar, 0)"
    },
    {
      "name": "numpy.strings.capitalize",
      "category": "String transformation",
      "description": "Return a copy of a with only the first character of each element capitalized",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.capitalize.html",
      "doc": "Return a copy of `a` with only the first character of each element capitalized.\n\nFor byte strings, this method is locale-dependent.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Input array of strings\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types\n\nExamples\n--------\n>>> np.strings.capitalize(['hello', 'world'])\narray(['Hello', 'World'], dtype='<U5')",
      "code": "def capitalize(a):\n    \"\"\"\n    Return a copy of ``a`` with only the first character of each element\n    capitalized.\n\n    For byte strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Input array of strings\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    See Also\n    --------\n    str.capitalize\n\n    Examples\n    --------\n    >>> c = np.array(['a1b2','1b2a','b2a1','2a1b'],'S4'); c\n    array([b'a1b2', b'1b2a', b'b2a1', b'2a1b'],\n          dtype='|S4')\n    >>> np.strings.capitalize(c)\n    array([b'A1b2', b'1b2a', b'B2a1', b'2a1b'],\n          dtype='|S4')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _capitalize_ufunc(a)"
    },
    {
      "name": "numpy.strings.decode",
      "category": "String encoding",
      "description": "Decode byte strings using the codec",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.decode.html",
      "doc": "Calls ``bytes.decode`` element-wise.\n\nParameters\n----------\na : array_like, with `bytes_` dtype\n    Input byte array\nencoding : str, optional\n    The name of an encoding. Default is 'utf-8'\nerrors : str, optional\n    Specifies how to handle encoding errors.\n    Default is 'strict'\n\nReturns\n-------\nout : ndarray\n    Output array of `str_` dtype",
      "code": "def decode(a, encoding='utf-8', errors='strict'):\n    \"\"\"\n    Calls :meth:`bytes.decode` element-wise.\n\n    Parameters\n    ----------\n    a : array_like, with ``bytes_`` dtype\n\n    encoding : str, optional\n        The name of an encoding\n\n    errors : str, optional\n        Specifies how to handle encoding errors\n\n    Returns\n    -------\n    out : ndarray\n\n    See Also\n    --------\n    :py:meth:`bytes.decode`\n\n    Notes\n    -----\n    The set of available codecs comes from the Python standard library,\n    and may be extended at runtime.  For more information, see the\n    :mod:`codecs` module.\n\n    Examples\n    --------\n    >>> np.strings.decode(b'\\\\xc3\\\\xa9')\n    array('\u00e9', dtype='<U1')\n\n    \"\"\"\n    return _to_bytes_or_str_array(\n        _vec_string_with_args(a, np.str_, 'decode', (encoding, errors)),\n        np.str_)"
    },
    {
      "name": "numpy.strings.encode",
      "category": "String encoding",
      "description": "Encode strings using the codec",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.encode.html",
      "doc": "Calls ``str.encode`` element-wise.\n\nParameters\n----------\na : array_like, with `str_` or `StringDType` dtype\n    Input string array\nencoding : str, optional\n    The name of an encoding. Default is 'utf-8'\nerrors : str, optional\n    Specifies how to handle encoding errors.\n    Default is 'strict'\n\nReturns\n-------\nout : ndarray\n    Output array of `bytes_` dtype",
      "code": "def encode(a, encoding='utf-8', errors='strict'):\n    \"\"\"\n    Calls :meth:`str.encode` element-wise.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    encoding : str, optional\n        The name of an encoding\n\n    errors : str, optional\n        Specifies how to handle encoding errors\n\n    Returns\n    -------\n    out : ndarray\n\n    See Also\n    --------\n    :py:meth:`str.encode`\n\n    Notes\n    -----\n    The set of available codecs comes from the Python standard library,\n    and may be extended at runtime.  For more information, see the\n    :mod:`codecs` module.\n\n    \"\"\"\n    return _to_bytes_or_str_array(\n        _vec_string_with_args(a, np.bytes_, 'encode', (encoding, errors)),\n        np.bytes_)"
    },
    {
      "name": "numpy.strings.expandtabs",
      "category": "String transformation",
      "description": "Return a copy of each string element where all tab characters are replaced by spaces",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.expandtabs.html",
      "doc": "Return a copy of each string element where all tab characters are replaced by one or more spaces.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Input array\ntabsize : array_like, with any integer dtype, optional\n    Replace tabs with `tabsize` number of spaces. Default is 8.\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input type",
      "code": "def expandtabs(a, tabsize=8):\n    \"\"\"\n    Return a copy of each string element where all tab characters are\n    replaced by one or more spaces.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Input array\n    tabsize : array_like, with any integer dtype, optional\n        Replace tabs with ``tabsize`` number of spaces.  If not given defaults\n        to 8 spaces.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input type\n\n    See Also\n    --------\n    str.expandtabs\n\n    Examples\n    --------\n    >>> a = np.array(['\\\\t\\\\tHello\\\\tworld'])\n    >>> np.strings.expandtabs(a)\n    array(['                Hello   world'], dtype='<U28')\n    \n    \"\"\"\n    a = np.asanyarray(a)\n    tabsize = np.asanyarray(tabsize)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if tabsize.dtype.kind not in \"iu\":\n        raise TypeError(f\"expected an integer array-like, got {tabsize.dtype}\")\n    return _expandtabs_ufunc(a, tabsize)"
    },
    {
      "name": "numpy.strings.ljust",
      "category": "String operations",
      "description": "Return an array with the elements of a left-justified in a string of length width",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.ljust.html",
      "doc": "Return an array with the elements of `a` left-justified in a string of length `width`.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nwidth : array_like, with any integer dtype\n    The length of the resulting strings, unless ``width < str_len(a)``.\nfillchar : array_like, with `StringDType`, `bytes_` or `str_` dtype, optional\n    The character to use for padding. Default is space.\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types",
      "code": "def ljust(a, width, fillchar=' '):\n    \"\"\"\n    Return an array with the elements of `a` left-justified in a\n    string of length `width`.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n    width : array_like, with any integer dtype\n        The length of the resulting strings, unless ``width < str_len(a)``.\n    fillchar : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype, optional\n        The character to use for padding. Default is space.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    See Also\n    --------\n    rjust, center\n\n    Examples\n    --------\n    >>> np.strings.ljust(['hello', 'world'], 10, fillchar='*')\n    array(['hello*****', 'world*****'], dtype='<U10')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    fillchar = np.asanyarray(fillchar, dtype=a.dtype)\n    width = np.asanyarray(width)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if not _is_string_dtype(fillchar.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if width.dtype.kind not in \"iu\":\n        raise TypeError(f\"expected an integer array-like, got {width.dtype}\")\n    if np.any(str_len(fillchar) != 1):\n        raise TypeError(\"The fill character must be exactly one character long\")\n    return _center_ljust_rjust_ufunc(a, width, fillchar, 1)"
    },
    {
      "name": "numpy.strings.lower",
      "category": "String transformation",
      "description": "Return an array with the elements converted to lowercase",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.lower.html",
      "doc": "Return an array with the elements of `a` converted to lowercase.\n\nFor byte strings, this method is locale-dependent.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Input array\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input type\n\nExamples\n--------\n>>> np.strings.lower(['HELLO', 'WORLD'])\narray(['hello', 'world'], dtype='<U5')",
      "code": "def lower(a):\n    \"\"\"\n    Return an array with the elements converted to lowercase.\n\n    For byte strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Input array\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input type\n\n    See Also\n    --------\n    str.lower\n\n    Examples\n    --------\n    >>> c = np.array(['A1B C', '1BCA', 'BCA1']); c\n    array(['A1B C', '1BCA', 'BCA1'], dtype='<U5')\n    >>> np.strings.lower(c)\n    array(['a1b c', '1bca', 'bca1'], dtype='<U5')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _lower_ufunc(a)"
    },
    {
      "name": "numpy.strings.lstrip",
      "category": "String operations",
      "description": "For each element in a, return a copy with the leading characters removed",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.lstrip.html",
      "doc": "For each element in `a`, return a copy with the leading characters removed.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nchars : array_like with `StringDType`, `bytes_` or `str_` dtype, optional\n    The characters to be removed. If None, whitespace characters are removed.\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types",
      "code": "def lstrip(a, chars=None):\n    \"\"\"\n    For each element in `a`, return a copy with the leading characters\n    removed.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n    chars : array_like with ``StringDType``, ``bytes_`` or ``str_`` dtype, optional\n        The ``chars`` argument is a string specifying the set of\n        characters to be removed. If ``None``, the ``chars``\n        argument defaults to removing whitespace. The ``chars`` argument\n        is not a prefix or suffix; rather, all combinations of its\n        values are stripped.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    See Also\n    --------\n    str.lstrip\n\n    Examples\n    --------\n    >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n    >>> np.strings.lstrip(c, 'a')\n    array(['AaAaA', '  aA  ', 'bBABba'], dtype='<U7')\n    >>> np.strings.lstrip(c, 'A')\n    array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')\n    >>> np.strings.lstrip(c)\n    array(['aAaAaA', 'aA  ', 'abBABba'], dtype='<U7')\n\n    \"\"\"\n    if chars is None:\n        return _lstrip_whitespace_ufunc(a)\n    return _lstrip_chars_ufunc(a, chars)"
    },
    {
      "name": "numpy.strings.partition",
      "category": "String operations",
      "description": "Partition each element in a around sep",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.partition.html",
      "doc": "Partition each element in `a` around `sep`.\n\nFor each element in `a`, split the element at the first occurrence of `sep`, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, the first item of the tuple will contain the whole string, and the second and third ones will be empty strings.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Input array\nsep : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Separator to split each string element in `a`\n\nReturns\n-------\nout : 3-tuple of ndarrays\n    Three arrays of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types, with shapes (1,) + a.shape, (...,)",
      "code": "def partition(a, sep):\n    \"\"\"\n    Partition each element in ``a`` around ``sep``.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Input array\n    sep : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Separator to split each string element in ``a``.\n\n    Returns\n    -------\n    out : 3-tuple:\n        - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n          part before the separator\n        - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n          separator\n        - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n          part after the separator\n\n    See Also\n    --------\n    str.partition\n\n    Examples\n    --------\n    >>> x = np.array([\"Numpy is nice!\"])\n    >>> np.strings.partition(x, \" \")\n    (array(['Numpy'], dtype='<U5'),\n     array([' '], dtype='<U1'),\n     array(['is nice!'], dtype='<U8'))\n\n    \"\"\"\n    a = np.asanyarray(a)\n    sep = np.asanyarray(sep, dtype=a.dtype)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if not _is_string_dtype(sep.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _partition_ufunc(a, sep)"
    },
    {
      "name": "numpy.strings.replace",
      "category": "String operations",
      "description": "For each element in a, return a copy of the string with occurrences of substring old replaced by new",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.replace.html",
      "doc": "For each element in `a`, return a copy of the string with occurrences of substring `old` replaced by `new`.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nold : array_like, with `StringDType`, `bytes_` or `str_` dtype\nnew : array_like, with `StringDType`, `bytes_` or `str_` dtype\ncount : array_like, with any integer dtype, optional\n    Maximum number of occurrences to replace. -1 (the default) means replace all occurrences.\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types",
      "code": "def replace(a, old, new, count=-1):\n    \"\"\"\n    For each element in ``a``, return a copy of the string with\n    occurrences of substring ``old`` replaced by ``new``.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    old, new : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    count : array_like, with any integer dtype\n        If the optional argument ``count`` is given, only the first\n        ``count`` occurrences are replaced.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    See Also\n    --------\n    str.replace\n\n    Examples\n    --------\n    >>> a = np.array([\"That is a mango\", \"Monkeys eat mangos\"])\n    >>> np.strings.replace(a, 'mango', 'banana')\n    array(['That is a banana', 'Monkeys eat bananas'], dtype='<U19')\n\n    >>> a = np.array([\"The dish is fresh\", \"This is it\"])\n    >>> np.strings.replace(a, 'is', 'was')\n    array(['The dwash was fresh', 'Thwas was it'], dtype='<U19')\n\n    \"\"\"\n    from ..strings import count as count_sub\n    \n    a = np.asanyarray(a)\n    old = np.asanyarray(old, dtype=a.dtype)\n    new = np.asanyarray(new, dtype=a.dtype)\n    count = np.asanyarray(count)\n\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if not _is_string_dtype(old.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if not _is_string_dtype(new.dtype):\n        raise TypeError(\"string operation on non-string array\")\n\n    if count.dtype.kind not in \"iu\":\n        raise TypeError(f\"expected an integer array-like, got {count.dtype}\")\n\n    max_int64 = np.array(np.iinfo(np.int64).max)\n    count = np.where(count < 0, max_int64, count)\n\n    # Make sure we find the longest string length by looking at the result\n    # with count == -1\n    counts = count_sub(a, old)\n    string_length = str_len(a) - str_len(old) * counts + str_len(new) * counts\n\n    # if count != -1, we replace at most count occurrences, so the new\n    # string length is guaranteed to be at least\n    # str_len(a) - str_len(old) * count + str_len(new) * count\n    count = counts if np.all(count == -1) else np.minimum(counts, count)\n    string_length = np.where(count == -1, string_length,\n                           str_len(a) - str_len(old) * count + str_len(new) * count)\n    max_string_length = np.max(string_length)\n    if hasattr(a.dtype, \"na_object\") and a.dtype.na_object is None:\n        # StringDType\n        out_dtype = type(a.dtype)()\n    else:\n        # fixed-length string dtype\n        out_dtype = f\"{a.dtype.char}{max_string_length}\"\n    return _replace_ufunc(a, old, new, count, _dtype=out_dtype)"
    },
    {
      "name": "numpy.strings.rjust",
      "category": "String operations",
      "description": "Return an array with the elements of a right-justified in a string of length width",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.rjust.html",
      "doc": "Return an array with the elements of `a` right-justified in a string of length `width`.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nwidth : array_like, with any integer dtype\n    The length of the resulting strings, unless ``width < str_len(a)``.\nfillchar : array_like, with `StringDType`, `bytes_` or `str_` dtype, optional\n    The character to use for padding. Default is space.\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types",
      "code": "def rjust(a, width, fillchar=' '):\n    \"\"\"\n    Return an array with the elements of `a` right-justified in a\n    string of length `width`.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n    width : array_like, with any integer dtype\n        The length of the resulting strings, unless ``width < str_len(a)``.\n    fillchar : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype, optional\n        The character to use for padding. Default is space.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    See Also\n    --------\n    ljust, center\n\n    Examples\n    --------\n    >>> np.strings.rjust(['hello', 'world'], 10, fillchar='*')\n    array(['*****hello', '*****world'], dtype='<U10')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    fillchar = np.asanyarray(fillchar, dtype=a.dtype)\n    width = np.asanyarray(width)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if not _is_string_dtype(fillchar.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if width.dtype.kind not in \"iu\":\n        raise TypeError(f\"expected an integer array-like, got {width.dtype}\")\n    if np.any(str_len(fillchar) != 1):\n        raise TypeError(\"The fill character must be exactly one character long\")\n    return _center_ljust_rjust_ufunc(a, width, fillchar, 2)"
    },
    {
      "name": "numpy.strings.rpartition",
      "category": "String operations",
      "description": "Partition each element in a around the right-most separator",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.rpartition.html",
      "doc": "Partition (split) each element around the right-most separator.\n\nFor each element in `a`, split the element at the last occurrence of `sep`, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, the third item of the tuple will contain the whole string, and the first and second ones will be empty strings.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Input array\nsep : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Right-most separator to split each string element in `a`\n\nReturns\n-------\nout : 3-tuple of ndarrays\n    Three arrays of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types",
      "code": "def rpartition(a, sep):\n    \"\"\"\n    Partition (split) each element around the right-most separator.\n\n    For each element in ``a``, split the element at the last occurrence\n    of ``sep``, and return a 3-tuple containing the part before the\n    separator, the separator itself, and the part after the separator.\n    If the separator is not found, the third item of the tuple will\n    contain the whole string, and the first and second ones will be empty\n    strings.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Input array\n    sep : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Separator to split each string element in ``a``.\n\n    Returns\n    -------\n    out : 3-tuple:\n        - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n          part before the separator\n        - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n          separator\n        - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n          part after the separator\n\n    See Also\n    --------\n    str.rpartition\n\n    Examples\n    --------\n    >>> a = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n    >>> np.strings.rpartition(a, 'A')\n    (array(['aAaA', '  a', 'abB'], dtype='<U4'),\n     array(['A', 'A', 'A'], dtype='<U1'),\n     array(['aA', '  ', 'Bba'], dtype='<U3'))\n\n    \"\"\"\n    a = np.asanyarray(a)\n    sep = np.asanyarray(sep, dtype=a.dtype)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if not _is_string_dtype(sep.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _rpartition_ufunc(a, sep)"
    },
    {
      "name": "numpy.strings.rstrip",
      "category": "String operations",
      "description": "For each element in a, return a copy with the trailing characters removed",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.rstrip.html",
      "doc": "For each element in `a`, return a copy with the trailing characters removed.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nchars : array_like with `StringDType`, `bytes_` or `str_` dtype, optional\n    The characters to be removed. If None, whitespace characters are removed.\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types",
      "code": "def rstrip(a, chars=None):\n    \"\"\"\n    For each element in `a`, return a copy with the trailing characters\n    removed.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n    chars : array_like with ``StringDType``, ``bytes_`` or ``str_`` dtype, optional\n        The ``chars`` argument is a string specifying the set of\n        characters to be removed. If ``None``, the ``chars``\n        argument defaults to removing whitespace. The ``chars`` argument\n        is not a prefix or suffix; rather, all combinations of its\n        values are stripped.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    See Also\n    --------\n    str.rstrip\n\n    Examples\n    --------\n    >>> c = np.array(['aAaAaA', 'abBABba'], dtype='S7'); c\n    array([b'aAaAaA', b'abBABba'],\n          dtype='|S7')\n    >>> np.strings.rstrip(c, b'a')\n    array([b'aAaAaA', b'abBABb'],\n          dtype='|S7')\n    >>> np.strings.rstrip(c, b'A')\n    array([b'aAaAa', b'abBABba'],\n          dtype='|S7')\n\n    \"\"\"\n    if chars is None:\n        return _rstrip_whitespace_ufunc(a)\n    return _rstrip_chars_ufunc(a, chars)"
    },
    {
      "name": "numpy.strings.strip",
      "category": "String operations",
      "description": "For each element in a, return a copy with the leading and trailing characters removed",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.strip.html",
      "doc": "For each element in `a`, return a copy with the leading and trailing characters removed.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nchars : array_like with `StringDType`, `bytes_` or `str_` dtype, optional\n    The characters to be removed. If None, whitespace characters are removed.\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types",
      "code": "def strip(a, chars=None):\n    \"\"\"\n    For each element in `a`, return a copy with the leading and\n    trailing characters removed.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n    chars : array_like with ``StringDType``, ``bytes_`` or ``str_`` dtype, optional\n        The ``chars`` argument is a string specifying the set of\n        characters to be removed. If ``None``, the ``chars``\n        argument defaults to removing whitespace. The ``chars`` argument\n        is not a prefix or suffix; rather, all combinations of its\n        values are stripped.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    See Also\n    --------\n    str.strip\n\n    Examples\n    --------\n    >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n    >>> np.strings.strip(c)\n    array(['aAaAaA', 'aA', 'abBABba'], dtype='<U7')\n    >>> np.strings.strip(c, 'a')\n    array(['AaAaA', '  aA  ', 'bBABb'], dtype='<U7')\n    >>> np.strings.strip(c, 'A')\n    array(['aAaAa', '  aA  ', 'abBABba'], dtype='<U7')\n\n    \"\"\"\n    if chars is None:\n        return _strip_whitespace_ufunc(a)\n    return _strip_chars_ufunc(a, chars)"
    },
    {
      "name": "numpy.strings.swapcase",
      "category": "String transformation",
      "description": "Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.swapcase.html",
      "doc": "Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa.\n\nFor byte strings, this method is locale-dependent.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Input array\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input type",
      "code": "def swapcase(a):\n    \"\"\"\n    Return element-wise a copy of the string with\n    uppercase characters converted to lowercase and vice versa.\n\n    For byte strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Input array\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input type\n\n    See Also\n    --------\n    str.swapcase\n\n    Examples\n    --------\n    >>> c=np.array(['a1B c','1b Ca','b Ca1','cA1b'],'S5'); c\n    array([b'a1B c', b'1b Ca', b'b Ca1', b'cA1b'],\n          dtype='|S5')\n    >>> np.strings.swapcase(c)\n    array([b'A1b C', b'1B cA', b'B cA1', b'Ca1B'],\n          dtype='|S5')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _swapcase_ufunc(a)"
    },
    {
      "name": "numpy.strings.title",
      "category": "String transformation",
      "description": "Return element-wise title cased version of string or unicode",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.title.html",
      "doc": "Return element-wise title cased version of string or unicode.\n\nTitle case words start with uppercase characters, all remaining cased characters are lowercase.\n\nFor byte strings, this method is locale-dependent.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Input array\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input type",
      "code": "def title(a):\n    \"\"\"\n    Return element-wise title cased version of string or unicode.\n\n    Title case words start with uppercase characters, all remaining cased\n    characters are lowercase.\n\n    For byte strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Input array\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input type\n\n    See Also\n    --------\n    str.title\n\n    Examples\n    --------\n    >>> c=np.array(['a1b c','1b ca','b ca1','ca1b'],'S5'); c\n    array([b'a1b c', b'1b ca', b'b ca1', b'ca1b'],\n          dtype='|S5')\n    >>> np.strings.title(c)\n    array([b'A1B C', b'1B Ca', b'B Ca1', b'Ca1B'],\n          dtype='|S5')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _title_ufunc(a)"
    },
    {
      "name": "numpy.strings.translate",
      "category": "String transformation",
      "description": "For each element in a, return a copy of the string where all characters occurring in the optional argument deletechars are removed, and the remaining characters have been mapped through the given translation table",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.translate.html",
      "doc": "For each element in `a`, return a copy of the string where all characters occurring in the optional argument `deletechars` are removed, and the remaining characters have been mapped through the given translation table.\n\nParameters\n----------\na : array_like, with `bytes_` dtype\ntable : array_like with `bytes_` dtype and shape (1, 256)\n    String of 256 bytes. Characters to map to (length 256)\ndeletechars : array_like, with `bytes_` dtype, optional\n    Characters to delete. If not given, no deletion occurs.\n\nReturns\n-------\nout : ndarray\n    Output array of `bytes_` dtype",
      "code": "def translate(a, table, deletechars=None):\n    \"\"\"\n    For each element in ``a``, return a copy of the string where\n    all characters occurring in the optional argument\n    ``deletechars`` are removed, and the remaining characters have\n    been mapped through the given translation table.\n\n    Parameters\n    ----------\n    a : array_like, with ``bytes_`` dtype\n\n    table : array_like with ``bytes_`` dtype and shape (1, 256)\n        If the ``table`` dtype is not \"bytes\" it will be casted.\n\n    deletechars : array_like, with ``bytes_`` dtype\n        If the ``deletechars`` dtype is not \"bytes\" it will be casted.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``bytes_`` dtype\n\n    See Also\n    --------\n    bytes.translate\n\n    Examples\n    --------\n    >>> a = np.array(['a1b2c3'], dtype='S7')\n    >>> table = b''.join([chr(i).encode('latin1') for i in range(256)])\n    >>> deletechars = b'abc'\n    >>> np.strings.translate(a, table, deletechars)\n    array([b'123'], dtype='|S3')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    table = np.asanyarray(table, dtype=np.bytes_)\n    if deletechars is None:\n        deletechars = np.array(b'', dtype=np.bytes_)\n    else:\n        deletechars = np.asanyarray(deletechars, dtype=np.bytes_)\n    if a.dtype.char != \"S\":\n        raise TypeError(\"translate is only available for byte strings\")\n    if table.dtype.char != \"S\":\n        raise TypeError(\"table must be a byte string with length 256\")\n    if deletechars.dtype.char != \"S\":\n        raise TypeError(\"deletechars must be a byte string\")\n    if table.size != 256:\n        raise ValueError(\"table must be a byte string with length 256\")\n    return _translate_ufunc(a, table, deletechars)"
    },
    {
      "name": "numpy.strings.upper",
      "category": "String transformation",
      "description": "Return an array with the elements converted to uppercase",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.upper.html",
      "doc": "Return an array with the elements converted to uppercase.\n\nFor byte strings, this method is locale-dependent.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    Input array\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input type",
      "code": "def upper(a):\n    \"\"\"\n    Return an array with the elements converted to uppercase.\n\n    For byte strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        Input array\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input type\n\n    See Also\n    --------\n    str.upper\n\n    Examples\n    --------\n    >>> c = np.array(['a1b c', '1bca', 'bca1']); c\n    array(['a1b c', '1bca', 'bca1'], dtype='<U5')\n    >>> np.strings.upper(c)\n    array(['A1B C', '1BCA', 'BCA1'], dtype='<U5')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _upper_ufunc(a)"
    },
    {
      "name": "numpy.strings.zfill",
      "category": "String operations",
      "description": "Return the numeric string left-filled with zeros",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.zfill.html",
      "doc": "Return the numeric string left-filled with zeros.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nwidth : array_like, with any integer dtype\n    Width of string to left-fill elements in `a`\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input type",
      "code": "def zfill(a, width):\n    \"\"\"\n    Return the numeric string left-filled with zeros\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n    width : array_like, with any integer dtype\n        Width of string to left-fill elements in ``a``.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input type\n\n    See Also\n    --------\n    str.zfill\n\n    Examples\n    --------\n    >>> np.strings.zfill('1', 3)\n    array('001', dtype='<U3')\n\n    \"\"\"\n    a = np.asanyarray(a)\n    width = np.asanyarray(width)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    if width.dtype.kind not in \"iu\":\n        raise TypeError(f\"expected an integer array-like, got {width.dtype}\")\n    return _zfill_ufunc(a, width)"
    },
    {
      "name": "numpy.strings.equal",
      "category": "String comparison",
      "description": "Return (x1 == x2) element-wise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.equal.html",
      "doc": "Return (x1 == x2) element-wise.\n\nFor string arrays, performs element-wise string comparison.\n\nParameters\n----------\nx1, x2 : array_like\n    Input arrays with string dtype.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored.\nwhere : array_like, optional\n    This condition is broadcast over the input.\nkwargs\n    For other keyword-only arguments, see the ufunc docs.\n\nReturns\n-------\nout : ndarray or scalar\n    Output array, element-wise comparison of x1 and x2.\n    Typically of type bool, unless ``dtype=object`` is passed.",
      "code": "# Universal function (ufunc) implemented in C\n# Return (x1 == x2) element-wise\n# \n# This function is implemented as a compiled ufunc in NumPy's C extension modules.\n# The ufunc infrastructure provides:\n# - Element-wise operations with broadcasting\n# - Type casting and promotion rules\n# - Output array allocation and memory management\n# - Optimized loops for different data types\n# - Support for where parameter (conditional operation)\n# - Vectorized execution using SIMD instructions where available\n#\n# For more details, see numpy/_core/src/umath/"
    },
    {
      "name": "numpy.strings.not_equal",
      "category": "String comparison",
      "description": "Return (x1 != x2) element-wise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.not_equal.html",
      "doc": "Return (x1 != x2) element-wise.\n\nFor string arrays, performs element-wise string comparison.\n\nParameters\n----------\nx1, x2 : array_like\n    Input arrays with string dtype.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored.\nwhere : array_like, optional\n    This condition is broadcast over the input.\nkwargs\n    For other keyword-only arguments, see the ufunc docs.\n\nReturns\n-------\nout : ndarray or scalar\n    Output array, element-wise comparison of x1 and x2.\n    Typically of type bool, unless ``dtype=object`` is passed.",
      "code": "# Universal function (ufunc) implemented in C\n# Return (x1 != x2) element-wise\n# \n# This function is implemented as a compiled ufunc in NumPy's C extension modules.\n# The ufunc infrastructure provides:\n# - Element-wise operations with broadcasting\n# - Type casting and promotion rules\n# - Output array allocation and memory management\n# - Optimized loops for different data types\n# - Support for where parameter (conditional operation)\n# - Vectorized execution using SIMD instructions where available\n#\n# For more details, see numpy/_core/src/umath/"
    },
    {
      "name": "numpy.strings.greater_equal",
      "category": "String comparison",
      "description": "Return the truth value of (x1 >= x2) element-wise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.greater_equal.html",
      "doc": "Return the truth value of (x1 >= x2) element-wise.\n\nFor string arrays, performs element-wise string comparison.\n\nParameters\n----------\nx1, x2 : array_like\n    Input arrays with string dtype.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored.\nwhere : array_like, optional\n    This condition is broadcast over the input.\nkwargs\n    For other keyword-only arguments, see the ufunc docs.\n\nReturns\n-------\nout : ndarray or scalar\n    Output array, element-wise comparison of x1 and x2.\n    Typically of type bool, unless ``dtype=object`` is passed.",
      "code": "# Universal function (ufunc) implemented in C\n# Return the truth value of (x1 >= x2) element-wise\n# \n# This function is implemented as a compiled ufunc in NumPy's C extension modules.\n# The ufunc infrastructure provides:\n# - Element-wise operations with broadcasting\n# - Type casting and promotion rules\n# - Output array allocation and memory management\n# - Optimized loops for different data types\n# - Support for where parameter (conditional operation)\n# - Vectorized execution using SIMD instructions where available\n#\n# For more details, see numpy/_core/src/umath/"
    },
    {
      "name": "numpy.strings.less_equal",
      "category": "String comparison",
      "description": "Return the truth value of (x1 <= x2) element-wise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.less_equal.html",
      "doc": "Return the truth value of (x1 <= x2) element-wise.\n\nFor string arrays, performs element-wise string comparison.\n\nParameters\n----------\nx1, x2 : array_like\n    Input arrays with string dtype.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored.\nwhere : array_like, optional\n    This condition is broadcast over the input.\nkwargs\n    For other keyword-only arguments, see the ufunc docs.\n\nReturns\n-------\nout : ndarray or scalar\n    Output array, element-wise comparison of x1 and x2.\n    Typically of type bool, unless ``dtype=object`` is passed.",
      "code": "# Universal function (ufunc) implemented in C\n# Return the truth value of (x1 <= x2) element-wise\n# \n# This function is implemented as a compiled ufunc in NumPy's C extension modules.\n# The ufunc infrastructure provides:\n# - Element-wise operations with broadcasting\n# - Type casting and promotion rules\n# - Output array allocation and memory management\n# - Optimized loops for different data types\n# - Support for where parameter (conditional operation)\n# - Vectorized execution using SIMD instructions where available\n#\n# For more details, see numpy/_core/src/umath/"
    },
    {
      "name": "numpy.strings.greater",
      "category": "String comparison",
      "description": "Return the truth value of (x1 > x2) element-wise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.greater.html",
      "doc": "Return the truth value of (x1 > x2) element-wise.\n\nFor string arrays, performs element-wise string comparison.\n\nParameters\n----------\nx1, x2 : array_like\n    Input arrays with string dtype.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored.\nwhere : array_like, optional\n    This condition is broadcast over the input.\nkwargs\n    For other keyword-only arguments, see the ufunc docs.\n\nReturns\n-------\nout : ndarray or scalar\n    Output array, element-wise comparison of x1 and x2.\n    Typically of type bool, unless ``dtype=object`` is passed.",
      "code": "# Universal function (ufunc) implemented in C\n# Return the truth value of (x1 > x2) element-wise\n# \n# This function is implemented as a compiled ufunc in NumPy's C extension modules.\n# The ufunc infrastructure provides:\n# - Element-wise operations with broadcasting\n# - Type casting and promotion rules\n# - Output array allocation and memory management\n# - Optimized loops for different data types\n# - Support for where parameter (conditional operation)\n# - Vectorized execution using SIMD instructions where available\n#\n# For more details, see numpy/_core/src/umath/"
    },
    {
      "name": "numpy.strings.less",
      "category": "String comparison",
      "description": "Return the truth value of (x1 < x2) element-wise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.less.html",
      "doc": "Return the truth value of (x1 < x2) element-wise.\n\nFor string arrays, performs element-wise string comparison.\n\nParameters\n----------\nx1, x2 : array_like\n    Input arrays with string dtype.\n    If ``x1.shape != x2.shape``, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored.\nwhere : array_like, optional\n    This condition is broadcast over the input.\nkwargs\n    For other keyword-only arguments, see the ufunc docs.\n\nReturns\n-------\nout : ndarray or scalar\n    Output array, element-wise comparison of x1 and x2.\n    Typically of type bool, unless ``dtype=object`` is passed.",
      "code": "# Universal function (ufunc) implemented in C\n# Return the truth value of (x1 < x2) element-wise\n# \n# This function is implemented as a compiled ufunc in NumPy's C extension modules.\n# The ufunc infrastructure provides:\n# - Element-wise operations with broadcasting\n# - Type casting and promotion rules\n# - Output array allocation and memory management\n# - Optimized loops for different data types\n# - Support for where parameter (conditional operation)\n# - Vectorized execution using SIMD instructions where available\n#\n# For more details, see numpy/_core/src/umath/"
    },
    {
      "name": "numpy.strings.count",
      "category": "String information",
      "description": "Returns an array with the number of non-overlapping occurrences of substring sub in the range [start, end]",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.count.html",
      "doc": "Returns an array with the number of non-overlapping occurrences of substring `sub` in the range [`start`, `end`].\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nsub : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    The substring to search for.\nstart, end : array_like, with any integer dtype, optional\n    The range to look in, interpreted as slice notation.\n\nReturns\n-------\nout : ndarray\n    Output array of ints",
      "code": "def count(a, sub, start=0, end=None):\n    \"\"\"\n    Returns an array with the number of non-overlapping occurrences of\n    substring ``sub`` in the range [``start``, ``end``].\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    sub : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        The substring to search for.\n\n    start, end : array_like, with any integer dtype, optional\n        The range to look in, interpreted as slice notation.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ints\n\n    See Also\n    --------\n    str.count\n\n    Examples\n    --------\n    >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n    >>> np.strings.count(c, 'A')\n    array([3, 1, 1])\n    >>> np.strings.count(c, 'aA')\n    array([3, 1, 0])\n    >>> np.strings.count(c, 'A', start=1, end=4)\n    array([2, 1, 0])\n    >>> np.strings.count(c, 'A', start=1, end=3)\n    array([1, 0, 0])\n\n    \"\"\"\n    end = end if end is not None else np.iinfo(np.int64).max\n    return _count_ufunc(a, sub, start, end)"
    },
    {
      "name": "numpy.strings.endswith",
      "category": "String information",
      "description": "Returns a boolean array which is True where the string element in a ends with suffix, otherwise False",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.endswith.html",
      "doc": "Returns a boolean array which is `True` where the string element in `a` ends with `suffix`, otherwise `False`.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nsuffix : array_like, with `StringDType`, `bytes_` or `str_` dtype\nstart, end : array_like, with any integer dtype, optional\n    With optional `start`, test beginning at that position. With optional `end`, stop comparing at that position.\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def endswith(a, suffix, start=0, end=None):\n    \"\"\"\n    Returns a boolean array which is `True` where the string element\n    in ``a`` ends with ``suffix``, otherwise ``False``.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    suffix : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    start, end : array_like, with any integer dtype, optional\n        With optional ``start``, test beginning at that position. With\n        optional ``end``, stop comparing at that position.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See Also\n    --------\n    str.endswith\n\n    Examples\n    --------\n    >>> s = np.array(['foo', 'bar'])\n    >>> np.strings.endswith(s, 'ar')\n    array([False,  True])\n    >>> np.strings.endswith(s, 'a', start=1, end=2)\n    array([False,  True])\n\n    \"\"\"\n    end = end if end is not None else np.iinfo(np.int64).max\n    return _endswith_ufunc(a, suffix, start, end)"
    },
    {
      "name": "numpy.strings.find",
      "category": "String information",
      "description": "For each element, return the lowest index in the string where substring sub is found",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.find.html",
      "doc": "For each element, return the lowest index in the string where substring `sub` is found, such that `sub` is contained in the range [`start`, `end`].\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nsub : array_like, with `StringDType`, `bytes_` or `str_` dtype\nstart, end : array_like, with any integer dtype, optional\n    The range to look in, interpreted as slice notation.\n\nReturns\n-------\nout : ndarray\n    Output array of ints. Returns -1 if `sub` is not found.",
      "code": "def find(a, sub, start=0, end=None):\n    \"\"\"\n    For each element, return the lowest index in the string where\n    substring ``sub`` is found, such that ``sub`` is contained in the\n    range [``start``, ``end``].\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    sub : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        The substring to search for.\n\n    start, end : array_like, with any integer dtype, optional\n        The range to look in, interpreted as slice notation.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ints.  Returns -1 if ``sub`` is not found.\n\n    See Also\n    --------\n    str.find\n\n    Examples\n    --------\n    >>> a = np.array([\"NumPy is a Python library\"])\n    >>> np.strings.find(a, \"Python\", start=0, end=None)\n    array([11])\n\n    \"\"\"\n    end = end if end is not None else np.iinfo(np.int64).max\n    return _find_ufunc(a, sub, start, end)"
    },
    {
      "name": "numpy.strings.index",
      "category": "String information",
      "description": "Like find, but raises ValueError when the substring is not found",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.index.html",
      "doc": "Like `find`, but raises `ValueError` when the substring is not found.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nsub : array_like, with `StringDType`, `bytes_` or `str_` dtype\nstart, end : array_like, with any integer dtype, optional\n    The range to look in, interpreted as slice notation.\n\nReturns\n-------\nout : ndarray\n    Output array of ints.\n\nRaises\n------\nValueError\n    If substring not found.",
      "code": "def index(a, sub, start=0, end=None):\n    \"\"\"\n    Like :py:meth:`find`, but raises :py:exc:`ValueError` when the\n    substring is not found.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    sub : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    start, end : array_like, with any integer dtype, optional\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ints.\n\n    See Also\n    --------\n    find, str.index\n\n    Examples\n    --------\n    >>> a = np.array([\"Computer Science\"])\n    >>> np.strings.index(a, \"Science\", start=0, end=None)\n    array([9])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    sub = np.asanyarray(sub, dtype=a.dtype)\n\n    end = end if end is not None else np.iinfo(np.int64).max\n    out = _find_ufunc(a, sub, start, end)\n    if np.any(out == -1):\n        raise ValueError(\"substring not found\")\n    return out"
    },
    {
      "name": "numpy.strings.isalnum",
      "category": "String information",
      "description": "Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.isalnum.html",
      "doc": "Returns true for each element if all characters in the string are alphanumeric and there is at least one character, false otherwise.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def isalnum(a):\n    \"\"\"\n    Returns true for each element if all characters in the string are\n    alphanumeric and there is at least one character, false otherwise.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See Also\n    --------\n    str.isalnum\n\n    Examples\n    --------\n    >>> a = np.array(['a', '1', 'a1', '(', ''])\n    >>> np.strings.isalnum(a)\n    array([ True,  True,  True, False, False])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _isalnum_ufunc(a)"
    },
    {
      "name": "numpy.strings.isalpha",
      "category": "String information",
      "description": "Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.isalpha.html",
      "doc": "Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def isalpha(a):\n    \"\"\"\n    Returns true for each element if all characters in the string are\n    alphabetic and there is at least one character, false otherwise.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See Also\n    --------\n    str.isalpha\n\n    Examples\n    --------\n    >>> a = np.array(['a', '1', 'a1', ''])\n    >>> np.strings.isalpha(a)\n    array([ True,  False,  False, False])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _isalpha_ufunc(a)"
    },
    {
      "name": "numpy.strings.isdecimal",
      "category": "String information",
      "description": "For each element, return True if there are only decimal characters in the element",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.isdecimal.html",
      "doc": "For each element, return True if there are only decimal characters in the element.\n\nDecimal characters include digit characters, and all characters that can be used to form decimal-radix numbers.\n\nParameters\n----------\na : array_like, with `str_` or `StringDType` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def isdecimal(a):\n    \"\"\"\n    For each element, return True if there are only decimal\n    characters in the element.\n\n    Decimal characters include digit characters, and all characters\n    that can be used to form decimal-radix numbers,\n    e.g. ``U+0660, ARABIC-INDIC DIGIT ZERO``.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Array of booleans identical in shape to ``a``.\n\n    See Also\n    --------\n    isdigit\n\n    Examples\n    --------\n    >>> np.strings.isdecimal(['12345', '4.99', '123ABC', ''])\n    array([ True, False, False, False])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _isdecimal_ufunc(a)"
    },
    {
      "name": "numpy.strings.isdigit",
      "category": "String information",
      "description": "Returns true for each element if all characters in the string are digits, and there is at least one character, false otherwise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.isdigit.html",
      "doc": "Returns true for each element if all characters in the string are digits, and there is at least one character, false otherwise.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def isdigit(a):\n    \"\"\"\n    Returns true for each element if all characters in the string are\n    digits, and there is at least one character, false otherwise.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See Also\n    --------\n    str.isdigit\n\n    Examples\n    --------\n    >>> a = np.array(['a', 'b', '0'], dtype='S1')\n    >>> np.strings.isdigit(a)\n    array([False, False,  True])\n    >>> a = np.array(['a', 'b', '0'], dtype='U1')\n    >>> np.strings.isdigit(a)\n    array([False, False,  True])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _isdigit_ufunc(a)"
    },
    {
      "name": "numpy.strings.islower",
      "category": "String information",
      "description": "Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.islower.html",
      "doc": "Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def islower(a):\n    \"\"\"\n    Returns true for each element if all cased characters in the\n    string are lowercase and there is at least one cased character,\n    false otherwise.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See Also\n    --------\n    str.islower\n\n    Examples\n    --------\n    >>> np.strings.islower(\"GHC\")\n    array(False)\n    >>> np.strings.islower(\"ghc\")\n    array(True)\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _islower_ufunc(a)"
    },
    {
      "name": "numpy.strings.isnumeric",
      "category": "String information",
      "description": "For each element, return True if there are only numeric characters in the element",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.isnumeric.html",
      "doc": "For each element, return True if there are only numeric characters in the element.\n\nNumeric characters include digit characters, and all characters that have the Unicode numeric value property.\n\nParameters\n----------\na : array_like, with `str_` or `StringDType` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def isnumeric(a):\n    \"\"\"\n    For each element, return True if there are only numeric\n    characters in the element.\n\n    Numeric characters include digit characters, and all characters\n    that have the Unicode numeric value property, e.g. ``U+2155,\n    VULGAR FRACTION ONE FIFTH``.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Array of booleans of same shape as ``a``.\n\n    See Also\n    --------\n    str.isnumeric\n\n    Examples\n    --------\n    >>> np.strings.isnumeric(['123', '123abc', '9.0', '1/4', '\\u2155'])\n    array([ True, False, False, False,  True])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _isnumeric_ufunc(a)"
    },
    {
      "name": "numpy.strings.isspace",
      "category": "String information",
      "description": "Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.isspace.html",
      "doc": "Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def isspace(a):\n    \"\"\"\n    Returns true for each element if there are only whitespace\n    characters in the string and there is at least one character,\n    false otherwise.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See Also\n    --------\n    str.isspace\n\n    Examples\n    --------\n    >>> a = np.array([' ', '\\\\t', '\\\\n', 'a'])\n    >>> np.strings.isspace(a)\n    array([ True,  True,  True, False])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _isspace_ufunc(a)"
    },
    {
      "name": "numpy.strings.istitle",
      "category": "String information",
      "description": "Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.istitle.html",
      "doc": "Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def istitle(a):\n    \"\"\"\n    Returns true for each element if the element is a titlecased\n    string and there is at least one character, false otherwise.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See Also\n    --------\n    str.istitle\n\n    Examples\n    --------\n    >>> np.strings.istitle(\"Numpy Is Great\")\n    array(True)\n\n    >>> np.strings.istitle(\"Numpy is great\")\n    array(False)\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _istitle_ufunc(a)"
    },
    {
      "name": "numpy.strings.isupper",
      "category": "String information",
      "description": "Return true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.isupper.html",
      "doc": "Return true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def isupper(a):\n    \"\"\"\n    Return true for each element if all cased characters in the\n    string are uppercase and there is at least one character, false\n    otherwise.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See Also\n    --------\n    str.isupper\n\n    Examples\n    --------\n    >>> np.strings.isupper(\"GHC\")\n    array(True)\n    >>> a = np.array([\"hello\", \"HELLO\", \"Hello\"])\n    >>> np.strings.isupper(a)\n    array([False,  True, False])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _isupper_ufunc(a)"
    },
    {
      "name": "numpy.strings.rfind",
      "category": "String information",
      "description": "For each element, return the highest index in the string where substring sub is found, such that sub is contained within [start, end]",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.rfind.html",
      "doc": "For each element, return the highest index in the string where substring `sub` is found, such that `sub` is contained within [`start`, `end`].\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nsub : array_like, with `StringDType`, `bytes_` or `str_` dtype\n    The substring to search for.\nstart, end : array_like, with any integer dtype, optional\n    The range to look in, interpreted as slice notation.\n\nReturns\n-------\nout : ndarray\n    Output array of ints. Returns -1 if `sub` is not found.",
      "code": "def rfind(a, sub, start=0, end=None):\n    \"\"\"\n    For each element, return the highest index in the string where\n    substring ``sub`` is found, such that ``sub`` is contained within\n    [``start``, ``end``].\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    sub : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n        The substring to search for.\n\n    start, end : array_like, with any integer dtype, optional\n        The range to look in, interpreted as slice notation.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ints.  Returns -1 if ``sub`` is not found.\n\n    See Also\n    --------\n    str.rfind\n\n    Examples\n    --------\n    >>> a = np.array([\"Computer Science\"])\n    >>> np.strings.rfind(a, \"Science\", start=0, end=None)\n    array([9])\n\n    \"\"\"\n    end = end if end is not None else np.iinfo(np.int64).max\n    return _rfind_ufunc(a, sub, start, end)"
    },
    {
      "name": "numpy.strings.rindex",
      "category": "String information",
      "description": "Like rfind, but raises ValueError when the substring is not found",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.rindex.html",
      "doc": "Like `rfind`, but raises `ValueError` when the substring is not found.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nsub : array_like, with `StringDType`, `bytes_` or `str_` dtype\nstart, end : array_like, with any integer dtype, optional\n    The range to look in, interpreted as slice notation.\n\nReturns\n-------\nout : ndarray\n    Output array of ints.\n\nRaises\n------\nValueError\n    If substring not found.",
      "code": "def rindex(a, sub, start=0, end=None):\n    \"\"\"\n    Like :py:meth:`rfind`, but raises :py:exc:`ValueError` when the\n    substring is not found.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    sub : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    start, end : array_like, with any integer dtype, optional\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ints.\n\n    See Also\n    --------\n    rfind, str.rindex\n\n    Examples\n    --------\n    >>> a = np.array([\"Computer Science\"])\n    >>> np.strings.rindex(a, \"Science\", start=0, end=None)\n    array([9])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    sub = np.asanyarray(sub, dtype=a.dtype)\n\n    end = end if end is not None else np.iinfo(np.int64).max\n    out = _rfind_ufunc(a, sub, start, end)\n    if np.any(out == -1):\n        raise ValueError(\"substring not found\")\n    return out"
    },
    {
      "name": "numpy.strings.startswith",
      "category": "String information",
      "description": "Returns a boolean array which is True where the string element in a starts with prefix, otherwise False",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.startswith.html",
      "doc": "Returns a boolean array which is `True` where the string element in `a` starts with `prefix`, otherwise `False`.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nprefix : array_like, with `StringDType`, `bytes_` or `str_` dtype\nstart, end : array_like, with any integer dtype, optional\n    With optional `start`, test beginning at that position. With optional `end`, stop comparing at that position.\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
      "code": "def startswith(a, prefix, start=0, end=None):\n    \"\"\"\n    Returns a boolean array which is `True` where the string element\n    in ``a`` starts with ``prefix``, otherwise ``False``.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    prefix : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    start, end : array_like, with any integer dtype, optional\n        With optional ``start``, test beginning at that position. With\n        optional ``end``, stop comparing at that position.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See Also\n    --------\n    str.startswith\n\n    Examples\n    --------\n    >>> s = np.array(['foo', 'bar'])\n    >>> np.strings.startswith(s, 'fo')\n    array([ True, False])\n    >>> np.strings.startswith(s, 'o', start=1, end=2)\n    array([ True, False])\n\n    \"\"\"\n    end = end if end is not None else np.iinfo(np.int64).max\n    return _startswith_ufunc(a, prefix, start, end)"
    },
    {
      "name": "numpy.strings.str_len",
      "category": "String information",
      "description": "Returns the length of each element",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.str_len.html",
      "doc": "Returns the length of each element.\n\nFor byte strings, this is the number of bytes. For Unicode strings, this is the number of Unicode code points.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of ints",
      "code": "def str_len(a):\n    \"\"\"\n    Returns the length of each element.\n\n    For byte strings, this is the number of bytes. For Unicode\n    strings, this is the number of Unicode code points.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ints\n\n    See Also\n    --------\n    len\n\n    Examples\n    --------\n    >>> a = np.array(['Grace Hopper Conference', 'Open Source Day'])\n    >>> np.strings.str_len(a)\n    array([23, 15])\n    >>> a = np.array([u'\u0420', u'\u043e'])\n    >>> np.strings.str_len(a)\n    array([1, 1])\n    >>> a = np.array([['hello', 'world'], ['val', ''], [u'\u0420', u'\u043e']])\n    >>> np.strings.str_len(a)\n    array([[5, 5],\n           [3, 0],\n           [1, 1]])\n\n    \"\"\"\n    a = np.asanyarray(a)\n    if not _is_string_dtype(a.dtype):\n        raise TypeError(\"string operation on non-string array\")\n    return _str_len_ufunc(a)"
    },
    {
      "name": "numpy.strings.split",
      "category": "String operations",
      "description": "For each element in a, return a list of the words in the string, using sep as the delimiter string",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.split.html",
      "doc": "For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nsep : array_like, with `StringDType`, `bytes_` or `str_` dtype, optional\n    If `sep` is not specified or None, any whitespace string is a separator.\nmaxsplit : array_like, with any integer dtype, optional\n    If `maxsplit` is given, at most `maxsplit` splits are done.\n\nReturns\n-------\nout : ndarray\n    Output array of objects",
      "code": "def split(a, sep=None, maxsplit=None):\n    \"\"\"\n    For each element in ``a``, return a list of the words in the\n    string, using ``sep`` as the delimiter string.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    sep : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype, optional\n       If ``sep`` is not specified or ``None``, any whitespace string\n       is a separator.\n\n    maxsplit : array_like, with any integer dtype\n       If ``maxsplit`` is given, at most ``maxsplit`` splits are done.\n\n    Returns\n    -------\n    out : ndarray\n        Array of list objects\n\n    See Also\n    --------\n    str.split, rsplit\n\n    Examples\n    --------\n    >>> x = np.array(\"Numpy is nice!\")\n    >>> np.strings.split(x, \" \")\n    array(list(['Numpy', 'is', 'nice!']), dtype=object)\n\n    >>> np.strings.split(x, \" \", 1)\n    array(list(['Numpy', 'is nice!']), dtype=object)\n\n    \"\"\"\n    if not np.isscalar(a):\n        a = np.asanyarray(a)\n    if a.dtype.char == \"T\":\n        return _split(a, sep, maxsplit)\n    return _to_bytes_or_str_array(_split(_to_string_dtype_array(a), sep, maxsplit))"
    },
    {
      "name": "numpy.strings.rsplit",
      "category": "String operations",
      "description": "For each element in a, return a list of the words in the string, using sep as the delimiter string",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.rsplit.html",
      "doc": "For each element in `a`, return a list of the words in the string, using `sep` as the delimiter string.\n\nSplits from the right.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nsep : array_like, with `StringDType`, `bytes_` or `str_` dtype, optional\n    If `sep` is not specified or None, any whitespace string is a separator.\nmaxsplit : array_like, with any integer dtype, optional\n    If `maxsplit` is given, at most `maxsplit` splits are done.\n\nReturns\n-------\nout : ndarray\n    Output array of objects",
      "code": "def rsplit(a, sep=None, maxsplit=None):\n    \"\"\"\n    For each element in ``a``, return a list of the words in the\n    string, using ``sep`` as the delimiter string.\n\n    Splits from the right.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    sep : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype, optional\n        If ``sep`` is not specified or ``None``, any whitespace string\n        is a separator.\n\n    maxsplit : array_like, with any integer dtype\n        If ``maxsplit`` is given, at most ``maxsplit`` splits are done.\n\n    Returns\n    -------\n    out : ndarray\n        Array of list objects\n\n    See Also\n    --------\n    str.rsplit, split\n\n    Examples\n    --------\n    >>> a = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n    >>> np.strings.rsplit(a, 'A')\n    array([list(['a', 'a', 'a', '']),\n           list(['  a', '  ']),\n           list(['abB', 'Bba'])], dtype=object)\n\n    \"\"\"\n    if not np.isscalar(a):\n        a = np.asanyarray(a)\n    if a.dtype.char == \"T\":\n        return _rsplit(a, sep, maxsplit)\n    return _to_bytes_or_str_array(_rsplit(_to_string_dtype_array(a), sep, maxsplit))"
    },
    {
      "name": "numpy.strings.splitlines",
      "category": "String operations",
      "description": "For each element in a, return a list of the lines in the element, breaking at line boundaries",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.splitlines.html",
      "doc": "For each element in `a`, return a list of the lines in the element, breaking at line boundaries.\n\nLine breaks are not included in the resulting list unless keepends is given and true.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\nkeepends : bool, optional\n    Line breaks are not included in the resulting list unless keepends is given and true.\n\nReturns\n-------\nout : ndarray\n    Output array of objects",
      "code": "def splitlines(a, keepends=None):\n    \"\"\"\n    For each element in ``a``, return a list of the lines in the\n    element, breaking at line boundaries.\n\n    Line breaks are not included in the resulting list unless\n    ``keepends`` is given and true.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    keepends : bool, optional\n        Line breaks are not included in the resulting list unless\n        ``keepends`` is given and true.\n\n    Returns\n    -------\n    out : ndarray\n        Array of list objects\n\n    See Also\n    --------\n    str.splitlines\n\n    Examples\n    --------\n    >>> np.strings.splitlines([\"hello\\nworld\"])\n    array(list(['hello', 'world']), dtype=object)\n\n    >>> np.strings.splitlines([\"hello\\nworld\"], keepends=True)\n    array(list(['hello\\n', 'world']), dtype=object)\n\n    \"\"\"\n    return _splitlines(a, keepends)"
    },
    {
      "name": "numpy.strings.join",
      "category": "String operations",
      "description": "Return a string which is the concatenation of the strings in the sequence seq",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.join.html",
      "doc": "Return a string which is the concatenation of the strings in the sequence `seq`.\n\nParameters\n----------\nsep : array_like, with `StringDType`, `bytes_` or `str_` dtype\nseq : array_like, with `StringDType`, `bytes_` or `str_` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types",
      "code": "def join(sep, seq):\n    \"\"\"\n    Return a string which is the concatenation of the strings in the\n    sequence ``seq``.\n\n    Parameters\n    ----------\n    sep : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n    seq : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    See Also\n    --------\n    str.join\n\n    Examples\n    --------\n    >>> np.strings.join('-', 'osd')\n    array('o-s-d', dtype='<U5')\n\n    >>> np.strings.join(['-', '.'], ['ghc', 'osd'])\n    array(['g-h-c', 'o.s.d'], dtype='<U5')\n\n    \"\"\"\n    return _join(sep, seq)"
    },
    {
      "name": "numpy.strings.mod",
      "category": "String operations",
      "description": "Return (a % i), that is pre-Python 2.6 string formatting (interpolation), element-wise for a pair of array_likes of string objects",
      "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.mod.html",
      "doc": "Return (a % i), that is pre-Python 2.6 string formatting (interpolation), element-wise for a pair of array_likes of string objects.\n\nFor example, if `a = '%.2f hours'` and `i = 2.5`, the result is '2.50 hours'.\n\nParameters\n----------\na : array_like, with `StringDType`, `bytes_` or `str_` dtype\ni : array_like\n    A single Python object, or a sequence of objects, used for filling in the format string.\n\nReturns\n-------\nout : ndarray\n    Output array of `StringDType`, `bytes_` or `str_` dtype,\n    depending on input types",
      "code": "def mod(a, values):\n    \"\"\"\n    Return (a % i), that is pre-Python 2.6 string formatting\n    (interpolation), element-wise for a pair of array_likes of ``bytes``\n    or ``str``.\n\n    Parameters\n    ----------\n    a : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\n    values : array_like\n        These values will be element-wise interpolated into array ``a``.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n        depending on input types\n\n    Examples\n    --------\n    >>> np.strings.mod(['Hello, %s', 'A is %i'], ['World', 10])\n    array(['Hello, World', 'A is 10'], dtype='<U12')\n\n    \"\"\"\n    if not np.isscalar(a):\n        a = np.asanyarray(a)\n    if not np.isscalar(values):\n        values = np.asanyarray(values)\n\n    if a.dtype.char == \"T\":\n        return _mod(a, values)\n    return _to_bytes_or_str_array(_mod(_to_string_dtype_array(a), values))"
    }
  ]
}
Parsing numpy dependency graph...
Found 277 modules and 790 dependencies

================================================================================
DEPENDENCY ANALYSIS
================================================================================

Modules with no dependencies (131):
   1. numpy
   2. numpy__configtool
   3. numpy__pyinstaller_tests
   4. numpy_conftest
   5. numpy_core__dtype
   6. numpy_core__dtype_ctypes
   7. numpy_core__internal
   8. numpy_core__multiarray_umath
   9. numpy_core_arrayprint
  10. numpy_core_defchararray
  11. numpy_core_einsumfunc
  12. numpy_core_fromnumeric
  13. numpy_core_function_base
  14. numpy_core_getlimits
  15. numpy_core_multiarray
  ... and 116 more

Most depended-upon modules:
   1. numpy: 43 modules depend on it
   2. numpy_lib: 26 modules depend on it
   3. numpy__core: 20 modules depend on it
   4. numpy_lib__function_base_impl: 10 modules depend on it
   5. numpy_lib__npyio_impl: 10 modules depend on it
   6. numpy_ma_tests_test_core: 10 modules depend on it
   7. numpy__core_numeric: 9 modules depend on it
   8. numpy__typing: 9 modules depend on it
   9. numpy_f2py_f2py2e: 9 modules depend on it
  10. numpy_lib__index_tricks_impl: 9 modules depend on it
  11. numpy_lib__polynomial_impl: 9 modules depend on it
  12. numpy_lib__shape_base_impl: 9 modules depend on it
  13. numpy_lib_tests_test_io: 9 modules depend on it
  14. numpy_linalg__linalg: 8 modules depend on it
  15. numpy_polynomial: 8 modules depend on it

================================================================================
DEPENDENCY LEVELS (Topological Sort)
================================================================================

Level 0 (131 modules):
   1. numpy <- no dependencies
   2. numpy__configtool <- no dependencies
   3. numpy__pyinstaller_tests <- no dependencies
   4. numpy_conftest <- no dependencies
   5. numpy_core__dtype <- no dependencies
   6. numpy_core__dtype_ctypes <- no dependencies
   7. numpy_core__internal <- no dependencies
   8. numpy_core__multiarray_umath <- no dependencies
   9. numpy_core_arrayprint <- no dependencies
  10. numpy_core_defchararray <- no dependencies
  ... and 121 more

Level 1 (22 modules):
   1. numpy___config__ <- depends on: numpy
   2. numpy__array_api_info <- depends on: numpy
   3. numpy__distributor_init <- depends on: numpy
   4. numpy__expired_attrs_2_0 <- depends on: numpy
   5. numpy__utils__pep440 <- depends on: numpy_random_tests_test_extending
   6. numpy_char <- depends on: numpy
   7. numpy_core <- depends on: numpy, numpy_tests_test_public_api
   8. numpy_ctypeslib <- depends on: numpy, numpy_tests_test_ctypeslib
   9. numpy_dtypes <- depends on: numpy
  10. numpy_f2py <- depends on: numpy
  ... and 12 more

Level 2 (13 modules):
   1. numpy__core_defchararray <- depends on: numpy_char, numpy_core_defchararray
   2. numpy__typing__add_docstring <- depends on: numpy_typing
   3. numpy_core__utils <- depends on: numpy_core__multiarray_umath, numpy_core, numpy_core_getlimits
   4. numpy_ctypeslib__ctypeslib <- depends on: numpy_ctypeslib
   5. numpy_f2py_diagnose <- depends on: numpy_f2py
   6. numpy_fft__pocketfft <- depends on: numpy_fft
   7. numpy_fft_helper <- depends on: numpy_fft
   8. numpy_polynomial_chebyshev <- depends on: numpy_polynomial_tests_test_chebyshev, numpy_polynomial
   9. numpy_polynomial_hermite <- depends on: numpy_polynomial_tests_test_hermite, numpy_polynomial
  10. numpy_polynomial_hermite_e <- depends on: numpy_polynomial_tests_test_hermite_e, numpy_polynomial
  ... and 3 more

Level 3 (4 modules):
   1. numpy_f2py_f2py2e <- depends on: numpy_f2py, numpy_f2py_tests_test_f2py2e, numpy_f2py___main__
   2. numpy_fft__helper <- depends on: numpy_fft, numpy_fft_helper
   3. numpy_polynomial_polynomial <- depends on: numpy_polynomial_tests_test_chebyshev, numpy_polynomial, numpy_polynomial_hermite
   4. numpy_strings <- depends on: numpy, numpy__core_defchararray

Level 4 (5 modules):
   1. numpy__core_strings <- depends on: numpy_strings, numpy__core_defchararray
   2. numpy_f2py__backends <- depends on: numpy_f2py_tests_util, numpy_f2py_f2py2e
   3. numpy_f2py_cb_rules <- depends on: numpy_f2py_f2py2e
   4. numpy_f2py_f90mod_rules <- depends on: numpy_f2py_f2py2e
   5. numpy_polynomial__polybase <- depends on: numpy_polynomial, numpy_polynomial_hermite, numpy_polynomial_legendre

Level 5 (4 modules):
   1. numpy_f2py__backends__distutils <- depends on: numpy_f2py__backends
   2. numpy_f2py__backends__meson <- depends on: numpy_f2py__backends, numpy_f2py_tests_util
   3. numpy_f2py_rules <- depends on: numpy_f2py_f90mod_rules, numpy_f2py_f2py2e
   4. numpy_polynomial_polyutils <- depends on: numpy_polynomial_tests_test_polyutils, numpy_polynomial_hermite, numpy_polynomial_legendre

Level 6 (3 modules):
   1. numpy_f2py__backends__backend <- depends on: numpy_f2py__backends__meson, numpy_f2py__backends__distutils
   2. numpy_f2py_common_rules <- depends on: numpy_f2py_rules
   3. numpy_f2py_use_rules <- depends on: numpy_f2py_rules

Level 7 (1 modules):
   1. numpy_f2py_func2subr <- depends on: numpy_f2py_f90mod_rules, numpy_f2py_rules, numpy_f2py_common_rules

================================================================================
MODULE CATEGORIES
================================================================================

ROOT (2 modules):
  1. numpy (0 dependencies)
  2. numpy_version (5 dependencies)

CORE (47 modules):
  1. numpy_core__dtype (0 dependencies)
  2. numpy_core__dtype_ctypes (0 dependencies)
  3. numpy_core__internal (0 dependencies)
  4. numpy_core__multiarray_umath (0 dependencies)
  5. numpy_core_arrayprint (0 dependencies)
  6. numpy_core_defchararray (0 dependencies)
  7. numpy_core_einsumfunc (0 dependencies)
  8. numpy_core_fromnumeric (0 dependencies)
  ... and 39 more

TYPING (11 modules):
  1. numpy__typing__add_docstring (1 dependencies)
  2. numpy__typing__dtype_like (1 dependencies)
  3. numpy__typing__nbit (1 dependencies)
  4. numpy__typing__scalars (1 dependencies)
  5. numpy__typing__ufunc (1 dependencies)
  6. numpy__typing__array_like (2 dependencies)
  7. numpy__typing__char_codes (2 dependencies)
  8. numpy__typing__nested_sequence (2 dependencies)
  ... and 3 more

INTERNAL (10 modules):
  1. numpy__configtool (0 dependencies)
  2. numpy___config__ (1 dependencies)
  3. numpy__array_api_info (1 dependencies)
  4. numpy__distributor_init (1 dependencies)
  5. numpy__expired_attrs_2_0 (1 dependencies)
  6. numpy__utils__convertions (1 dependencies)
  7. numpy__utils__pep440 (1 dependencies)
  8. numpy__utils__inspect (2 dependencies)
  ... and 2 more

LIB (32 modules):
  1. numpy_lib_user_array (0 dependencies)
  2. numpy_lib__array_utils_impl (1 dependencies)
  3. numpy_lib__arrayterator_impl (1 dependencies)
  4. numpy_lib__scimath_impl (1 dependencies)
  5. numpy_lib__user_array_impl (1 dependencies)
  6. numpy_lib__version (1 dependencies)
  7. numpy_lib_introspect (1 dependencies)
  8. numpy_lib_npyio (1 dependencies)
  ... and 24 more

LINALG (3 modules):
  1. numpy_linalg_linalg (1 dependencies)
  2. numpy_linalg__linalg (3 dependencies)
  3. numpy_linalg (13 dependencies)

FFT (4 modules):
  1. numpy_fft (1 dependencies)
  2. numpy_fft__pocketfft (1 dependencies)
  3. numpy_fft_helper (1 dependencies)
  4. numpy_fft__helper (2 dependencies)

RANDOM (2 modules):
  1. numpy_random__pickle (1 dependencies)
  2. numpy_random (5 dependencies)

POLYNOMIAL (9 modules):
  1. numpy_polynomial (2 dependencies)
  2. numpy_polynomial_chebyshev (2 dependencies)
  3. numpy_polynomial_hermite (2 dependencies)
  4. numpy_polynomial_hermite_e (2 dependencies)
  5. numpy_polynomial_laguerre (2 dependencies)
  6. numpy_polynomial_legendre (2 dependencies)
  7. numpy_polynomial__polybase (7 dependencies)
  8. numpy_polynomial_polyutils (9 dependencies)
  ... and 1 more

MASKED_ARRAYS (7 modules):
  1. numpy_matlib (2 dependencies)
  2. numpy_ma_extras (3 dependencies)
  3. numpy_matrixlib_defmatrix (3 dependencies)
  4. numpy_ma_mrecords (4 dependencies)
  5. numpy_matrixlib (4 dependencies)
  6. numpy_ma (8 dependencies)
  7. numpy_ma_core (8 dependencies)

OTHER (8 modules):
  1. numpy_char (1 dependencies)
  2. numpy_ctypeslib__ctypeslib (1 dependencies)
  3. numpy_dtypes (1 dependencies)
  4. numpy_rec (1 dependencies)
  5. numpy_typing (1 dependencies)
  6. numpy_ctypeslib (2 dependencies)
  7. numpy_strings (2 dependencies)
  8. numpy_exceptions (17 dependencies)

F2PY (22 modules):
  1. numpy_f2py___main__ (0 dependencies)
  2. numpy_f2py (1 dependencies)
  3. numpy_f2py__backends__distutils (1 dependencies)
  4. numpy_f2py__src_pyf (1 dependencies)
  5. numpy_f2py_cb_rules (1 dependencies)
  6. numpy_f2py_common_rules (1 dependencies)
  7. numpy_f2py_diagnose (1 dependencies)
  8. numpy_f2py_f90mod_rules (1 dependencies)
  ... and 14 more

TESTING (120 modules):
  1. numpy__pyinstaller_tests (0 dependencies)
  2. numpy_conftest (0 dependencies)
  3. numpy_f2py_tests (0 dependencies)
  4. numpy_f2py_tests_test_abstract_interface (0 dependencies)
  5. numpy_f2py_tests_test_array_from_pyobj (0 dependencies)
  6. numpy_f2py_tests_test_assumed_shape (0 dependencies)
  7. numpy_f2py_tests_test_block_docstring (0 dependencies)
  8. numpy_f2py_tests_test_callback (0 dependencies)
  ... and 112 more

================================================================================
RECOMMENDED IMPLEMENTATION ORDER
================================================================================

Based on the dependency analysis, here's the recommended order for porting NumPy to Lean:

PHASE 1: Core Foundation (Essential Infrastructure)
--------------------------------------------------
1. numpy_version - Version information
2. numpy_exceptions - Exception hierarchy
3. numpy_dtypes - Basic data types
4. numpy__typing__scalars - Scalar type definitions
5. numpy__typing__shape - Shape type definitions
6. numpy__typing__dtype_like - DType-like definitions
7. numpy_core__multiarray_umath - Core array and ufunc C interface
8. numpy_core_multiarray - Core multiarray functionality

PHASE 2: Type System and Array Structure
----------------------------------------
1. numpy_core__dtype - Data type system
2. numpy_core_numerictypes - Numeric type definitions
3. numpy__typing__array_like - Array-like type definitions
4. numpy__typing__nested_sequence - Nested sequence types
5. numpy_core__internal - Internal array structure
6. numpy_core_overrides - Array function overrides

PHASE 3: Basic Array Operations
-------------------------------
1. numpy_core_numeric - Numeric operations
2. numpy_core_fromnumeric - Array creation from numeric
3. numpy_core_shape_base - Shape manipulation
4. numpy_core_function_base - Basic array functions
5. numpy_lib__shape_base_impl - Shape base implementation
6. numpy_lib__stride_tricks_impl - Stride tricks

PHASE 4: Mathematical Operations
--------------------------------
1. numpy_core_umath - Universal functions (ufuncs)
2. numpy_core_einsumfunc - Einstein summation
3. numpy_lib__ufunclike_impl - Ufunc-like operations
4. numpy_lib__function_base_impl - Function base implementation

PHASE 5: Advanced Array Features
--------------------------------
1. numpy_lib__arraysetops_impl - Set operations on arrays
2. numpy_lib__arraypad_impl - Array padding
3. numpy_lib__index_tricks_impl - Advanced indexing
4. numpy_core_records - Structured arrays
5. numpy_ma_core - Masked arrays core

PHASE 6: Domain-Specific Modules
--------------------------------
1. numpy_linalg - Linear algebra
2. numpy_fft - Fast Fourier Transform
3. numpy_random - Random number generation
4. numpy_polynomial - Polynomial operations

PHASE 7: I/O and Utilities
--------------------------
1. numpy_lib__npyio_impl - NumPy I/O operations
2. numpy_lib__format_impl - Array format handling
3. numpy_lib__utils_impl - Utility functions
4. numpy_ctypeslib - C-types library interface

PHASE 8: Testing Infrastructure
-------------------------------
1. numpy_testing - Testing utilities
2. numpy_testing__private_utils - Private testing utilities
3. Test modules for each implemented component

Key Implementation Notes:
------------------------
- Start with modules that have 0 dependencies
- Implement type definitions before operations
- Core array structure is critical for everything else
- Many modules can be implemented in parallel within each phase
- Testing infrastructure should be built alongside main modules
- F2py modules can be deferred as they're for Fortran integration


================================================================================
CRITICAL PATH TO NUMPY CORE
================================================================================

Direct and indirect dependencies of 'numpy' module (0):

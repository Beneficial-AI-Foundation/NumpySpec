name: CI

on:
  push:
    branches: [ main, dev-* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    
    env:
      # API keys for optional services
      MORPH_API_KEY: ${{ secrets.MORPH_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      # Environment settings
      CODEX_AGENT: true
      NON_INTERACTIVE: true
      LAKE_JOBS: 4
      LAKE_VERBOSE: 1
    
    steps:
      - uses: actions/checkout@v4
      
      # Setup OS-specific dependencies
      - name: Install Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Homebrew should already be installed, but ensure it's in PATH
          if ! command -v brew >/dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi
          
          # Add Homebrew to PATH for Apple Silicon Macs
          if [ -d "/opt/homebrew/bin" ]; then
            echo "/opt/homebrew/bin" >> $GITHUB_PATH
            export PATH="/opt/homebrew/bin:$PATH"
          fi
          
          # Update Homebrew
          brew update || echo "Homebrew update failed"
      
      # Use codex-install.sh for consistent setup
      - name: Run codex-install.sh
        run: |
          # Make script executable
          chmod +x codex-install.sh
          
          # Run installation script
          ./codex-install.sh
      
      # Setup additional paths after installation
      - name: Setup environment paths
        run: |
          # Add all necessary paths to GITHUB_PATH
          echo "$HOME/.elan/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
          # For macOS, ensure Homebrew paths are included
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "/opt/homebrew/bin" >> $GITHUB_PATH
            echo "/usr/local/bin" >> $GITHUB_PATH
          fi
      
      # Verify installations
      - name: Verify installations
        run: |
          # Source environment files
          [ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"
          [ -f "$HOME/.elan/env" ] && source "$HOME/.elan/env"
          
          # Set PATH for this step
          export PATH="$HOME/.elan/bin:$HOME/.cargo/bin:$HOME/.local/bin:$PATH"
          
          # For macOS, ensure Homebrew is in PATH
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
          fi
          
          echo "=== Tool Versions ==="
          uv --version || echo "uv not found"
          lean --version || echo "lean not found"
          lake --version || echo "lake not found"
          rg --version | head -1 || echo "ripgrep not found"
          fd --version || echo "fd not found"
          python --version || echo "python not found"
      
      # Cache Lean dependencies
      - name: Cache Lean dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.elan
            .lake
            lake-packages
          key: ${{ runner.os }}-lean-${{ hashFiles('lean-toolchain', 'lake-manifest.json') }}
          restore-keys: |
            ${{ runner.os }}-lean-
      
      # Build Lean project
      - name: Build Lean project
        run: |
          export PATH="$HOME/.elan/bin:$HOME/.cargo/bin:$HOME/.local/bin:$PATH"
          
          # Update dependencies
          lake update || echo "Lake update failed - continuing"
          
          # Try to get cache (may fail if no cache server)
          lake exe cache get || echo "Cache get failed - will build from source"
          
          # Build the project
          lake build
      
      # Run Python tests
      - name: Run Python tests
        run: |
          export PATH="$HOME/.elan/bin:$HOME/.cargo/bin:$HOME/.local/bin:$PATH"
          
          # Run tests
          uv run -m pytest -v
      
      # Run Lean tests (if any)
      - name: Run Lean tests
        run: |
          export PATH="$HOME/.elan/bin:$HOME/.cargo/bin:$HOME/.local/bin:$PATH"
          
          # Run any Lean test files
          if [ -d "test" ]; then
            lake test || echo "Lean tests failed"
          else
            echo "No Lean test directory found"
          fi
      
      # Lint check
      - name: Lint check
        run: |
          export PATH="$HOME/.elan/bin:$HOME/.cargo/bin:$HOME/.local/bin:$PATH"
          
          # Run linter
          lake build --verbose || echo "Lint check failed"
      
      # Upload artifacts on failure
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: failure-logs-${{ matrix.os }}
          path: |
            .lake/build/trace
            logs/
            *.log